{"version":3,"sources":["node_modules/browser-pack/_prelude.js","source/assets/js/koch-snowflake.js","source/assets/js/script.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","defaults","width","window","innerWidth","height","innerHeight","limit","KochSnowflake","element","options","_classCallCheck","this","Object","assign","init","render","canvas","document","querySelector","context","getContext","translate","points","pointsLength","beginPath","lineTo","x","y","stroke","p0","p1","PI","Math","dx","dy","angle","atan2","unit","sqrt","pA","pB","cos","sin","pC","koch","drawPath","p2","default"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,IAAAS,YAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,IAAAE,EAAAD,EAAAI,GAAA,GAAAL,GAAA,OAAAI,EAAAF,GAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,EAAAa,GAAA,SAAAT,EAAAU,EAAAJ,wZCAMK,GACJC,MAAQC,OAAOC,WACfC,OAAQF,OAAOG,YACfC,MAAO,GAGHC,aAEJ,SAAAA,EAAYC,EAASC,GAASC,EAAAC,KAAAJ,GAC5BK,OAAOC,OAAOF,KAAMX,EAAUS,GAE9BE,KAAKH,QAAUA,EAEfG,KAAKG,OACLH,KAAKI,OAAON,4CAIZ,IAAMO,EAAUL,KAAKK,OAAWC,SAASC,cAAcP,KAAKH,SACtDW,EAAUR,KAAKQ,QAAWR,KAAKK,OAAOI,WAAW,MACjDnB,EAAUe,EAAOf,MAASU,KAAKV,MAC/BG,EAAUY,EAAOZ,OAASO,KAAKP,OAErCe,EAAQE,UAAUpB,EAAQ,EAAGG,EAAS,oCAG/BkB,GAAQ,IACPH,EAAYR,KAAZQ,QAEJI,EAAeD,EAAOzB,OAI1B,IAFAsB,EAAQK,YAEFD,KACJJ,EAAQM,OAAOH,EAAOC,GAAcG,EAAGJ,EAAOC,GAAcI,GAG9DR,EAAQS,sCAGLC,EAAIC,EAAIxB,GACX,IAAMyB,EAAKC,KAAKD,GAEVE,EAAKH,EAAGJ,EAAIG,EAAGH,EACfQ,EAAKJ,EAAGH,EAAIE,EAAGF,EAEfQ,EAAWH,KAAKI,MAAMF,EAAID,GAE1BI,EADWL,KAAKM,KAAKL,EAAKA,EAAKC,EAAKA,GACd,EAEtBK,GACJb,EAAGG,EAAGH,EAAIO,EAAK,EACfN,EAAGE,EAAGF,EAAIO,EAAK,GAEXM,GACJd,EAAGa,EAAGb,EAAIM,KAAKS,IAAIN,EAAQJ,EAAK,GAAKM,EACrCV,EAAGY,EAAGZ,EAAIK,KAAKU,IAAIP,EAAQJ,EAAK,GAAKM,GAEjCM,GACJjB,EAAGI,EAAGJ,EAAIO,EAAK,EACfN,EAAGG,EAAGH,EAAIO,EAAK,GAGb5B,EAAQ,GACVK,KAAKiC,KAAKf,EAAIU,EAAIjC,EAAQ,GAC1BK,KAAKiC,KAAKL,EAAIC,EAAIlC,EAAQ,GAC1BK,KAAKiC,KAAKJ,EAAIG,EAAIrC,EAAQ,GAC1BK,KAAKiC,KAAKD,EAAIb,EAAIxB,EAAQ,IAE1BK,KAAKkC,UAAUhB,EAAIU,EAAIC,EAAIG,EAAIb,mCAI5BrB,GAAS,IACNH,EAAUK,KAAVL,MAEFuB,GACJH,EAAG,EACHC,GAAI,KAEAG,GACJJ,EAAG,IACHC,EAAG,KAECmB,GACJpB,GAAI,IACJC,EAAG,KAGLhB,KAAKiC,KAAKf,EAAIC,EAAIxB,GAClBK,KAAKiC,KAAKd,EAAIgB,EAAIxC,GAClBK,KAAKiC,KAAKE,EAAIjB,EAAIvB,sBAKPC,uCC9Ff,sDAFAlB,EAAA,qBAEA0D,SAAkB","file":"script.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","const defaults = {\n  width : window.innerWidth,\n  height: window.innerHeight,\n  limit: 5\n};\n\nclass KochSnowflake {\n\n  constructor(element, options) {\n    Object.assign(this, defaults, options);\n\n    this.element = element;\n\n    this.init();\n    this.render(options);\n  }\n\n  init() {\n    const canvas  = this.canvas   = document.querySelector(this.element);\n    const context = this.context  = this.canvas.getContext('2d');\n    const width   = canvas.width  = this.width;\n    const height  = canvas.height = this.height;\n\n    context.translate(width / 2, height / 2);\n  }\n\n  drawPath(points) {\n    const { context } = this;\n\n    let pointsLength = points.length;\n\n    context.beginPath();\n\n    while(pointsLength--) {\n      context.lineTo(points[pointsLength].x, points[pointsLength].y);\n    }\n\n    context.stroke();\n  }\n\n  koch(p0, p1, limit) {\n    const PI = Math.PI;\n\n    const dx = p1.x - p0.x;\n    const dy = p1.y - p0.y;\n\n    const angle    = Math.atan2(dy, dx);\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    const unit     = distance / 3;\n\n    const pA = {\n      x: p0.x + dx / 3,\n      y: p0.y + dy / 3\n    };\n    const pB = {\n      x: pA.x + Math.cos(angle - PI / 3) * unit,\n      y: pA.y + Math.sin(angle - PI / 3) * unit\n    };\n    const pC = {\n      x: p1.x - dx / 3,\n      y: p1.y - dy / 3\n    };\n\n    if (limit > 1) {\n      this.koch(p0, pA, limit - 1);\n      this.koch(pA, pB, limit - 1);\n      this.koch(pB, pC, limit - 1);\n      this.koch(pC, p1, limit - 1);\n    } else {\n      this.drawPath([p0, pA, pB, pC, p1]);\n    }\n  }\n\n  render(options) {\n    const { limit } = this;\n\n    const p0 = {\n      x: 0,\n      y: -321\n    };\n    const p1 = {\n      x: 278,\n      y: 160\n    };\n    const p2 = {\n      x: -278,\n      y: 160\n    };\n\n    this.koch(p0, p1, limit);\n    this.koch(p1, p2, limit);\n    this.koch(p2, p0, limit);\n  }\n\n}\n\nexport default KochSnowflake;\n","import KochSnowflake from './koch-snowflake';\n\nnew KochSnowflake('.canvas');\n"]}