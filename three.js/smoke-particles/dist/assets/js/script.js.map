{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/three/build/three.js","source/assets/js/script.js","source/assets/js/smoke.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","global","factory","define","amd","THREE","this","EventDispatcher","Vector2","x","y","Texture","image","mapping","wrapS","wrapT","magFilter","minFilter","format","type","anisotropy","encoding","Object","defineProperty","value","textureId","uuid","_Math","generateUUID","name","undefined","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","ClampToEdgeWrapping","LinearFilter","LinearMipMapLinearFilter","RGBAFormat","UnsignedByteType","offset","repeat","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","LinearEncoding","version","onUpdate","Vector4","z","w","WebGLRenderTarget","width","height","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLRenderTargetCube","activeCubeFace","activeMipMapLevel","Quaternion","_x","_y","_z","_w","Vector3","Matrix4","elements","arguments","console","error","DataTexture","data","NearestFilter","CubeTexture","images","CubeReflectionMapping","UniformContainer","seq","map","flatten","array","nBlocks","blockSize","firstElem","arrayCacheF32","Float32Array","toArray","allocTexUnits","renderer","arrayCacheI32","Int32Array","allocTextureUnit","setValue1f","gl","v","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2fv","uniform2f","setValue3fv","uniform3f","g","b","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","uniformMatrix2fv","setValue3fm","uniformMatrix3fv","mat3array","set","setValue4fm","uniformMatrix4fv","mat4array","setValueT1","unit","setTexture2D","emptyTexture","setValueT6","setTextureCube","emptyCubeTexture","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","getSingularSetter","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","size","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","units","setValueT6a","getPureArraySetter","SingleUniform","id","activeInfo","setValue","PureArrayUniform","StructuredUniform","addUniform","container","uniformObject","push","parseUniform","path","pathLength","RePathPart","lastIndex","match","exec","matchEnd","idIsIndex","subscript","next","WebGLUniforms","program","getProgramParameter","ACTIVE_UNIFORMS","info","getActiveUniform","getUniformLocation","Color","setRGB","Box2","min","max","Infinity","LensFlarePlugin","flares","init","vertices","faces","Uint16Array","vertexBuffer","createBuffer","elementBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","tempTexture","createTexture","occlusionTexture","state","bindTexture","TEXTURE_2D","texImage2D","RGB","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","RGBA","shader","vertexShader","join","fragmentShader","createProgram","attributes","vertex","getAttribLocation","uv","uniforms","renderType","occlusionMap","opacity","color","scale","rotation","screenPosition","createShader","FRAGMENT_SHADER","VERTEX_SHADER","prefix","getPrecision","shaderSource","compileShader","attachShader","linkProgram","context","render","scene","camera","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","validArea","useProgram","initAttributes","enableAttribute","disableUnusedAttributes","vertexAttribPointer","FLOAT","disable","CULL_FACE","buffers","depth","setMask","flare","matrixWorld","applyMatrix4","matrixWorldInverse","projectionMatrix","copy","containsPoint","activeTexture","TEXTURE0","TEXTURE1","copyTexImage2D","BLEND","enable","DEPTH_TEST","drawElements","TRIANGLES","UNSIGNED_SHORT","positionScreen","customUpdateCallback","updateLensFlares","j","jl","lensFlares","sprite","setBlending","blending","blendEquation","blendSrc","blendDst","resetGLState","SpritePlugin","sprites","position","uvOffset","uvScale","modelViewMatrix","fogType","fogDensity","fogNear","fogFar","fogColor","alphaTest","canvas","document","createElementNS","getContext","fillStyle","fillRect","needsUpdate","painterSortStable","renderOrder","spritePosition","spriteRotation","spriteScale","oldFogType","sceneFogType","fog","isFog","near","far","isFogExp2","density","multiplyMatrices","sort","material","visible","onBeforeRender","decompose","blendEquationAlpha","blendSrcAlpha","blendDstAlpha","premultipliedAlpha","setTest","depthTest","depthWrite","onAfterRender","Material","materialId","lights","NormalBlending","side","FrontSide","shading","SmoothShading","vertexColors","NoColors","transparent","SrcAlphaFactor","OneMinusSrcAlphaFactor","AddEquation","depthFunc","LessEqualDepth","clippingPlanes","clipIntersection","clipShadows","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","overdraw","ShaderMaterial","parameters","defines","linewidth","wireframe","wireframeLinewidth","clipping","skinning","morphTargets","morphNormals","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","uv2","index0AttributeName","setValues","MeshDepthMaterial","depthPacking","BasicDepthPacking","alphaMap","displacementMap","displacementScale","displacementBias","Box3","Sphere","center","radius","Matrix3","Plane","normal","constant","Frustum","p0","p1","p2","p3","p4","p5","planes","WebGLShadowMap","_renderer","_lights","_objects","capabilities","getDepthMaterial","object","isPointLight","lightPositionWorld","geometry","result","materialVariants","_depthMaterials","customMaterial","customDepthMaterial","_distanceMaterials","customDistanceMaterial","useMorphing","isBufferGeometry","morphAttributes","isGeometry","isSkinnedMesh","warn","useSkinning","variantIndex","_MorphingFlag","_SkinningFlag","localClippingEnabled","keyA","keyB","materialsForVariant","_materialCache","cachedMaterial","clone","scope","renderSingleSided","DoubleSide","renderReverseSided","BackSide","lightPos","renderObject","shadowCamera","layers","test","isMesh","isLine","isPoints","castShadow","frustumCulled","_frustum","intersectsObject","update","Array","isArray","groups","k","kl","group","groupMaterial","materialIndex","depthMaterial","_lightPositionWorld","renderBufferDirect","children","_gl","_state","_projScreenMatrix","_lightShadows","shadows","_shadowMapSize","_maxShadowMapSize","maxTextureSize","_lookTarget","_NumberOfMaterialVariants","cubeDirections","cubeUps","cube2DViewPorts","depthMaterialTemplate","RGBADepthPacking","distanceShader","ShaderLib","distanceUniforms","UniformsUtils","distanceMaterial","USE_SHADOWMAP","enabled","autoUpdate","PCFShadowMap","setClear","setScissorTest","faceCount","il","light","shadow","mapSize","vpWidth","vpHeight","pars","updateProjectionMatrix","isSpotLightShadow","shadowMap","shadowMatrix","matrix","setFromMatrixPosition","makeTranslation","target","lookAt","updateMatrixWorld","multiply","setRenderTarget","clear","face","add","up","vpDimensions","setFromMatrix","clearColor","getClearColor","clearAlpha","getClearAlpha","setClearColor","WebGLAttributes","attribute","bufferType","usage","dynamic","DYNAMIC_DRAW","buffer","onUploadCallback","Float64Array","Int16Array","SHORT","Uint32Array","UNSIGNED_INT","INT","Int8Array","BYTE","Uint8Array","bytesPerElement","BYTES_PER_ELEMENT","updateBuffer","updateRange","count","bufferSubData","subarray","get","isInterleavedBufferAttribute","remove","deleteBuffer","Euler","order","_order","DefaultOrder","Layers","mask","Object3D","object3DId","parent","DefaultUp","quaternion","onChange","setFromEuler","setFromQuaternion","defineProperties","enumerable","normalMatrix","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","receiveShadow","userData","Camera","OrthographicCamera","left","right","top","bottom","zoom","view","PerspectiveCamera","fov","aspect","focus","filmGauge","filmOffset","Face3","c","isVector3","vertexNormals","isColor","GeometryIdCount","Geometry","colors","faceVertexUvs","skinWeights","skinIndices","lineDistances","boundingBox","boundingSphere","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","BufferAttribute","itemSize","normalized","TypeError","Int8BufferAttribute","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Uint16BufferAttribute","Int32BufferAttribute","Uint32BufferAttribute","Float32BufferAttribute","Float64BufferAttribute","DirectGeometry","indices","normals","uvs","uvs2","arrayMax","BufferGeometry","index","drawRange","start","BoxGeometry","widthSegments","heightSegments","depthSegments","fromBufferGeometry","BoxBufferGeometry","mergeVertices","buildPlane","udir","vdir","gridX","gridY","ix","iy","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","vector","numberOfVertices","d","addGroup","groupStart","Math","floor","setIndex","addAttribute","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","MeshBasicMaterial","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","envMap","combine","MultiplyOperation","reflectivity","refractionRatio","wireframeLinecap","wireframeLinejoin","Ray","origin","direction","Line3","end","Triangle","Mesh","random","drawMode","TrianglesDrawMode","updateMorphTargets","WebGLBackground","objects","alpha","planeCamera","planeMesh","boxCamera","boxMesh","setClearAlpha","forceClear","background","autoClear","autoClearColor","autoClearDepth","autoClearStencil","isCubeTexture","cube","extractRotation","getInverse","isTexture","reversePainterSortStable","WebGLRenderList","opaque","opaqueLastIndex","transparentLastIndex","renderItem","finish","WebGLRenderLists","lists","hash","list","dispose","WebGLIndexedBufferRenderer","infoRender","mode","setMode","calls","renderInstances","extension","drawElementsInstancedANGLE","maxInstancedCount","WebGLBufferRenderer","drawArrays","drawArraysInstancedANGLE","WebGLGeometries","infoMemory","onGeometryDispose","event","buffergeometry","geometries","removeEventListener","wireframeAttributes","addEventListener","_bufferGeometry","setFromObject","geometryAttributes","getWireframeAttribute","geometryIndex","WebGLLights","shadowBias","shadowRadius","shadowMapSize","distance","coneCos","penumbraCos","decay","skyColor","groundColor","halfWidth","halfHeight","WebGLObjects","updateList","frame","updateFromObject","addLineNumbers","string","lines","split","WebGLShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","getEncodingComponents","sRGBEncoding","RGBEEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","GammaEncoding","getTexelDecodingFunction","functionName","components","getTexelEncodingFunction","getToneMappingFunction","toneMapping","toneMappingName","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","generateExtensions","rendererExtensions","envMapCubeUV","bumpMap","normalMap","flatShading","logarithmicDepthBuffer","filter","filterEmptyLine","generateDefines","chunks","fetchAttributeLocations","identifiers","ACTIVE_ATTRIBUTES","getActiveAttrib","replaceLightNums","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","parseIncludes","pattern","include","ShaderChunk","unrollLoops","snippet","unroll","parseInt","WebGLProgram","shadowMapTypeDefine","shadowMapType","PCFSoftShadowMap","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","CubeRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","MixOperation","AddOperation","prefixVertex","prefixFragment","gammaFactorDefine","gammaFactor","customExtensions","customDefines","isRawShaderMaterial","supportsVertexTextures","maxBones","useFog","fogExp","emissiveMap","roughnessMap","metalnessMap","useVertexTexture","doubleSided","flipSided","numClippingPlanes","shadowMapEnabled","sizeAttenuation","gradientMap","numClipIntersection","physicallyCorrectLights","NoToneMapping","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","isShaderMaterial","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","bindAttribLocation","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","log","deleteShader","cachedUniforms","getUniforms","cachedAttributes","getAttributes","destroy","deleteProgram","programIdCount","usedTimes","WebGLPrograms","allocateBones","bones","skeleton","floatVertexTextures","nVertexUniforms","maxVertexUniforms","nVertexMatrices","getTextureEncodingFromMap","gammaOverrideLinear","isWebGLRenderTarget","programs","shaderIDs","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","parameterNames","getParameters","nClipPlanes","nClipIntersection","shaderID","getMaxPrecision","currentRenderTarget","getRenderTarget","vertexTextures","gammaOutput","gammaInput","envMapMode","FlatShading","maxMorphTargets","maxMorphNormals","directional","point","spot","rectArea","hemi","getProgramCode","onBeforeCompile","toString","acquireProgram","p","pl","programInfo","releaseProgram","indexOf","pop","WebGLTextures","properties","paramThreeToGL","clampToMaxSize","maxSize","drawImage","isPowerOfTwo","makePowerOfTwo","HTMLImageElement","HTMLCanvasElement","nearestPowerOfTwo","textureNeedsPowerOfTwo","textureNeedsGenerateMipmaps","filterFallback","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LINEAR","onTextureDispose","deallocateTexture","textures","onRenderTargetDispose","renderTarget","deallocateRenderTarget","textureProperties","__image__webglTextureCube","deleteTexture","__webglInit","__webglTexture","renderTargetProperties","isWebGLRenderTargetCube","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","slot","__version","complete","uploadTexture","setTextureParameters","textureType","isPowerOfTwoImage","FloatType","HalfFloatType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","glFormat","glType","mipmap","isDepthTexture","internalFormat","DEPTH_COMPONENT","_isWebGL2","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","DepthFormat","UnsignedShortType","UnsignedIntType","DepthStencilFormat","DEPTH_STENCIL","UnsignedInt248Type","isDataTexture","isCompressedTexture","RGBFormat","getCompressedTextureFormats","compressedTexImage2D","generateMipmap","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthTexture","webglDepthTexture","setupDepthRenderbuffer","isCube","createRenderbuffer","WebGL2RenderingContext","TEXTURE_CUBE_MAP","isCompressed","cubeImage","maxCubemapSize","TEXTURE_CUBE_MAP_POSITIVE_X","setTextureCubeDynamic","setupRenderTarget","isTargetPowerOfTwo","createFramebuffer","COLOR_ATTACHMENT0","updateRenderTargetMipmap","webglTexture","WebGLProperties","WebGLState","NoBlending","CustomBlending","currentBlending","currentPremultipledAlpha","AdditiveBlending","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE","blendFunc","SRC_ALPHA","SubtractiveBlending","ZERO","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","MultiplyBlending","SRC_COLOR","currentBlendEquation","currentBlendEquationAlpha","currentBlendSrc","currentBlendDst","currentBlendSrcAlpha","currentBlendDstAlpha","setFlipSided","currentFlipSided","frontFace","CW","CCW","setCullFace","cullFace","CullFaceNone","currentCullFace","CullFaceBack","BACK","CullFaceFront","FRONT","FRONT_AND_BACK","setPolygonOffset","factor","POLYGON_OFFSET_FILL","currentPolygonOffsetFactor","currentPolygonOffsetUnits","webglSlot","maxTextures","currentTextureSlot","colorBuffer","locked","currentColorMask","currentColorClear","colorMask","setLocked","lock","equals","reset","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","NeverDepth","NEVER","AlwaysDepth","ALWAYS","LessDepth","LESS","LEQUAL","EqualDepth","EQUAL","GreaterEqualDepth","GEQUAL","GreaterDepth","GREATER","NotEqualDepth","NOTEQUAL","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","stencilFunc","stencilRef","setOp","stencilFail","stencilZFail","stencilZPass","stencilOp","stencil","clearStencil","maxVertexAttributes","getParameter","MAX_VERTEX_ATTRIBS","newAttributes","enabledAttributes","attributeDivisors","compressedTextureFormats","currentLineWidth","currentScissorTest","MAX_COMBINED_TEXTURE_IMAGE_UNITS","parseFloat","VERSION","lineWidthAvailable","currentBoundTextures","currentScissor","currentViewport","emptyTextures","enableVertexAttribArray","vertexAttribDivisorANGLE","enableAttributeAndDivisor","meshPerAttribute","disableVertexAttribArray","formats","COMPRESSED_TEXTURE_FORMATS","setMaterial","setLineWidth","lineWidth","getScissorTest","SCISSOR_TEST","webglType","boundTexture","apply","WebGLCapabilities","getShaderPrecisionFormat","HIGH_FLOAT","MEDIUM_FLOAT","maxAnisotropy","maxPrecision","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","floatFragmentTextures","MAX_TEXTURE_MAX_ANISOTROPY_EXT","ArrayCamera","cameras","WebVRManager","device","frameData","window","VRFrameData","standingMatrix","standingMatrixInverse","cameraL","bounds","cameraR","cameraVR","currentSize","currentPixelRatio","isPresenting","eyeParameters","getEyeParameters","renderWidth","renderHeight","getPixelRatio","getSize","setDrawingBufferSize","standing","getDevice","setDevice","getCamera","depthNear","depthFar","getFrameData","pose","fromArray","orientation","stageParameters","sittingToStandingTransform","leftViewMatrix","rightViewMatrix","leftProjectionMatrix","rightProjectionMatrix","getLayers","layer","leftBounds","rightBounds","getStandingMatrix","submitFrame","WebGLExtensions","getExtension","WebGLClipping","resetGlobalState","uniform","globalState","numGlobalPlanes","numPlanes","numIntersection","projectPlanes","dstOffset","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","viewNormalMatrix","getNormalMatrix","i4","plane","renderingShadows","enableLocalClipping","beginShadows","endShadows","setState","cache","fromCache","nGlobal","lGlobal","clippingState","WebGLRenderer","getTargetPixelRatio","_currentRenderTarget","_pixelRatio","setDefaultGLState","_currentScissor","_scissor","multiplyScalar","_currentViewport","_viewport","_currentProgram","_currentCamera","_currentGeometryProgram","_currentMaterialId","onContextLost","preventDefault","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReference","programCache","renderObjectImmediate","_this","renderBufferImmediate","absNumericalSort","abs","setupVertexAttributes","startIndex","isInstancedBufferGeometry","programAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","stride","isInstancedInterleavedBuffer","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","projectObject","sortObjects","isLight","isSprite","intersectsSprite","isLensFlare","isImmediateRenderObject","_vector3","currentRenderList","renderObjects","renderList","overrideMaterial","isArrayCamera","_currentArrayCamera","camera2","_width","_height","setViewport","setScissor","setProgram","initMaterial","materialProperties","_clipping","programChange","numSupportedMorphTargets","numSupportedMorphNormals","lightsHash","ambientLightColor","ambient","directionalLights","spotLights","rectAreaLights","pointLights","hemisphereLights","directionalShadowMap","directionalShadowMatrix","spotShadowMap","spotShadowMatrix","pointShadowMap","pointShadowMatrix","progUniforms","uniformsList","seqWithValue","_usedTextureUnits","_clippingEnabled","_localClippingEnabled","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","LN2","isMeshPhongMaterial","isMeshStandardMaterial","uCamPos","cameraPosition","isMeshLambertMaterial","isMeshBasicMaterial","setOptional","boneTexture","sqrt","nextPowerOfTwo","ceil","boneMatrices","boneTextureSize","toneMappingExposure","toneMappingWhitePoint","markUniformsLightsNeedsUpdate","refreshUniformsFog","isMeshNormalMaterial","isMeshDepthMaterial","refreshUniformsCommon","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","refreshUniformsNormal","ltcMat","UniformsLib","LTC_MAT_TEXTURE","ltcMag","LTC_MAG_TEXTURE","upload","diffuse","emissive","emissiveIntensity","uvScaleMap","offsetRepeat","flipEnvMap","dashSize","totalSize","gapSize","specular","shininess","bumpScale","normalScale","roughness","metalness","envMapIntensity","clearCoat","clearCoatRoughness","setupShadows","lightShadowsLength","setupLights","ll","intensity","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","isAmbientLight","isDirectionalLight","lightCache","sub","transformDirection","bias","isSpotLight","cos","angle","penumbra","isRectAreaLight","_matrix42","identity","_matrix4","premultiply","isHemisphereLight","normalize","RepeatWrapping","REPEAT","MirroredRepeatWrapping","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LinearMipMapNearestFilter","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UnsignedShort4444Type","UNSIGNED_SHORT_4_4_4_4","UnsignedShort5551Type","UNSIGNED_SHORT_5_5_5_1","UnsignedShort565Type","UNSIGNED_SHORT_5_6_5","ByteType","ShortType","IntType","HALF_FLOAT_OES","AlphaFormat","ALPHA","LuminanceFormat","LUMINANCE","LuminanceAlphaFormat","LUMINANCE_ALPHA","SubtractEquation","FUNC_SUBTRACT","ReverseSubtractEquation","FUNC_REVERSE_SUBTRACT","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","DstAlphaFactor","DST_ALPHA","OneMinusDstAlphaFactor","ONE_MINUS_DST_ALPHA","DstColorFactor","DST_COLOR","OneMinusDstColorFactor","ONE_MINUS_DST_COLOR","SrcAlphaSaturateFactor","SRC_ALPHA_SATURATE","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","RGB_ETC1_Format","COMPRESSED_RGB_ETC1_WEBGL","MinEquation","MaxEquation","MIN_EXT","MAX_EXT","UNSIGNED_INT_24_8_WEBGL","REVISION","_canvas","_context","_alpha","_depth","_stencil","_antialias","antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","morphInfluences","domElement","_currentFramebuffer","_currentScissorTest","_scissorTest","_infoMemory","_infoRender","points","memory","contextAttributes","rangeMin","rangeMax","MaxIndex","renderLists","vr","bufferRenderer","indexedBufferRenderer","spritePlugin","lensFlarePlugin","getContextAttributes","forceContextLoss","loseContext","setPixelRatio","setSize","updateStyle","style","getDrawingBufferSize","pixelRatio","boolean","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearTarget","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","nx","ny","nz","uvArray","colorArray","geometryProgram","updateBuffers","morphTargetInfluences","activeInfluences","influence","removeAttribute","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","LINES","TriangleStripDrawMode","TRIANGLE_STRIP","TriangleFanDrawMode","TRIANGLE_FAN","isLineSegments","isLineLoop","LINE_LOOP","LINE_STRIP","POINTS","compile","traverse","animate","callback","onFrame","requestAnimationFrame","isCamera","opaqueObjects","transparentObjects","setFaceCulling","frontFaceDirection","FrontFaceDirectionCW","textureUnit","warned","setTexture","readRenderTargetPixels","restore","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","FogExp2","Fog","Scene","LensFlare","SpriteMaterial","Sprite","LOD","levels","Skeleton","boneInverses","slice","calculateInverses","Bone","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","initBones","bind","normalizeSkinWeights","linecap","linejoin","Line","LineSegments","LineLoop","Points","Group","VideoTexture","video","readyState","HAVE_CURRENT_DATA","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","ol","edge1","edge2","key","edge","edges","keys","index1","index2","getX","fromBufferAttribute","ParametricGeometry","func","slices","stacks","ParametricBufferGeometry","pu","pv","sliceCount","subVectors","crossVectors","PolyhedronGeometry","detail","PolyhedronBufferGeometry","subdivideFace","cols","pow","aj","lerp","bj","rows","pushVertex","correctSeam","uvBuffer","x0","x1","x2","getVertexByIndex","correctUVs","centroid","uvA","uvB","uvC","divideScalar","azi","azimuth","correctUV","PI","atan2","inclination","subdivide","appplyRadius","generateUVs","computeVertexNormals","normalizeNormals","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","generateSegment","P","getPointAt","N","frames","B","sin","generateIndices","computeFrenetFrames","generateBufferData","TorusKnotGeometry","tube","q","heightScale","TorusKnotBufferGeometry","calculatePositionOnCurve","cu","su","quOverP","cs","P1","P2","T","addVectors","cx","cy","TorusGeometry","arc","TorusBufferGeometry","ExtrudeGeometry","shapes","ExtrudeBufferGeometry","addShapeList","TextGeometry","text","TextBufferGeometry","font","isFont","generateShapes","curveSegments","amount","bevelThickness","bevelSize","bevelEnabled","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","segment","radiusStep","thetaSegmentLevel","LatheGeometry","segments","LatheBufferGeometry","clamp","base","inverseSegments","phi","n1","n2","ShapeGeometry","ShapeBufferGeometry","addShape","shape","shapeHole","indexOffset","extractPoints","shapeVertices","shapeHoles","holes","ShapeUtils","isClockWise","reverse","triangulateShape","concat","EdgesGeometry","thresholdAngle","geometry2","thresholdDot","DEG2RAD","computeFaceNormals","sourceVertices","face1","face2","dot","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","generateCap","centerIndexStart","centerIndexEnd","sign","theta","cosTheta","sinTheta","indexArray","slope","indexRow","generateTorso","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","ShadowMaterial","merge","RawShaderMaterial","STANDARD","PHYSICAL","TOON","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","onStart","itemStart","url","itemEnd","itemError","FileLoader","manager","DefaultLoadingManager","CompressedTextureLoader","_parser","DataTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Light","HemisphereLight","updateMatrix","LightShadow","SpotLightShadow","SpotLight","power","PointLight","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","constructor","valueSize","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrackConstructor","times","values","interpolation","AnimationUtils","convertArray","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","validate","optimize","VectorKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","NumberKeyframeTrack","StringKeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","KeyframeTrack","AnimationClip","duration","tracks","resetDuration","MaterialLoader","BufferGeometryLoader","Loader","onLoadStart","onLoadProgress","onLoadComplete","JSONLoader","withCredentials","ObjectLoader","texturePath","CatmullRom","v0","v1","t2","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","QuadraticBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezier","Curve","arcLengthDivisions","LineCurve","v2","CurvePath","curves","autoClose","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","SplineCurve","CubicBezierCurve","v3","QuadraticBezierCurve","Path","currentPoint","fromPoints","Shape","ShapePath","subPaths","currentPath","Font","FontLoader","AudioLoader","StereoCamera","eyeSep","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","updateCubeMap","AudioListener","AudioContext","gain","createGain","connect","destination","Audio","listener","getInput","autoplay","loop","startTime","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","PositionalAudio","panner","createPanner","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getOutput","PropertyMixer","binding","typeName","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","nodeName","AnimationObjectGroup","var_args","prototype","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","clip","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","endingStart","ZeroCurvatureEnding","endingEnd","interpolant","createInterpolant","settings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","LoopRepeat","_loopCount","_startTime","time","timeScale","_effectiveTimeScale","weight","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedBufferGeometry","InterleavedBufferAttribute","interleavedBuffer","InterleavedBuffer","InstancedInterleavedBuffer","InstancedBufferAttribute","Raycaster","ray","params","threshold","PointCloud","ascSort","intersectObject","raycaster","intersects","recursive","raycast","Clock","autoStart","oldTime","elapsedTime","running","Spherical","Cylindrical","MorphBlendMesh","animationsMap","animationsList","numFrames","endFrame","fps","createAnimation","setAnimationWeight","ImmediateRenderObject","renderCallback","VertexNormalsHelper","hex","nNormals","objGeometry","positions","SpotLightHelper","cone","getBoneList","boneList","isBone","SkeletonHelper","color1","color2","bone","VertexColors","PointLightHelper","sphereSize","RectAreaLightHelper","HemisphereLightHelper","rotateY","getAttribute","GridHelper","divisions","step","halfSize","PolarGridHelper","radials","circles","FaceNormalsHelper","DirectionalLightHelper","CameraHelper","addLine","addPoint","pointMap","FaceColors","colorFrustum","colorCone","colorUp","colorTarget","colorCross","BoxHelper","ArrowHelper","dir","headLength","headWidth","lineGeometry","coneGeometry","translate","line","setDirection","setLength","AxisHelper","CubicPoly","t0","t1","c0","c1","c2","c3","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","CatmullRomCurve3","CubicBezierCurve3","QuadraticBezierCurve3","LineCurve3","ArcCurve","aRadius","ClosedSplineCurve3","SplineCurve3","Spline","Number","EPSILON","isInteger","isFinite","Function","assign","output","source","nextKey","hasOwnProperty","_listeners","listeners","hasEventListener","listenerArray","splice","dispatchEvent","MOUSE","LEFT","MIDDLE","RIGHT","RGBEFormat","RAD2DEG","chars","rnd","euclideanModulo","m","mapLinear","a1","a2","b1","b2","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","round","isVector2","setScalar","scalar","setX","setY","setComponent","getComponent","addScalar","addScaledVector","subScalar","divide","clampScalar","minVal","maxVal","clampLength","roundToZero","negate","lengthSq","lengthManhattan","distanceTo","distanceToSquared","dx","dy","distanceToManhattan","lerpVectors","getY","rotateAround","toJSON","meta","metadata","generator","wrap","toDataURL","getDataURL","transformUv","isVector4","setZ","setW","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getZ","getW","create","slerp","qa","qb","qm","slerpFlat","dst","src0","srcOffset0","src1","srcOffset1","y0","z0","w0","y1","z1","w1","sqrSin","len","tDir","onChangeCallback","euler","isEuler","s1","s2","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","vFrom","vTo","inverse","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","applyMatrix3","qx","qy","qz","qw","iz","iw","project","unproject","cross","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","angleTo","dz","setFromSpherical","sinPhiRadius","setFromCylindrical","setFromMatrixScale","sx","setFromMatrixColumn","sy","sz","isMatrix4","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","me","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","scaleX","scaleY","scaleZ","makeRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","y2","z2","wx","wy","wz","eye","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","applyToBufferAttribute","setXYZ","determinant","transpose","tmp","setPosition","throwOnDegenerate","t11","t12","t13","t14","det","msg","detInv","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeScale","makeShear","compose","invSX","invSY","invSZ","makePerspective","makeOrthographic","h","ColorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","setHex","setStyle","setHSL","hue2rgb","handleAlpha","charAt","copyGammaToLinear","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","getHex","getHexString","getHSL","optionalTarget","hue","saturation","hsl","lightness","delta","getStyle","offsetHSL","addColors","common","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","merged","uniforms_src","uniforms_dst","parameter_src","isMatrix3","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_template","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_flip","normal_fragment","normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","basic","lambert","phong","standard","dashed","tCube","tFlip","equirect","tEquirect","distanceRGBA","physical","setFromPoints","makeEmpty","expandByPoint","setFromCenterAndSize","box","isEmpty","getCenter","expandByVector","expandByScalar","containsBox","intersectsBox","clampPoint","distanceToPoint","intersect","union","isMaterial","newValue","currentValue","extractFromCache","isRoot","srcPlanes","dstPlanes","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","expandByObject","intersectsSphere","closestPoint","sphere","intersectsPlane","getBoundingSphere","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","setFromMatrix4","matrix4","transposeIntoArray","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","intersectLine","denominator","intersectsLine","startSign","endSign","coplanarPoint","m1","optionalNormalMatrix","referencePoint","frustum","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","computeBoundingSphere","negRadius","d1","d2","RotationOrders","asin","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","toggle","isObject3D","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","q1","rotateX","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","getObjectById","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseVisible","traverseAncestors","force","serialize","library","element","isRootObject","materials","JSON","stringify","uuids","parse","child","isOrthographicCamera","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","zoomW","zoomH","scaleW","scaleH","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","skew","computeBoundingBox","obj","addFace","tempNormals","tempUVs","tempUVs2","cb","ab","fl","vA","vB","vC","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","computeLineDistances","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mesh","verticesMap","unique","changes","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","_id","newUvs1","newUvs2","setBit","getNormalIndex","normalsHash","getColorIndex","colorsHash","getUvIndex","uvsHash","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","uvsCopy","morphTarget","morphNormal","srcVertexNormal","destVertexNormal","isBufferAttribute","setArray","setDynamic","copyAt","copyArray","copyColorsArray","copyIndicesArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZW","onUpload","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","getIndex","clearGroups","setDrawRange","direct","__directGeometry","lineDistance","fromDirectGeometry","isNaN","pA","pB","pC","attributeArray1","attribute2","attributeArray2","toNonIndexed","array2","morphAttribute","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","segCenter","segDir","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","distanceSq","closestPointToPointParameter","startP","startEnd","clampToLine","startEnd2","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","setFromPointsAndIndices","i0","i1","i2","triangle","area","midpoint","edgeList","projectedPoint","minDistance","setDrawMode","ml","morphTargetDictionary","String","uvIntersection","uv1","uv3","barycoord","checkIntersection","intersectionPointWorld","checkBufferGeometryIntersection","intersection","intersectionPoint","faceIndex","inverseMatrix","tempA","tempB","tempC","fvA","fvB","fvC","isMultiMaterial","faceMaterial","tl","targets","uvs_f","vecX","vecY","wantedRotation","isSpriteMaterial","intersectPoint","worldPosition","worldScale","guessSizeSq","level","addLevel","getObjectForDistance","matrixPosition","offsetMatrix","identityMatrix","gbone","pos","rotq","scl","sw","vec","skinWeight","linePrecision","precisionSq","vStart","vEnd","interSegment","interRay","distSq","nbVertices","testPoint","rayPointDistanceSq","localThresholdSq","distanceToRay","localThreshold","contour","triangulate","snip","verts","px","py","bX","bY","cX","cY","apx","apy","bpx","bpy","cpx","cpy","cCROSSap","bCROSScp","aCROSSbp","vertIndices","nv","removeDupEndPts","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1Pt","seg2Pt","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","forEach","allPointsMap","allpoints","hl","shapeWithoutHoles","hole","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","indepHoles","failedCuts","minShapeIndex","counter","h2","inShapeIdx","inHoleIdx","lastShapeIdx","prevShapeIdx","nextShapeIdx","insideAngle","lastHoleIdx","prevHoleIdx","nextHoleIdx","isCutLineInsideAngles","inShapePt","inHolePt","sIdx","nextIdx","intersectsShapeEdge","ihIdx","chkHole","hIdx","intersectsHoleEdge","removeHoles","triangles","pts","getArrays","positionAttribute","verticesArray","uvAttribute","IndexAttribute","sl","arrays","scalePt2","pt","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","sidewalls","layeroffset","steps","bevelSegments","slen1","vlen","slen2","f4","placeholder","f3","addVertex","nextIndex","uvgen","generateTopUV","addUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","indicesArray","vector2","extrudePts","splineTube","binormal","position2","extrudePath","extrudeByPath","UVGenerator","WorldUVGenerator","getSpacedPoints","ahole","shapePoints","bs","vert","flen","contourMovements","oneHoleMovements","holesMovements","verticesMovements","buildLidFaces","extrudeMaterial","buildSideFaces","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","Geometries","freeze","isShadowMaterial","Materials","Cache","files","file","load","cached","setTimeout","dataUriRegex","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","toLowerCase","ArrayBuffer","charCodeAt","Blob","parser","DOMParser","parseFromString","request","XMLHttpRequest","open","status","overrideMimeType","header","requestHeader","setRequestHeader","send","setPath","setResponseType","setWithCredentials","setMimeType","loader","loaded","texDatas","mipmapCount","loadTexture","isCubemap","texData","substr","crossOrigin","src","setCrossOrigin","urls","isJPEG","search","arraySlice","from","to","isTypedArray","forceClone","isView","DataView","getKeyframeOrder","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","KeyframeTrackPrototype","InterpolantFactoryMethodDiscrete","getValueSize","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","message","ValueTypeName","getInterpolation","shift","timeOffset","trim","endTime","nKeys","valid","prevTime","currTime","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","json","trackType","_getTrackTypeForValueTypeName","track","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","parts","animationMorphTargets","clips","parseAnimation","animation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","setTextures","getTexture","typedArray","TYPED_ARRAYS","drawcalls","offsets","Handlers","handlers","regex","extractUrlBase","initMaterials","createMaterial","BlendingMode","textureLoader","materialLoader","fullPath","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","mapEmissiveRepeat","mapEmissiveOffset","mapEmissiveWrap","mapEmissiveAnisotropy","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","mapMetalnessRepeat","mapMetalnessOffset","mapMetalnessWrap","mapMetalnessAnisotropy","mapRoughnessRepeat","mapRoughnessOffset","mapRoughnessWrap","mapRoughnessAnisotropy","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","setTexturePath","parseModel","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","hasMaterial","faceA","faceB","uvLayer","nUvLayers","parseSkin","influencesPerVertex","parseMorphing","dstVertices","srcVertices","morphColors","parseAnimations","outputAnimations","morphAnimationClips","substring","lastIndexOf","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","loadImage","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","UVMapping","getPoint","getUtoTmapping","getPoints","getLength","lengths","getLengths","cacheArcLengths","current","last","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","getTangentAt","mat","MAX_VALUE","tz","isLineCurve","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","segmentLength","lens","cacheLengths","sums","resolution","isEllipseCurve","isSplineCurve","createPointsGeometry","createGeometry","createSpacedPointsGeometry","twoPi","deltaAngle","samePoints","intPoint","point0","point1","point2","point3","PathPrototype","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","extractAllPoints","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","solid","holesFirst","tmpPoints","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sLen","sho","ho","hole_unassigned","s2Idx","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","isPointInsidePolygon","froms","tos","tmpHoles","createPath","glyph","glyphs","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","outline","_cachedOutline","ha","paths","line_height","yMax","yMin","underlineThickness","char","ret","createPaths","webkitAudioContext","setContext","decodeAudioData","audioBuffer","instance","eyeRight","eyeLeft","xmin","xmax","eyeSepOnProjection","ymax","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","positionX","setValueAtTime","currentTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","setNodeSource","audioNode","setBuffer","play","createBufferSource","onended","onEnded","pause","stop","getFilters","setFilters","setPlaybackRate","getPlaybackRate","getLoop","setLoop","getVolume","setVolume","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","firstValidIndex","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","directoryRe","nodeRe","objectRe","propertyRe","trackRe","RegExp","supportedObjectNames","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchSkeleton","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","now","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","_setEndings","handle_stop","pingPong","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","remove_empty_map","_","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","isInterleavedBuffer","setFromCamera","coords","intersectObjects","performance","Date","getElapsedTime","getDelta","newTime","other","makeSafe","vec3","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","frameRanges","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","keyframe","objPos","objNorm","coneLength","coneWidth","boneMatrix","matrixWorldInv","hx","hy","lightPlane","targetLine","setPoint","setColor","pz","SceneUtils","createMultiMaterialObject","detach","attach","construct","initFromArray","getControlPointsArray","reparametrizeByArcLength","samplingCoef","setColors","isIntersectionBox","isIntersectionSphere","random16","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBuffer","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","extrude","makeGeometry","fromAttribute","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","getChildByName","renderDepth","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraNear","shadowCameraFar","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","addIndex","addDrawCall","clearDrawCalls","computeOffsets","wrapAround","wrapRGB","metal","getCurrentRenderTarget","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapCullFace","getData","GeometryUtils","geometry1","ImageUtils","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","CullFaceFrontBack","FrontFaceDirectionCCW","BasicShadowMap","LoopOnce","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroSlopeEnding","WrapAroundEnding","LogLuvEncoding","CubeGeometry","Face4","LineStrip","LinePieces","MeshFaceMaterial","MultiMaterial","Particle","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","DynamicBufferAttribute","Int8Attribute","Uint8Attribute","Uint8ClampedAttribute","Int16Attribute","Uint16Attribute","Int32Attribute","Uint32Attribute","Float32Attribute","Float64Attribute","BoundingBoxHelper","EdgesHelper","WireframeHelper","XHRLoader","BinaryTextureLoader","Projector","projectVector","unprojectVector","pickingRay","CanvasRenderer","default","querySelector","Smoke","_classCallCheck","defaults","innerWidth","innerHeight","onResize","addEventListeners","clock","meshGeometry","meshMaterial","cubeSineDriver","addCamera","addLights","addParticles","addBackground","smokeParticles","smokeParticlesLength","smokeMaterial","smokeGeometry","smokeMeshes","textGeometry","textMaterial","evolveSmoke","windowWidth","windowHeight"],"mappings":"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","file":"script.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.THREE = global.THREE || {})));\n}(this, (function (exports) { 'use strict';\n\n\t// Polyfills\n\n\tif ( Number.EPSILON === undefined ) {\n\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n\t}\n\n\tif ( Number.isInteger === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\t\tNumber.isInteger = function ( value ) {\n\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t\t};\n\n\t}\n\n\t//\n\n\tif ( Math.sign === undefined ) {\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\t\tMath.sign = function ( x ) {\n\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t\t};\n\n\t}\n\n\tif ( Function.prototype.name === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\t\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tif ( Object.assign === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t\t( function () {\n\n\t\t\tObject.assign = function ( target ) {\n\n\t\t\t\t'use strict';\n\n\t\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t\t}\n\n\t\t\t\tvar output = Object( target );\n\n\t\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn output;\n\n\t\t\t};\n\n\t\t} )();\n\n\t}\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\n\tfunction EventDispatcher() {}\n\n\tObject.assign( EventDispatcher.prototype, {\n\n\t\taddEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\t\tlisteners[ type ] = [];\n\n\t\t\t}\n\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\t\tlisteners[ type ].push( listener );\n\n\t\t\t}\n\n\t\t},\n\n\t\thasEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) return false;\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t\t},\n\n\t\tremoveEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) return;\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._listeners === undefined ) return;\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ event.type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tevent.target = this;\n\n\t\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tvar REVISION = '86';\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar FrontFaceDirectionCW = 0;\n\tvar FrontFaceDirectionCCW = 1;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar Uncharted2ToneMapping = 3;\n\tvar CineonToneMapping = 4;\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar SphericalReflectionMapping = 305;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RGB_S3TC_DXT1_Format = 2001;\n\tvar RGBA_S3TC_DXT1_Format = 2002;\n\tvar RGBA_S3TC_DXT3_Format = 2003;\n\tvar RGBA_S3TC_DXT5_Format = 2004;\n\tvar RGB_PVRTC_4BPPV1_Format = 2100;\n\tvar RGB_PVRTC_2BPPV1_Format = 2101;\n\tvar RGBA_PVRTC_4BPPV1_Format = 2102;\n\tvar RGBA_PVRTC_2BPPV1_Format = 2103;\n\tvar RGB_ETC1_Format = 2151;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _Math = {\n\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\n\t\tgenerateUUID: function () {\n\n\t\t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\n\t\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n\t\t\tvar uuid = new Array( 36 );\n\t\t\tvar rnd = 0, r;\n\n\t\t\treturn function generateUUID() {\n\n\t\t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\n\t\t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\n\t\t\t\t\t\tuuid[ i ] = '-';\n\n\t\t\t\t\t} else if ( i === 14 ) {\n\n\t\t\t\t\t\tuuid[ i ] = '4';\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n\t\t\t\t\t\tr = rnd & 0xf;\n\t\t\t\t\t\trnd = rnd >> 4;\n\t\t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn uuid.join( '' );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclamp: function ( value, min, max ) {\n\n\t\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t\t},\n\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\t\teuclideanModulo: function ( n, m ) {\n\n\t\t\treturn ( ( n % m ) + m ) % m;\n\n\t\t},\n\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t\t},\n\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\t\tlerp: function ( x, y, t ) {\n\n\t\t\treturn ( 1 - t ) * x + t * y;\n\n\t\t},\n\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\t\tsmoothstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) return 0;\n\t\t\tif ( x >= max ) return 1;\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * ( 3 - 2 * x );\n\n\t\t},\n\n\t\tsmootherstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) return 0;\n\t\t\tif ( x >= max ) return 1;\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t\t},\n\n\t\t// Random integer from <low, high> interval\n\n\t\trandInt: function ( low, high ) {\n\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t\t},\n\n\t\t// Random float from <low, high> interval\n\n\t\trandFloat: function ( low, high ) {\n\n\t\t\treturn low + Math.random() * ( high - low );\n\n\t\t},\n\n\t\t// Random float from <-range/2, range/2> interval\n\n\t\trandFloatSpread: function ( range ) {\n\n\t\t\treturn range * ( 0.5 - Math.random() );\n\n\t\t},\n\n\t\tdegToRad: function ( degrees ) {\n\n\t\t\treturn degrees * _Math.DEG2RAD;\n\n\t\t},\n\n\t\tradToDeg: function ( radians ) {\n\n\t\t\treturn radians * _Math.RAD2DEG;\n\n\t\t},\n\n\t\tisPowerOfTwo: function ( value ) {\n\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t\t},\n\n\t\tnearestPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tnextPowerOfTwo: function ( value ) {\n\n\t\t\tvalue --;\n\t\t\tvalue |= value >> 1;\n\t\t\tvalue |= value >> 2;\n\t\t\tvalue |= value >> 4;\n\t\t\tvalue |= value >> 8;\n\t\t\tvalue |= value >> 16;\n\t\t\tvalue ++;\n\n\t\t\treturn value;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author egraether / http://egraether.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tfunction Vector2( x, y ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\n\t}\n\n\tObject.defineProperties( Vector2.prototype, {\n\n\t\t\"width\" : {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.x = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\" : {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.y = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tisVector2: true,\n\n\t\tset: function ( x, y ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v ) {\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min = new Vector2();\n\t\t\tvar max = new Vector2();\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tmin.set( minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t\t},\n\n\t\tlengthManhattan: function() {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tangle: function () {\n\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n\t\t\treturn angle;\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\n\t\t},\n\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateAround: function ( center, angle ) {\n\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar textureId = 0;\n\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Texture.prototype, EventDispatcher.prototype, {\n\n\t\tconstructor: Texture,\n\n\t\tisTexture: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\t\tthis.mapping = source.mapping;\n\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\n\t\t\tthis.anisotropy = source.anisotropy;\n\n\t\t\tthis.format = source.format;\n\t\t\tthis.type = source.type;\n\n\t\t\tthis.offset.copy( source.offset );\n\t\t\tthis.repeat.copy( source.repeat );\n\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t\t}\n\n\t\t\tfunction getDataURL( image ) {\n\n\t\t\t\tvar canvas;\n\n\t\t\t\tif ( image.toDataURL !== undefined ) {\n\n\t\t\t\t\tcanvas = image;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\t\tcanvas.width = image.width;\n\t\t\t\t\tcanvas.height = image.height;\n\n\t\t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\n\t\t\t\tmapping: this.mapping,\n\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\n\t\t\t\tflipY: this.flipY\n\t\t\t};\n\n\t\t\tif ( this.image !== undefined ) {\n\n\t\t\t\t// TODO: Move to THREE.Image\n\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\t\timage.uuid = _Math.generateUUID(); // UGH\n\n\t\t\t\t}\n\n\t\t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: getDataURL( image )\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\n\t\t\t}\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t},\n\n\t\ttransformUv: function ( uv ) {\n\n\t\t\tif ( this.mapping !== UVMapping ) return;\n\n\t\t\tuv.multiply( this.repeat );\n\t\t\tuv.add( this.offset );\n\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.flipY ) {\n\n\t\t\t\tuv.y = 1 - uv.y;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector4( x, y, z, w ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\t\tthis.w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tisVector4: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( w ) {\n\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tcase 3: this.w = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tcase 3: return this.w;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t\t// q is assumed to be normalized\n\n\t\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\t\tif ( s < 0.0001 ) {\n\n\t\t\t\t this.x = 1;\n\t\t\t\t this.y = 0;\n\t\t\t\t this.z = 0;\n\n\t\t\t} else {\n\n\t\t\t\t this.x = q.x / s;\n\t\t\t\t this.y = q.y / s;\n\t\t\t\t this.z = q.z / s;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\t\tte = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t\t}\n\n\t\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\t\tangle = Math.PI;\n\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.set( x, y, z, angle );\n\n\t\t\t\treturn this; // return 180 deg rotation\n\n\t\t\t}\n\n\t\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = ( m32 - m23 ) / s;\n\t\t\tthis.y = ( m13 - m31 ) / s;\n\t\t\tthis.z = ( m21 - m12 ) / s;\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\t\t\tthis.w = Math.min( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\t\t\tthis.w = Math.max( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min, max;\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tif ( min === undefined ) {\n\n\t\t\t\t\tmin = new Vector4();\n\t\t\t\t\tmax = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\t\t\tthis.w = Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\t\t\tthis.w = Math.ceil( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\t\t\tthis.w = Math.round( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\t\t\tthis.w = - this.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t\t},\n\n\t\tlengthManhattan: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\t\t\tthis.w = array[ offset + 3 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\t\t\tarray[ offset + 3 ] = this.w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\t\t\tthis.w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author szimek / https://github.com/szimek/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Marius Kintel / https://github.com/kintel\n\t */\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\tfunction WebGLRenderTarget( width, height, options ) {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\toptions = options || {};\n\n\t\tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\n\t\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tObject.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {\n\n\t\tisWebGLRenderTarget: true,\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\tthis.viewport.copy( source.viewport );\n\n\t\t\tthis.texture = source.texture.clone();\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com\n\t */\n\n\tfunction WebGLRenderTargetCube( width, height, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\t\tthis.activeMipMapLevel = 0;\n\n\t}\n\n\tWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\n\tWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\n\tWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Quaternion( x, y, z, w ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.assign( Quaternion, {\n\n\t\tslerp: function ( qa, qb, qm, t ) {\n\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t\t},\n\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\t\tvar s = 1 - t,\n\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t\t// Normalize in case we just did a lerp:\n\t\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdst[ dstOffset ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Quaternion.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tw: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._w = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Quaternion.prototype, {\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t\t},\n\n\t\tcopy: function ( quaternion ) {\n\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromEuler: function ( euler, update ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c1 = cos( x / 2 );\n\t\t\tvar c2 = cos( y / 2 );\n\t\t\tvar c3 = cos( z / 2 );\n\n\t\t\tvar s1 = sin( x / 2 );\n\t\t\tvar s2 = sin( y / 2 );\n\t\t\tvar s3 = sin( z / 2 );\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t}\n\n\t\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos( halfAngle );\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\t\ttrace = m11 + m22 + m33,\n\t\t\t\ts;\n\n\t\t\tif ( trace > 0 ) {\n\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t\t} else if ( m22 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t\t} else {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\n\t\t\t}\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromUnitVectors: function () {\n\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar r;\n\n\t\t\tvar EPS = 0.000001;\n\n\t\t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n\t\t\t\tr = vFrom.dot( vTo ) + 1;\n\n\t\t\t\tif ( r < EPS ) {\n\n\t\t\t\t\tr = 0;\n\n\t\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv1.crossVectors( vFrom, vTo );\n\n\t\t\t\t}\n\n\t\t\t\tthis._x = v1.x;\n\t\t\t\tthis._y = v1.y;\n\t\t\t\tthis._z = v1.z;\n\t\t\t\tthis._w = r;\n\n\t\t\t\treturn this.normalize();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tinverse: function () {\n\n\t\t\treturn this.conjugate().normalize();\n\n\t\t},\n\n\t\tconjugate: function () {\n\n\t\t\tthis._x *= - 1;\n\t\t\tthis._y *= - 1;\n\t\t\tthis._z *= - 1;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tvar l = this.length();\n\n\t\t\tif ( l === 0 ) {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\n\t\t\t} else {\n\n\t\t\t\tl = 1 / l;\n\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\n\t\t\t}\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( q, p ) {\n\n\t\t\tif ( p !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions( this, q );\n\n\t\t},\n\n\t\tpremultiply: function ( q ) {\n\n\t\t\treturn this.multiplyQuaternions( q, this );\n\n\t\t},\n\n\t\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tslerp: function ( qb, t ) {\n\n\t\t\tif ( t === 0 ) return this;\n\t\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\t\tthis._w = - qb._w;\n\t\t\t\tthis._x = - qb._x;\n\t\t\t\tthis._y = - qb._y;\n\t\t\t\tthis._z = - qb._z;\n\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t\t} else {\n\n\t\t\t\tthis.copy( qb );\n\n\t\t\t}\n\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n\t\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n\t\t\t\tthis._w = 0.5 * ( w + this._w );\n\t\t\t\tthis._x = 0.5 * ( x + this._x );\n\t\t\t\tthis._y = 0.5 * ( y + this._y );\n\t\t\t\tthis._z = 0.5 * ( z + this._z );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( quaternion ) {\n\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis._x = array[ offset ];\n\t\t\tthis._y = array[ offset + 1 ];\n\t\t\tthis._z = array[ offset + 2 ];\n\t\t\tthis._w = array[ offset + 3 ];\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tonChange: function ( callback ) {\n\n\t\t\tthis.onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector3( x, y, z ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\n\t}\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tisVector3: true,\n\n\t\tset: function ( x, y, z ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyEuler: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function applyEuler( euler ) {\n\n\t\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyAxisAngle: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function applyAxisAngle( axis, angle ) {\n\n\t\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * w;\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * w;\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t\t// calculate quat * vector\n\n\t\t\tvar ix =  qw * x + qy * z - qz * y;\n\t\t\tvar iy =  qw * y + qz * x - qx * z;\n\t\t\tvar iz =  qw * z + qx * y - qy * x;\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t\t// calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tproject: function () {\n\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function project( camera ) {\n\n\t\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tunproject: function () {\n\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function unproject( camera ) {\n\n\t\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min = new Vector3();\n\t\t\tvar max = new Vector3();\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t\t},\n\n\t\t// TODO lengthSquared?\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t\t},\n\n\t\tlengthManhattan: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tcross: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\t\treturn this.crossVectors( v, w );\n\n\t\t\t}\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\n\t\t\tthis.x = y * v.z - z * v.y;\n\t\t\tthis.y = z * v.x - x * v.z;\n\t\t\tthis.z = x * v.y - y * v.x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossVectors: function ( a, b ) {\n\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tprojectOnVector: function ( vector ) {\n\n\t\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\n\t\t\treturn this.copy( vector ).multiplyScalar( scalar );\n\n\t\t},\n\n\t\tprojectOnPlane: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function projectOnPlane( planeNormal ) {\n\n\t\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n\t\t\t\treturn this.sub( v1 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\treflect: function () {\n\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function reflect( normal ) {\n\n\t\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tangleTo: function ( v ) {\n\n\t\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n\t\t\t// clamp, to handle numerical problems\n\n\t\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t\t},\n\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t\t},\n\n\t\tsetFromSpherical: function ( s ) {\n\n\t\t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\n\t\t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n\t\t\tthis.y = Math.cos( s.phi ) * s.radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCylindrical: function ( c ) {\n\n\t\t\tthis.x = c.radius * Math.sin( c.theta );\n\t\t\tthis.y = c.y;\n\t\t\tthis.z = c.radius * Math.cos( c.theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixPosition: function ( m ) {\n\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 12 ];\n\t\t\tthis.y = e[ 13 ];\n\t\t\tthis.z = e[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixScale: function ( m ) {\n\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author jordi_ros / http://plattsoft.com\n\t * @author D1plo1d / http://github.com/D1plo1d\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author timknip / http://www.floorplanner.com/\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Matrix4() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\tisMatrix4: true,\n\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Matrix4().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyPosition: function ( m ) {\n\n\t\t\tvar te = this.elements, me = m.elements;\n\n\t\t\tte[ 12 ] = me[ 12 ];\n\t\t\tte[ 13 ] = me[ 13 ];\n\t\t\tte[ 14 ] = me[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\tthis.set(\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t\t0,       0,       0,       1\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractRotation: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function extractRotation( m ) {\n\n\t\t\t\tvar te = this.elements;\n\t\t\t\tvar me = m.elements;\n\n\t\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n\t\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n\t\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmakeRotationFromEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - c * f;\n\t\t\t\tte[ 8 ] = d;\n\n\t\t\t\tte[ 1 ] = af + be * d;\n\t\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\t\tte[ 9 ] = - b * c;\n\n\t\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\t\tte[ 6 ] = be + af * d;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce + df * b;\n\t\t\t\tte[ 4 ] = de * b - cf;\n\t\t\t\tte[ 8 ] = a * d;\n\n\t\t\t\tte[ 1 ] = a * f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b;\n\n\t\t\t\tte[ 2 ] = cf * b - de;\n\t\t\t\tte[ 6 ] = df + ce * b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce - df * b;\n\t\t\t\tte[ 4 ] = - a * f;\n\t\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\t\tte[ 1 ] = cf + de * b;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\t\tte[ 2 ] = - a * d;\n\t\t\t\tte[ 6 ] = b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = be * d - af;\n\t\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\t\tte[ 1 ] = c * f;\n\t\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\t\tte[ 2 ] = - d;\n\t\t\t\tte[ 6 ] = b * c;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\t\tte[ 1 ] = f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b * e;\n\n\t\t\t\tte[ 2 ] = - d * e;\n\t\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - f;\n\t\t\t\tte[ 8 ] = d * e;\n\n\t\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\t\tte[ 6 ] = b * e;\n\t\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t\t}\n\n\t\t\t// last column\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// bottom row\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = q._x, y = q._y, z = q._z, w = q._w;\n\t\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\t\tte[ 0 ] = 1 - ( yy + zz );\n\t\t\tte[ 4 ] = xy - wz;\n\t\t\tte[ 8 ] = xz + wy;\n\n\t\t\tte[ 1 ] = xy + wz;\n\t\t\tte[ 5 ] = 1 - ( xx + zz );\n\t\t\tte[ 9 ] = yz - wx;\n\n\t\t\tte[ 2 ] = xz - wy;\n\t\t\tte[ 6 ] = yz + wx;\n\t\t\tte[ 10 ] = 1 - ( xx + yy );\n\n\t\t\t// last column\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// bottom row\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function () {\n\n\t\t\tvar x = new Vector3();\n\t\t\tvar y = new Vector3();\n\t\t\tvar z = new Vector3();\n\n\t\t\treturn function lookAt( eye, target, up ) {\n\n\t\t\t\tvar te = this.elements;\n\n\t\t\t\tz.subVectors( eye, target );\n\n\t\t\t\tif ( z.lengthSq() === 0 ) {\n\n\t\t\t\t\t// eye and target are in the same position\n\n\t\t\t\t\tz.z = 1;\n\n\t\t\t\t}\n\n\t\t\t\tz.normalize();\n\t\t\t\tx.crossVectors( up, z );\n\n\t\t\t\tif ( x.lengthSq() === 0 ) {\n\n\t\t\t\t\t// up and z are parallel\n\n\t\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t\t\tz.x += 0.0001;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz.z += 0.0001;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tz.normalize();\n\t\t\t\t\tx.crossVectors( up, z );\n\n\t\t\t\t}\n\n\t\t\t\tx.normalize();\n\t\t\t\ty.crossVectors( z, x );\n\n\t\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmultiply: function ( m, n ) {\n\n\t\t\tif ( n !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyToBufferAttribute: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function applyToBufferAttribute( attribute ) {\n\n\t\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\tv1.x = attribute.getX( i );\n\t\t\t\t\tv1.y = attribute.getY( i );\n\t\t\t\t\tv1.z = attribute.getZ( i );\n\n\t\t\t\t\tv1.applyMatrix4( this );\n\n\t\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\n\n\t\t\t\t}\n\n\t\t\t\treturn attribute;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t\t//TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn (\n\t\t\t\tn41 * (\n\t\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t - n12 * n23 * n34\n\t\t\t\t) +\n\t\t\t\tn42 * (\n\t\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t - n14 * n23 * n31\n\t\t\t\t) +\n\t\t\t\tn43 * (\n\t\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t - n12 * n24 * n31\n\t\t\t\t) +\n\t\t\t\tn44 * (\n\t\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t + n12 * n23 * n31\n\t\t\t\t)\n\n\t\t\t);\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPosition: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 12 ] = v.x;\n\t\t\tte[ 13 ] = v.y;\n\t\t\tte[ 14 ] = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\tme = m.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 4 ] = t12 * detInv;\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 8 ] = t13 * detInv;\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\t\tte[ 12 ] = t14 * detInv;\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxScaleOnAxis: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t\t},\n\n\t\tmakeTranslation: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationX: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0,  0, 0,\n\t\t\t\t0, c, - s, 0,\n\t\t\t\t0, s,  c, 0,\n\t\t\t\t0, 0,  0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationY: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t c, 0, s, 0,\n\t\t\t\t 0, 1, 0, 0,\n\t\t\t\t- s, 0, c, 0,\n\t\t\t\t 0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationZ: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\tc, - s, 0, 0,\n\t\t\t\ts,  c, 0, 0,\n\t\t\t\t0,  0, 1, 0,\n\t\t\t\t0,  0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\t\tvar c = Math.cos( angle );\n\t\t\tvar s = Math.sin( angle );\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\t\tvar tx = t * x, ty = t * y;\n\n\t\t\tthis.set(\n\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\t return this;\n\n\t\t},\n\n\t\tmakeScale: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeShear: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, y, z, 0,\n\t\t\t\tx, 1, z, 0,\n\t\t\t\tx, y, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcompose: function ( position, quaternion, scale ) {\n\n\t\t\tthis.makeRotationFromQuaternion( quaternion );\n\t\t\tthis.scale( scale );\n\t\t\tthis.setPosition( position );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdecompose: function () {\n\n\t\t\tvar vector = new Vector3();\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function decompose( position, quaternion, scale ) {\n\n\t\t\t\tvar te = this.elements;\n\n\t\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t\t// if determine is negative, we need to invert one scale\n\t\t\t\tvar det = this.determinant();\n\t\t\t\tif ( det < 0 ) sx = - sx;\n\n\t\t\t\tposition.x = te[ 12 ];\n\t\t\t\tposition.y = te[ 13 ];\n\t\t\t\tposition.z = te[ 14 ];\n\n\t\t\t\t// scale the rotation part\n\t\t\t\tmatrix.copy( this );\n\n\t\t\t\tvar invSX = 1 / sx;\n\t\t\t\tvar invSY = 1 / sy;\n\t\t\t\tvar invSZ = 1 / sz;\n\n\t\t\t\tmatrix.elements[ 0 ] *= invSX;\n\t\t\t\tmatrix.elements[ 1 ] *= invSX;\n\t\t\t\tmatrix.elements[ 2 ] *= invSX;\n\n\t\t\t\tmatrix.elements[ 4 ] *= invSY;\n\t\t\t\tmatrix.elements[ 5 ] *= invSY;\n\t\t\t\tmatrix.elements[ 6 ] *= invSY;\n\n\t\t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t\t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t\t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n\t\t\t\tquaternion.setFromRotationMatrix( matrix );\n\n\t\t\t\tscale.x = sx;\n\t\t\t\tscale.y = sy;\n\t\t\t\tscale.z = sz;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tif ( far === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / ( right - left );\n\t\t\tvar y = 2 * near / ( top - bottom );\n\n\t\t\tvar a = ( right + left ) / ( right - left );\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\t\tvar c = - ( far + near ) / ( far - near );\n\t\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / ( right - left );\n\t\t\tvar h = 1.0 / ( top - bottom );\n\t\t\tvar p = 1.0 / ( far - near );\n\n\t\t\tvar x = ( right + left ) * w;\n\t\t\tvar y = ( top + bottom ) * h;\n\t\t\tvar z = ( far + near ) * p;\n\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data, width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n\tDataTexture.prototype = Object.create( Texture.prototype );\n\tDataTexture.prototype.constructor = DataTexture;\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tCubeTexture.prototype = Object.create( Texture.prototype );\n\tCubeTexture.prototype.constructor = CubeTexture;\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\t\tget: function () {\n\n\t\t\treturn this.image;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.image = value;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t *\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [renderer] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *  \tthe 'renderer' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (renderer factorizations):\n\t *\n\t * .upload( gl, seq, values, renderer )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (renderer factorizations):\n\t *\n\t * .setValue( gl, name, value )\n\t *\n\t * \t\tsets uniform with  name 'name' to 'value'\n\t *\n\t * .set( gl, obj, prop )\n\t *\n\t * \t\tsets uniform from object and property with same name than uniform\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\n\tvar emptyTexture = new Texture();\n\tvar emptyCubeTexture = new CubeTexture();\n\n\t// --- Base for inner nodes (including the root) ---\n\n\tfunction UniformContainer() {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = [];\n\n\t// Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array( 16 );\n\tvar mat3array = new Float32Array( 9 );\n\n\t// Flattening for arrays of vectors and matrices\n\n\tfunction flatten( array, nBlocks, blockSize ) {\n\n\t\tvar firstElem = array[ 0 ];\n\n\t\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t\t// unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize,\n\t\t\tr = arrayCacheF32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Float32Array( n );\n\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t}\n\n\t\tif ( nBlocks !== 0 ) {\n\n\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\t// Texture unit allocation\n\n\tfunction allocTexUnits( renderer, n ) {\n\n\t\tvar r = arrayCacheI32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Int32Array( n );\n\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\tr[ i ] = renderer.allocTextureUnit();\n\n\t\treturn r;\n\n\t}\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t// Single scalar\n\n\tfunction setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }\n\tfunction setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }\n\n\t// Single float vector (from flat array or THREE.VectorN)\n\n\tfunction setValue2fv( gl, v ) {\n\n\t\tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n\t\telse gl.uniform2f( this.addr, v.x, v.y );\n\n\t}\n\n\tfunction setValue3fv( gl, v ) {\n\n\t\tif ( v.x !== undefined )\n\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\t\telse if ( v.r !== undefined )\n\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\t\telse\n\t\t\tgl.uniform3fv( this.addr, v );\n\n\t}\n\n\tfunction setValue4fv( gl, v ) {\n\n\t\tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n\t\telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t}\n\n\t// Single matrix (from flat array or MatrixN)\n\n\tfunction setValue2fm( gl, v ) {\n\n\t\tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\n\t}\n\n\tfunction setValue3fm( gl, v ) {\n\n\t\tif ( v.elements === undefined ) {\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\t} else {\n\n\t\t\tmat3array.set( v.elements );\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\t}\n\n\t}\n\n\tfunction setValue4fm( gl, v ) {\n\n\t\tif ( v.elements === undefined ) {\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\t} else {\n\n\t\t\tmat4array.set( v.elements );\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\t}\n\n\t}\n\n\t// Single texture (2D / Cube)\n\n\tfunction setValueT1( gl, v, renderer ) {\n\n\t\tvar unit = renderer.allocTextureUnit();\n\t\tgl.uniform1i( this.addr, unit );\n\t\trenderer.setTexture2D( v || emptyTexture, unit );\n\n\t}\n\n\tfunction setValueT6( gl, v, renderer ) {\n\n\t\tvar unit = renderer.allocTextureUnit();\n\t\tgl.uniform1i( this.addr, unit );\n\t\trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\tfunction setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }\n\tfunction setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }\n\tfunction setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }\n\n\t// Helper to pick the right setter for the singular case\n\n\tfunction getSingularSetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValue1f; // FLOAT\n\t\t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t\t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t\t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t\t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t\t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n\t\t\tcase 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n\t\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t}\n\n\t}\n\n\t// Array of scalars\n\n\tfunction setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }\n\tfunction setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }\n\n\t// Array of vectors (flat or from THREE classes)\n\n\tfunction setValueV2a( gl, v ) {\n\n\t\tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\n\t}\n\n\tfunction setValueV3a( gl, v ) {\n\n\t\tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\n\t}\n\n\tfunction setValueV4a( gl, v ) {\n\n\t\tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\n\t}\n\n\t// Array of matrices (flat or from THREE clases)\n\n\tfunction setValueM2a( gl, v ) {\n\n\t\tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\n\t}\n\n\tfunction setValueM3a( gl, v ) {\n\n\t\tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\n\t}\n\n\tfunction setValueM4a( gl, v ) {\n\n\t\tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\n\t}\n\n\t// Array of textures (2D / Cube)\n\n\tfunction setValueT1a( gl, v, renderer ) {\n\n\t\tvar n = v.length,\n\t\t\tunits = allocTexUnits( renderer, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction setValueT6a( gl, v, renderer ) {\n\n\t\tvar n = v.length,\n\t\t\tunits = allocTexUnits( renderer, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\tfunction getPureArraySetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValue1fv; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n\t\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n\t\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t}\n\n\t}\n\n\t// --- Uniform Classes ---\n\n\tfunction SingleUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction StructuredUniform( id ) {\n\n\t\tthis.id = id;\n\n\t\tUniformContainer.call( this ); // mix-in\n\n\t}\n\n\tStructuredUniform.prototype.setValue = function ( gl, value ) {\n\n\t\t// Note: Don't need an extra 'renderer' parameter, since samplers\n\t\t// are not allowed in structured uniforms.\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ] );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n\t// extracts\n\t// \t- the identifier (member name or array index)\n\t//  - followed by an optional right bracket (found when array index)\n\t//  - followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform( container, uniformObject ) {\n\n\t\tcontainer.seq.push( uniformObject );\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t}\n\n\tfunction parseUniform( activeInfo, addr, container ) {\n\n\t\tvar path = activeInfo.name,\n\t\t\tpathLength = path.length;\n\n\t\t// reset RegExp object, because of the early exit of a previous run\n\t\tRePathPart.lastIndex = 0;\n\n\t\tfor ( ; ; ) {\n\n\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\t\tid = match[ 1 ],\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\tbreak;\n\n\t\t\t} else {\n\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\tvar map = container.map, next = map[ id ];\n\n\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Root Container\n\n\tfunction WebGLUniforms( gl, program, renderer ) {\n\n\t\tUniformContainer.call( this );\n\n\t\tthis.renderer = renderer;\n\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n\t\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\tpath = info.name,\n\t\t\t\taddr = gl.getUniformLocation( program, path );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function ( gl, seq, values, renderer ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, renderer );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) r.push( u );\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n\tfunction Color( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tObject.assign( Color.prototype, {\n\n\t\tisColor: true,\n\n\t\tr: 1, g: 1, b: 1,\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHex: function ( hex ) {\n\n\t\t\thex = Math.floor( hex );\n\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRGB: function ( r, g, b ) {\n\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHSL: function () {\n\n\t\t\tfunction hue2rgb( p, q, t ) {\n\n\t\t\t\tif ( t < 0 ) t += 1;\n\t\t\t\tif ( t > 1 ) t -= 1;\n\t\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t\t\t\tif ( t < 1 / 2 ) return q;\n\t\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t\t\t\treturn p;\n\n\t\t\t}\n\n\t\t\treturn function setHSL( h, s, l ) {\n\n\t\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\t\th = _Math.euclideanModulo( h, 1 );\n\t\t\t\ts = _Math.clamp( s, 0, 1 );\n\t\t\t\tl = _Math.clamp( l, 0, 1 );\n\n\t\t\t\tif ( s === 0 ) {\n\n\t\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetStyle: function ( style ) {\n\n\t\t\tfunction handleAlpha( string ) {\n\n\t\t\t\tif ( string === undefined ) return;\n\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar m;\n\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t\t// rgb / hsl\n\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[ 1 ];\n\t\t\t\tvar components = m[ 2 ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t\t// hex color\n\n\t\t\t\tvar hex = m[ 1 ];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif ( size === 3 ) {\n\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( style && style.length > 0 ) {\n\n\t\t\t\t// color keywords\n\t\t\t\tvar hex = ColorKeywords[ style ];\n\n\t\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t\t// red\n\t\t\t\t\tthis.setHex( hex );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// unknown color\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t\t},\n\n\t\tcopy: function ( color ) {\n\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertGammaToLinear: function () {\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tthis.r = r * r;\n\t\t\tthis.g = g * g;\n\t\t\tthis.b = b * b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToGamma: function () {\n\n\t\t\tthis.r = Math.sqrt( this.r );\n\t\t\tthis.g = Math.sqrt( this.g );\n\t\t\tthis.b = Math.sqrt( this.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetHex: function () {\n\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t\t},\n\n\t\tgetHexString: function () {\n\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t\t},\n\n\t\tgetHSL: function ( optionalTarget ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tvar max = Math.max( r, g, b );\n\t\t\tvar min = Math.min( r, g, b );\n\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\t\tif ( min === max ) {\n\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\n\t\t\t} else {\n\n\t\t\t\tvar delta = max - min;\n\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\t\tswitch ( max ) {\n\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\n\t\t\t}\n\n\t\t\thsl.h = hue;\n\t\t\thsl.s = saturation;\n\t\t\thsl.l = lightness;\n\n\t\t\treturn hsl;\n\n\t\t},\n\n\t\tgetStyle: function () {\n\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t\t},\n\n\t\toffsetHSL: function ( h, s, l ) {\n\n\t\t\tvar hsl = this.getHSL();\n\n\t\t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n\t\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( color ) {\n\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddColors: function ( color1, color2 ) {\n\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function( color ) {\n\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( color ) {\n\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( color, alpha ) {\n\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( c ) {\n\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.r = array[ offset ];\n\t\t\tthis.g = array[ offset + 1 ];\n\t\t\tthis.b = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.r;\n\t\t\tarray[ offset + 1 ] = this.g;\n\t\t\tarray[ offset + 2 ] = this.b;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn this.getHex();\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\n\t\tcommon: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\n\t\t\tmap: { value: null },\n\t\t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },\n\n\t\t\tspecularMap: { value: null },\n\t\t\talphaMap: { value: null },\n\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\treflectivity: { value: 1.0 },\n\t\t\trefractionRatio: { value: 0.98 }\n\n\t\t},\n\n\t\taomap: {\n\n\t\t\taoMap: { value: null },\n\t\t\taoMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\tlightmap: {\n\n\t\t\tlightMap: { value: null },\n\t\t\tlightMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\temissivemap: {\n\n\t\t\temissiveMap: { value: null }\n\n\t\t},\n\n\t\tbumpmap: {\n\n\t\t\tbumpMap: { value: null },\n\t\t\tbumpScale: { value: 1 }\n\n\t\t},\n\n\t\tnormalmap: {\n\n\t\t\tnormalMap: { value: null },\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tdisplacementmap: {\n\n\t\t\tdisplacementMap: { value: null },\n\t\t\tdisplacementScale: { value: 1 },\n\t\t\tdisplacementBias: { value: 0 }\n\n\t\t},\n\n\t\troughnessmap: {\n\n\t\t\troughnessMap: { value: null }\n\n\t\t},\n\n\t\tmetalnessmap: {\n\n\t\t\tmetalnessMap: { value: null }\n\n\t\t},\n\n\t\tgradientmap: {\n\n\t\t\tgradientMap: { value: null }\n\n\t\t},\n\n\t\tfog: {\n\n\t\t\tfogDensity: { value: 0.00025 },\n\t\t\tfogNear: { value: 1 },\n\t\t\tfogFar: { value: 2000 },\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t\t},\n\n\t\tlights: {\n\n\t\t\tambientLightColor: { value: [] },\n\n\t\t\tdirectionalLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tcolor: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tdirectionalShadowMap: { value: [] },\n\t\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\t\tspotLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdirection: {},\n\t\t\t\tdistance: {},\n\t\t\t\tconeCos: {},\n\t\t\t\tpenumbraCos: {},\n\t\t\t\tdecay: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tspotShadowMap: { value: [] },\n\t\t\tspotShadowMatrix: { value: [] },\n\n\t\t\tpointLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdecay: {},\n\t\t\t\tdistance: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tpointShadowMap: { value: [] },\n\t\t\tpointShadowMatrix: { value: [] },\n\n\t\t\themisphereLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tskyColor: {},\n\t\t\t\tgroundColor: {}\n\t\t\t} },\n\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\twidth: {},\n\t\t\t\theight: {}\n\t\t\t} }\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tsize: { value: 1.0 },\n\t\t\tscale: { value: 1.0 },\n\t\t\tmap: { value: null },\n\t\t\toffsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Uniform Utilities\n\t */\n\n\tvar UniformsUtils = {\n\n\t\tmerge: function ( uniforms ) {\n\n\t\t\tvar merged = {};\n\n\t\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n\t\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn merged;\n\n\t\t},\n\n\t\tclone: function ( uniforms_src ) {\n\n\t\t\tvar uniforms_dst = {};\n\n\t\t\tfor ( var u in uniforms_src ) {\n\n\t\t\t\tuniforms_dst[ u ] = {};\n\n\t\t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n\t\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n\t\t\t\t\tif ( parameter_src && ( parameter_src.isColor ||\n\t\t\t\t\t\tparameter_src.isMatrix3 || parameter_src.isMatrix4 ||\n\t\t\t\t\t\tparameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||\n\t\t\t\t\t\tparameter_src.isTexture ) ) {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n\t\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn uniforms_dst;\n\n\t\t}\n\n\t};\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\n\tvar beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\n\tvar bsdfs = \"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t}\\n\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat theta = acos( dot( N, V ) );\\n\\tvec2 uv = vec2(\\n\\t\\tsqrt( saturate( roughness ) ),\\n\\t\\tsaturate( theta / ( 0.5 * PI ) ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\\n\\tfloat b = 3.45068 + (4.18814 + y) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transpose( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\\n\\treturn result;\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t\\t\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t\\n\\t#endif\\n#endif\\n\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transpose( const in mat3 v ) {\\n\\tmat3 tmp;\\n\\ttmp[0] = vec3(v[0].x, v[1].x, v[2].x);\\n\\ttmp[1] = vec3(v[0].y, v[1].y, v[2].y);\\n\\ttmp[2] = vec3(v[0].z, v[1].z, v[2].z);\\n\\treturn tmp;\\n}\\n\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = normalMatrix * objectNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\n\tvar encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM            = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat D      = max( maxRange / maxRGB, 1.0 );\\n\\tD            = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract(Le);\\n\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n\\treturn vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\tsampleUV.y = asin( flipNormal * reflectVec.y ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\n\tvar envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntensity;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\n\tvar fog_vertex = \"\\n#ifdef USE_FOG\\nfogDepth = -mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n  varying float fogDepth;\\n#endif\\n\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\\n\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n\tvar lights_pars = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltcMat;\\tuniform sampler2D ltcMag;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = saturate( reflectVec.y * 0.5 + 0.5 );\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tfloat norm = texture2D( ltcMag, uv ).a;\\n\\t\\tvec4 t = texture2D( ltcMat, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3(   1,   0, t.y ),\\n\\t\\t\\tvec3(   0, t.z,   0 ),\\n\\t\\t\\tvec3( t.w,   0, t.x )\\n\\t\\t);\\n\\t\\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\n\tvar lights_template = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\n\tvar logdepthbuf_fragment = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n\tvar map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\n\tvar map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform vec4 offsetRepeat;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\\n\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\n\tvar normal_flip = \"#ifdef DOUBLE_SIDED\\n\\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\n\tvar normal_fragment = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\n\tvar project_vertex = \"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\n\tvar dithering_fragment = \"#if defined( DITHERING )\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\\n\";\n\n\tvar dithering_pars_fragment = \"#if defined( DITHERING )\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\\n\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\\n\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\\n\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\n\tvar tonemapping_pars_fragment = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\n\tvar uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\n\tvar uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n#endif\\n\";\n\n\tvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\n\tvar cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n\tvar distanceRGBA_frag = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\n\tvar distanceRGBA_vert = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <skinbase_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition;\\n}\\n\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\n\tvar equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <normal_flip>\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\n\tvar meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_flip>\\n\\t#include <normal_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\\n\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\\n\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar shadow_frag = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0 - getShadowMask() ) );\\n}\\n\";\n\n\tvar shadow_vert = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n}\\n\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars: lights_pars,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_template: lights_template,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_flip: normal_flip,\n\t\tnormal_fragment: normal_fragment,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t */\n\n\tvar ShaderLib = {\n\n\t\tbasic: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t\t},\n\n\t\tlambert: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t\t},\n\n\t\tphong: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.gradientmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t\t},\n\n\t\tstandard: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.roughnessmap,\n\t\t\t\tUniformsLib.metalnessmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\troughness: { value: 0.5 },\n\t\t\t\t\tmetalness: { value: 0.5 },\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.points,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\n\t\t},\n\n\t\tdashed: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tscale: { value: 1 },\n\t\t\t\t\tdashSize: { value: 1 },\n\t\t\t\t\ttotalSize: { value: 2 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t\t},\n\n\t\tdepth: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t\t},\n\n\t\tnormal: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tcube: {\n\n\t\t\tuniforms: {\n\t\t\t\ttCube: { value: null },\n\t\t\t\ttFlip: { value: - 1 },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tequirect: {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t\ttFlip: { value: - 1 }\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t\t},\n\n\t\tdistanceRGBA: {\n\n\t\t\tuniforms: {\n\t\t\t\tlightPos: { value: new Vector3() }\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t\t}\n\n\t};\n\n\tShaderLib.physical = {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tShaderLib.standard.uniforms,\n\t\t\t{\n\t\t\t\tclearCoat: { value: 0 },\n\t\t\t\tclearCoatRoughness: { value: 0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t};\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Box2( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box2.prototype, {\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function () {\n\n\t\t\tvar v1 = new Vector2();\n\n\t\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = + Infinity;\n\t\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t\t},\n\n\t\tgetCenter: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector2();\n\t\t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector2();\n\t\t\treturn this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t\t},\n\n\t\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tvar result = optionalTarget || new Vector2();\n\n\t\t\treturn result.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 4 splitting planes to rule out intersections\n\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tclampPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector2();\n\t\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function () {\n\n\t\t\tvar v1 = new Vector2();\n\n\t\t\treturn function distanceToPoint( point ) {\n\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction LensFlarePlugin( renderer, flares ) {\n\n\t\tvar gl = renderer.context;\n\t\tvar state = renderer.state;\n\n\t\tvar vertexBuffer, elementBuffer;\n\t\tvar shader, program, attributes, uniforms;\n\n\t\tvar tempTexture, occlusionTexture;\n\n\t\tfunction init() {\n\n\t\t\tvar vertices = new Float32Array( [\n\t\t\t\t- 1, - 1,  0, 0,\n\t\t\t\t 1, - 1,  1, 0,\n\t\t\t\t 1,  1,  1, 1,\n\t\t\t\t- 1,  1,  0, 1\n\t\t\t] );\n\n\t\t\tvar faces = new Uint16Array( [\n\t\t\t\t0, 1, 2,\n\t\t\t\t0, 2, 3\n\t\t\t] );\n\n\t\t\t// buffers\n\n\t\t\tvertexBuffer     = gl.createBuffer();\n\t\t\telementBuffer    = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\t\t// textures\n\n\t\t\ttempTexture      = gl.createTexture();\n\t\t\tocclusionTexture = gl.createTexture();\n\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\t\tshader = {\n\n\t\t\t\tvertexShader: [\n\n\t\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\t\"uniform vec3 screenPosition;\",\n\t\t\t\t\t\"uniform vec2 scale;\",\n\t\t\t\t\t\"uniform float rotation;\",\n\n\t\t\t\t\t\"uniform sampler2D occlusionMap;\",\n\n\t\t\t\t\t\"attribute vec2 position;\",\n\t\t\t\t\t\"attribute vec2 uv;\",\n\n\t\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\t\"vUV = uv;\",\n\n\t\t\t\t\t\t\"vec2 pos = position;\",\n\n\t\t\t\t\t\t\"if ( renderType == 2 ) {\",\n\n\t\t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\n\t\t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\n\t\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n\t\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n\t\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n\t\t\t\t\t\"}\"\n\n\t\t\t\t].join( \"\\n\" ),\n\n\t\t\t\tfragmentShader: [\n\n\t\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\t\"uniform sampler2D map;\",\n\t\t\t\t\t\"uniform float opacity;\",\n\t\t\t\t\t\"uniform vec3 color;\",\n\n\t\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\t// pink square\n\n\t\t\t\t\t\t\"if ( renderType == 0 ) {\",\n\n\t\t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\n\t\t\t\t\t\t// restore\n\n\t\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\n\t\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\n\t\t\t\t\t\t// flare\n\n\t\t\t\t\t\t\"} else {\",\n\n\t\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n\t\t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n\t\t\t\t\t\t\t\"gl_FragColor = texture;\",\n\t\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\n\t\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\"}\"\n\n\t\t\t\t].join( \"\\n\" )\n\n\t\t\t};\n\n\t\t\tprogram = createProgram( shader );\n\n\t\t\tattributes = {\n\t\t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n\t\t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n\t\t\t};\n\n\t\t\tuniforms = {\n\t\t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n\t\t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n\t\t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n\t\t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n\t\t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n\t\t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n\t\t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n\t\t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n\t\t\t};\n\n\t\t}\n\n\t\t/*\n\t\t * Render lens flares\n\t\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n\t\t *         reads these back and calculates occlusion.\n\t\t */\n\n\t\tthis.render = function ( scene, camera, viewport ) {\n\n\t\t\tif ( flares.length === 0 ) return;\n\n\t\t\tvar tempPosition = new Vector3();\n\n\t\t\tvar invAspect = viewport.w / viewport.z,\n\t\t\t\thalfViewportWidth = viewport.z * 0.5,\n\t\t\t\thalfViewportHeight = viewport.w * 0.5;\n\n\t\t\tvar size = 16 / viewport.w,\n\t\t\t\tscale = new Vector2( size * invAspect, size );\n\n\t\t\tvar screenPosition = new Vector3( 1, 1, 0 ),\n\t\t\t\tscreenPositionPixels = new Vector2( 1, 1 );\n\n\t\t\tvar validArea = new Box2();\n\n\t\t\tvalidArea.min.set( viewport.x, viewport.y );\n\t\t\tvalidArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tinit();\n\n\t\t\t}\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tstate.initAttributes();\n\t\t\tstate.enableAttribute( attributes.vertex );\n\t\t\tstate.enableAttribute( attributes.uv );\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t// loop through all lens flares to update their occlusion and positions\n\t\t\t// setup gl and common used attribs/uniforms\n\n\t\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n\t\t\tgl.uniform1i( uniforms.map, 1 );\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\t\tstate.disable( gl.CULL_FACE );\n\t\t\tstate.buffers.depth.setMask( false );\n\n\t\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\n\t\t\t\tsize = 16 / viewport.w;\n\t\t\t\tscale.set( size * invAspect, size );\n\n\t\t\t\t// calc object screen position\n\n\t\t\t\tvar flare = flares[ i ];\n\n\t\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\n\t\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n\t\t\t\ttempPosition.applyMatrix4( camera.projectionMatrix );\n\n\t\t\t\t// setup arrays for gl programs\n\n\t\t\t\tscreenPosition.copy( tempPosition );\n\n\t\t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n\t\t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t\t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n\t\t\t\t// screen cull\n\n\t\t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\n\t\t\t\t\t// save current RGB to temp texture\n\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t\t// render pink quad\n\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\n\t\t\t\t\tstate.disable( gl.BLEND );\n\t\t\t\t\tstate.enable( gl.DEPTH_TEST );\n\n\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t\t// copy result to occlusionMap\n\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t\t// restore graphics\n\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n\t\t\t\t\tstate.disable( gl.DEPTH_TEST );\n\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t\t// update object positions\n\n\t\t\t\t\tflare.positionScreen.copy( screenPosition );\n\n\t\t\t\t\tif ( flare.customUpdateCallback ) {\n\n\t\t\t\t\t\tflare.customUpdateCallback( flare );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tflare.updateLensFlares();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// render flares\n\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n\t\t\t\t\tstate.enable( gl.BLEND );\n\n\t\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\n\t\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\n\t\t\t\t\t\t\tscreenPosition.x = sprite.x;\n\t\t\t\t\t\t\tscreenPosition.y = sprite.y;\n\t\t\t\t\t\t\tscreenPosition.z = sprite.z;\n\n\t\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\n\t\t\t\t\t\t\tscale.x = size * invAspect;\n\t\t\t\t\t\t\tscale.y = size;\n\n\t\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\n\t\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n\t\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\n\t\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n\t\t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\n\t\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore gl\n\n\t\t\tstate.enable( gl.CULL_FACE );\n\t\t\tstate.enable( gl.DEPTH_TEST );\n\t\t\tstate.buffers.depth.setMask( true );\n\n\t\t\trenderer.resetGLState();\n\n\t\t};\n\n\t\tfunction createProgram( shader ) {\n\n\t\t\tvar program = gl.createProgram();\n\n\t\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\n\t\t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\n\t\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n\t\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n\t\t\tgl.compileShader( fragmentShader );\n\t\t\tgl.compileShader( vertexShader );\n\n\t\t\tgl.attachShader( program, fragmentShader );\n\t\t\tgl.attachShader( program, vertexShader );\n\n\t\t\tgl.linkProgram( program );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction SpritePlugin( renderer, sprites ) {\n\n\t\tvar gl = renderer.context;\n\t\tvar state = renderer.state;\n\n\t\tvar vertexBuffer, elementBuffer;\n\t\tvar program, attributes, uniforms;\n\n\t\tvar texture;\n\n\t\t// decompose matrixWorld\n\n\t\tvar spritePosition = new Vector3();\n\t\tvar spriteRotation = new Quaternion();\n\t\tvar spriteScale = new Vector3();\n\n\t\tfunction init() {\n\n\t\t\tvar vertices = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5,  0, 0,\n\t\t\t\t  0.5, - 0.5,  1, 0,\n\t\t\t\t  0.5,   0.5,  1, 1,\n\t\t\t\t- 0.5,   0.5,  0, 1\n\t\t\t] );\n\n\t\t\tvar faces = new Uint16Array( [\n\t\t\t\t0, 1, 2,\n\t\t\t\t0, 2, 3\n\t\t\t] );\n\n\t\t\tvertexBuffer  = gl.createBuffer();\n\t\t\telementBuffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\t\tprogram = createProgram();\n\n\t\t\tattributes = {\n\t\t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n\t\t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n\t\t\t};\n\n\t\t\tuniforms = {\n\t\t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n\t\t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\n\t\t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n\t\t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\n\t\t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n\t\t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n\t\t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\n\t\t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n\t\t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\n\t\t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n\t\t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n\t\t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n\t\t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n\t\t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\n\t\t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n\t\t\t};\n\n\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tcanvas.width = 8;\n\t\t\tcanvas.height = 8;\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.fillStyle = 'white';\n\t\t\tcontext.fillRect( 0, 0, 8, 8 );\n\n\t\t\ttexture = new Texture( canvas );\n\t\t\ttexture.needsUpdate = true;\n\n\t\t}\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( sprites.length === 0 ) return;\n\n\t\t\t// setup gl\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tinit();\n\n\t\t\t}\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tstate.initAttributes();\n\t\t\tstate.enableAttribute( attributes.position );\n\t\t\tstate.enableAttribute( attributes.uv );\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\tstate.disable( gl.CULL_FACE );\n\t\t\tstate.enable( gl.BLEND );\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\tgl.uniform1i( uniforms.map, 0 );\n\n\t\t\tvar oldFogType = 0;\n\t\t\tvar sceneFogType = 0;\n\t\t\tvar fog = scene.fog;\n\n\t\t\tif ( fog ) {\n\n\t\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n\t\t\t\tif ( fog.isFog ) {\n\n\t\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t\t\t\t\toldFogType = 1;\n\t\t\t\t\tsceneFogType = 1;\n\n\t\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t\t\t\t\toldFogType = 2;\n\t\t\t\t\tsceneFogType = 2;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t\t\t\toldFogType = 0;\n\t\t\t\tsceneFogType = 0;\n\n\t\t\t}\n\n\n\t\t\t// update positions and sort\n\n\t\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\t\tvar sprite = sprites[ i ];\n\n\t\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\n\t\t\t}\n\n\t\t\tsprites.sort( painterSortStable );\n\n\t\t\t// render all sprites\n\n\t\t\tvar scale = [];\n\n\t\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\t\tvar sprite = sprites[ i ];\n\t\t\t\tvar material = sprite.material;\n\n\t\t\t\tif ( material.visible === false ) continue;\n\n\t\t\t\tsprite.onBeforeRender( renderer, scene, camera, undefined, material, undefined );\n\n\t\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\n\t\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\n\t\t\t\tscale[ 0 ] = spriteScale.x;\n\t\t\t\tscale[ 1 ] = spriteScale.y;\n\n\t\t\t\tvar fogType = 0;\n\n\t\t\t\tif ( scene.fog && material.fog ) {\n\n\t\t\t\t\tfogType = sceneFogType;\n\n\t\t\t\t}\n\n\t\t\t\tif ( oldFogType !== fogType ) {\n\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t\t\t\t\toldFogType = fogType;\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.map !== null ) {\n\n\t\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n\t\t\t\t}\n\n\t\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n\t\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t\t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n\t\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\t\t\t\tstate.buffers.depth.setTest( material.depthTest );\n\t\t\t\tstate.buffers.depth.setMask( material.depthWrite );\n\n\t\t\t\tif ( material.map ) {\n\n\t\t\t\t\trenderer.setTexture2D( material.map, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setTexture2D( texture, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\t\tsprite.onAfterRender( renderer, scene, camera, undefined, material, undefined );\n\n\t\t\t}\n\n\t\t\t// restore gl\n\n\t\t\tstate.enable( gl.CULL_FACE );\n\n\t\t\trenderer.resetGLState();\n\n\t\t};\n\n\t\tfunction createProgram() {\n\n\t\t\tvar program = gl.createProgram();\n\n\t\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n\t\t\tgl.shaderSource( vertexShader, [\n\n\t\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t\t'#define SHADER_NAME ' + 'SpriteMaterial',\n\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform float rotation;',\n\t\t\t\t'uniform vec2 scale;',\n\t\t\t\t'uniform vec2 uvOffset;',\n\t\t\t\t'uniform vec2 uvScale;',\n\n\t\t\t\t'attribute vec2 position;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'varying vec2 vUV;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\n\t\t\t\t\t'vec2 alignedPosition = position * scale;',\n\n\t\t\t\t\t'vec2 rotatedPosition;',\n\t\t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t\t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n\t\t\t\t\t'vec4 finalPosition;',\n\n\t\t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t\t\t\t\t'finalPosition.xy += rotatedPosition;',\n\t\t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\n\t\t\t\t\t'gl_Position = finalPosition;',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ) );\n\n\t\t\tgl.shaderSource( fragmentShader, [\n\n\t\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t\t'#define SHADER_NAME ' + 'SpriteMaterial',\n\n\t\t\t\t'uniform vec3 color;',\n\t\t\t\t'uniform sampler2D map;',\n\t\t\t\t'uniform float opacity;',\n\n\t\t\t\t'uniform int fogType;',\n\t\t\t\t'uniform vec3 fogColor;',\n\t\t\t\t'uniform float fogDensity;',\n\t\t\t\t'uniform float fogNear;',\n\t\t\t\t'uniform float fogFar;',\n\t\t\t\t'uniform float alphaTest;',\n\n\t\t\t\t'varying vec2 vUV;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\n\t\t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\n\t\t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n\t\t\t\t\t'if ( fogType > 0 ) {',\n\n\t\t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n\t\t\t\t\t\t'float fogFactor = 0.0;',\n\n\t\t\t\t\t\t'if ( fogType == 1 ) {',\n\n\t\t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\n\t\t\t\t\t\t'} else {',\n\n\t\t\t\t\t\t\t'const float LOG2 = 1.442695;',\n\t\t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n\t\t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n\t\t\t\t\t\t'}',\n\n\t\t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\n\t\t\t\t\t'}',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ) );\n\n\t\t\tgl.compileShader( vertexShader );\n\t\t\tgl.compileShader( fragmentShader );\n\n\t\t\tgl.attachShader( program, vertexShader );\n\t\t\tgl.attachShader( program, fragmentShader );\n\n\t\t\tgl.linkProgram( program );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\tfunction painterSortStable( a, b ) {\n\n\t\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t\t} else if ( a.z !== b.z ) {\n\n\t\t\t\treturn b.z - a.z;\n\n\t\t\t} else {\n\n\t\t\t\treturn b.id - a.id;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\t\tthis.lights = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n\t\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n\t\tthis.visible = true;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tObject.assign( Material.prototype, EventDispatcher.prototype, {\n\n\t\tisMaterial: true,\n\n\t\tonBeforeCompile: function () {},\n\n\t\tsetValues: function ( values ) {\n\n\t\t\tif ( values === undefined ) return;\n\n\t\t\tfor ( var key in values ) {\n\n\t\t\t\tvar newValue = values[ key ];\n\n\t\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[ key ];\n\n\t\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t\t} else if ( key === 'overdraw' ) {\n\n\t\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t\t\t\t\tthis[ key ] = Number( newValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRoot = meta === undefined;\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Material serialization\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\t\tif ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;\n\t\t\tif ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;\n\n\t\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t\t}\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t\t}\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t\t}\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t\t}\n\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\t\tif ( this.shading !== SmoothShading ) data.shading = this.shading;\n\t\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\n\t\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\n\t\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\t\tdata.skinning = this.skinning;\n\t\t\tdata.morphTargets = this.morphTargets;\n\n\t\t\tdata.dithering = this.dithering;\n\n\t\t\t// TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.lights = source.lights;\n\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.shading = source.shading;\n\t\t\tthis.vertexColors = source.vertexColors;\n\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\n\t\t\tthis.colorWrite = source.colorWrite;\n\n\t\t\tthis.precision = source.precision;\n\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\t\tthis.dithering = source.dithering;\n\n\t\t\tthis.alphaTest = source.alphaTest;\n\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\t\tthis.overdraw = source.overdraw;\n\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\n\t\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\t\tdstPlanes = null;\n\n\t\t\tif ( srcPlanes !== null ) {\n\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array( n );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  defines: { \"label\" : \"value\" },\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *  fragmentShader: <string>,\n\t *  vertexShader: <string>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  lights: <bool>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\t\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\tthis.morphTargets = false; // set to use morph targets\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype = Object.create( Material.prototype );\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = UniformsUtils.clone( source.uniforms );\n\n\t\tthis.defines = source.defines;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.skinning = source.skinning;\n\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.extensions = source.extensions;\n\n\t\treturn this;\n\n\t};\n\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\t\tdata.uniforms = this.uniforms;\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / https://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box3.prototype, {\n\n\t\tisBox3: true,\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromArray: function ( array ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar x = array[ i ];\n\t\t\t\tvar y = array[ i + 1 ];\n\t\t\t\tvar z = array[ i + 2 ];\n\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\t\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tvar x = attribute.getX( i );\n\t\t\t\tvar y = attribute.getY( i );\n\t\t\t\tvar z = attribute.getZ( i );\n\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\t\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\treturn this.expandByObject( object );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t\t},\n\n\t\tgetCenter: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByObject: function () {\n\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function expandByObject( object ) {\n\n\t\t\t\tvar scope = this;\n\n\t\t\t\tobject.updateMatrixWorld( true );\n\n\t\t\t\tobject.traverse( function ( node ) {\n\n\t\t\t\t\tvar i, l;\n\n\t\t\t\t\tvar geometry = node.geometry;\n\n\t\t\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n\t\t\t\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\t\t\t\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\t\tv1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t\t},\n\n\t\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\treturn result.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tintersectsSphere: ( function () {\n\n\t\t\tvar closestPoint = new Vector3();\n\n\t\t\treturn function intersectsSphere( sphere ) {\n\n\t\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n\t\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\t\tvar min, max;\n\n\t\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t\t} else {\n\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t\t}\n\n\t\t\treturn ( min <= plane.constant && max >= plane.constant );\n\n\t\t},\n\n\t\tclampPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function distanceToPoint( point ) {\n\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetBoundingSphere: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function getBoundingSphere( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Sphere();\n\n\t\t\t\tthis.getCenter( result.center );\n\n\t\t\t\tresult.radius = this.getSize( v1 ).length() * 0.5;\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\t\tif( this.isEmpty() ) this.makeEmpty();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function () {\n\n\t\t\tvar points = [\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3()\n\t\t\t];\n\n\t\t\treturn function applyMatrix4( matrix ) {\n\n\t\t\t\t// transform of empty box is an empty box.\n\t\t\t\tif( this.isEmpty() ) return this;\n\n\t\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\n\t\t\t\tthis.setFromPoints( points );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Sphere( center, radius ) {\n\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n\t}\n\n\tObject.assign( Sphere.prototype, {\n\n\t\tset: function ( center, radius ) {\n\n\t\t\tthis.center.copy( center );\n\t\t\tthis.radius = radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function () {\n\n\t\t\tvar box = new Box3();\n\n\t\t\treturn function setFromPoints( points, optionalCenter ) {\n\n\t\t\t\tvar center = this.center;\n\n\t\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\n\t\t\t\t}\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( sphere ) {\n\n\t\t\tthis.center.copy( sphere.center );\n\t\t\tthis.radius = sphere.radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tempty: function () {\n\n\t\t\treturn ( this.radius <= 0 );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsSphere( this );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We use the following equation to compute the signed distance from\n\t\t\t// the center of the sphere to the plane.\n\t\t\t//\n\t\t\t// distance = q * n - d\n\t\t\t//\n\t\t\t// If this distance is greater than the radius of the sphere,\n\t\t\t// then there is no intersection.\n\n\t\t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\n\t\t},\n\n\t\tclampPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\tresult.copy( point );\n\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t\tresult.sub( this.center ).normalize();\n\t\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\tgetBoundingBox: function ( optionalTarget ) {\n\n\t\t\tvar box = optionalTarget || new Box3();\n\n\t\t\tbox.set( this.center, this.center );\n\t\t\tbox.expandByScalar( this.radius );\n\n\t\t\treturn box;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.center.applyMatrix4( matrix );\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.center.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sphere ) {\n\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t * @author tschw\n\t */\n\n\tfunction Matrix3() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tisMatrix3: true,\n\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix4: function ( m ) {\n\n\t\t\tvar me = m.elements;\n\n\t\t\tthis.set(\n\n\t\t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n\t\t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyToBufferAttribute: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function applyToBufferAttribute( attribute ) {\n\n\t\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\tv1.x = attribute.getX( i );\n\t\t\t\t\tv1.y = attribute.getY( i );\n\t\t\t\t\tv1.z = attribute.getZ( i );\n\n\t\t\t\t\tv1.applyMatrix3( this );\n\n\t\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\n\n\t\t\t\t}\n\n\t\t\t\treturn attribute;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t\t},\n\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\t\tif ( matrix && matrix.isMatrix4 ) {\n\n\t\t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\n\t\t\t}\n\n\t\t\tvar me = matrix.elements,\n\t\t\t\tte = this.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\t\tte[ 3 ] = t12 * detInv;\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\t\tte[ 6 ] = t13 * detInv;\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar tmp, m = this.elements;\n\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t\t},\n\n\t\ttransposeIntoArray: function ( r ) {\n\n\t\t\tvar m = this.elements;\n\n\t\t\tr[ 0 ] = m[ 0 ];\n\t\t\tr[ 1 ] = m[ 3 ];\n\t\t\tr[ 2 ] = m[ 6 ];\n\t\t\tr[ 3 ] = m[ 1 ];\n\t\t\tr[ 4 ] = m[ 4 ];\n\t\t\tr[ 5 ] = m[ 7 ];\n\t\t\tr[ 6 ] = m[ 2 ];\n\t\t\tr[ 7 ] = m[ 5 ];\n\t\t\tr[ 8 ] = m[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Plane( normal, constant ) {\n\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n\t}\n\n\tObject.assign( Plane.prototype, {\n\n\t\tset: function ( normal, constant ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponents: function ( x, y, z, w ) {\n\n\t\t\tthis.normal.set( x, y, z );\n\t\t\tthis.constant = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCoplanarPoints: function () {\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n\t\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n\t\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( plane ) {\n\n\t\t\tthis.normal.copy( plane.normal );\n\t\t\tthis.constant = plane.constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\t\tthis.constant *= inverseNormalLength;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.constant *= - 1;\n\t\t\tthis.normal.negate();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn this.normal.dot( point ) + this.constant;\n\n\t\t},\n\n\t\tdistanceToSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t\t},\n\n\t\tprojectPoint: function ( point, optionalTarget ) {\n\n\t\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\n\t\t},\n\n\t\torthoPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\n\t\t},\n\n\t\tintersectLine: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function intersectLine( line, optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\tvar direction = line.delta( v1 );\n\n\t\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t\t// line is coplanar, return origin\n\t\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\t\treturn result.copy( line.start );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\t\treturn undefined;\n\n\t\t\t\t}\n\n\t\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\t\treturn undefined;\n\n\t\t\t\t}\n\n\t\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsLine: function ( line ) {\n\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\t\tvar startSign = this.distanceToPoint( line.start );\n\t\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsPlane( this );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn sphere.intersectsPlane( this );\n\n\t\t},\n\n\t\tcoplanarPoint: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t\t},\n\n\t\tapplyMatrix4: function () {\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar m1 = new Matrix3();\n\n\t\t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n\t\t\t\t// transform normal based on theory here:\n\t\t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n\t\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\t\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n\t\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.constant = this.constant - offset.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( plane ) {\n\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tthis.planes = [\n\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t\t];\n\n\t}\n\n\tObject.assign( Frustum.prototype, {\n\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tplanes[ 0 ].copy( p0 );\n\t\t\tplanes[ 1 ].copy( p1 );\n\t\t\tplanes[ 2 ].copy( p2 );\n\t\t\tplanes[ 3 ].copy( p3 );\n\t\t\tplanes[ 4 ].copy( p4 );\n\t\t\tplanes[ 5 ].copy( p5 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( frustum ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix: function ( m ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tintersectsObject: function () {\n\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function intersectsObject( object ) {\n\n\t\t\t\tvar geometry = object.geometry;\n\n\t\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere )\n\t\t\t\t\t.applyMatrix4( object.matrixWorld );\n\n\t\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSprite: function () {\n\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function intersectsSprite( sprite ) {\n\n\t\t\t\tsphere.center.set( 0, 0, 0 );\n\t\t\t\tsphere.radius = 0.7071067811865476;\n\t\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = - sphere.radius;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectsBox: function () {\n\n\t\t\tvar p1 = new Vector3(),\n\t\t\t\tp2 = new Vector3();\n\n\t\t\treturn function intersectsBox( box ) {\n\n\t\t\t\tvar planes = this.planes;\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n\t\t\t\t\t// if both outside plane, no intersection\n\n\t\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {\n\n\t\tvar _gl = _renderer.context,\n\t\t\t_state = _renderer.state,\n\t\t\t_frustum = new Frustum(),\n\t\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t\t_lightShadows = _lights.shadows,\n\n\t\t\t_shadowMapSize = new Vector2(),\n\t\t\t_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),\n\n\t\t\t_lookTarget = new Vector3(),\n\t\t\t_lightPositionWorld = new Vector3(),\n\n\t\t\t_MorphingFlag = 1,\n\t\t\t_SkinningFlag = 2,\n\n\t\t\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n\t\t\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t\t\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n\t\t\t_materialCache = {};\n\n\t\tvar cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tvar cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t\tvar cube2DViewPorts = [\n\t\t\tnew Vector4(), new Vector4(), new Vector4(),\n\t\t\tnew Vector4(), new Vector4(), new Vector4()\n\t\t];\n\n\t\t// init\n\n\t\tvar depthMaterialTemplate = new MeshDepthMaterial();\n\t\tdepthMaterialTemplate.depthPacking = RGBADepthPacking;\n\t\tdepthMaterialTemplate.clipping = true;\n\n\t\tvar distanceShader = ShaderLib[ \"distanceRGBA\" ];\n\t\tvar distanceUniforms = UniformsUtils.clone( distanceShader.uniforms );\n\n\t\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n\t\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n\t\t\tvar depthMaterial = depthMaterialTemplate.clone();\n\t\t\tdepthMaterial.morphTargets = useMorphing;\n\t\t\tdepthMaterial.skinning = useSkinning;\n\n\t\t\t_depthMaterials[ i ] = depthMaterial;\n\n\t\t\tvar distanceMaterial = new ShaderMaterial( {\n\t\t\t\tdefines: {\n\t\t\t\t\t'USE_SHADOWMAP': ''\n\t\t\t\t},\n\t\t\t\tuniforms: distanceUniforms,\n\t\t\t\tvertexShader: distanceShader.vertexShader,\n\t\t\t\tfragmentShader: distanceShader.fragmentShader,\n\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\tskinning: useSkinning,\n\t\t\t\tclipping: true\n\t\t\t} );\n\n\t\t\t_distanceMaterials[ i ] = distanceMaterial;\n\n\t\t}\n\n\t\t//\n\n\t\tvar scope = this;\n\n\t\tthis.enabled = false;\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.renderReverseSided = true;\n\t\tthis.renderSingleSided = true;\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\t\tif ( _lightShadows.length === 0 ) return;\n\n\t\t\t// Set GL state for depth map.\n\t\t\t_state.disable( _gl.BLEND );\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t\t_state.buffers.depth.setTest( true );\n\t\t\t_state.setScissorTest( false );\n\n\t\t\t// render depth map\n\n\t\t\tvar faceCount;\n\n\t\t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = _lightShadows[ i ];\n\t\t\t\tvar shadow = light.shadow;\n\t\t\t\tvar isPointLight = light && light.isPointLight;\n\n\t\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar shadowCamera = shadow.camera;\n\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\t\t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\n\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t\t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n\t\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t\t\t// following orientation:\n\t\t\t\t\t//\n\t\t\t\t\t//  xzXZ\n\t\t\t\t\t//   y Y\n\t\t\t\t\t//\n\t\t\t\t\t// X - Positive x direction\n\t\t\t\t\t// x - Negative x direction\n\t\t\t\t\t// Y - Positive y direction\n\t\t\t\t\t// y - Negative y direction\n\t\t\t\t\t// Z - Positive z direction\n\t\t\t\t\t// z - Negative z direction\n\n\t\t\t\t\t// positive X\n\t\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// negative X\n\t\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// positive Z\n\t\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// negative Z\n\t\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// positive Y\n\t\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t\t\t\t\t// negative Y\n\t\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n\t\t\t\t\t_shadowMapSize.x *= 4.0;\n\t\t\t\t\t_shadowMapSize.y *= 2.0;\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadowCamera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.isSpotLightShadow ) {\n\n\t\t\t\t\tshadow.update( light );\n\n\t\t\t\t}\n\n\t\t\t\tvar shadowMap = shadow.map;\n\t\t\t\tvar shadowMatrix = shadow.matrix;\n\n\t\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\tfaceCount = 6;\n\n\t\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t\t\t\t\t// equal to inverse of the light's position\n\n\t\t\t\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfaceCount = 1;\n\n\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\t\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t\t\t// compute shadow matrix\n\n\t\t\t\t\tshadowMatrix.set(\n\t\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t\t\t);\n\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget( shadowMap );\n\t\t\t\t_renderer.clear();\n\n\t\t\t\t// render shadow map for each cube face (if omni-directional) or\n\t\t\t\t// run a single pass if not\n\n\t\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n\t\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\t\t\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t\t\t\t\t\t_state.viewport( vpDimensions );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// update camera matrices and frustum\n\n\t\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t\t\t// set object matrices & frustum culling\n\n\t\t\t\t\trenderObject( scene, camera, shadowCamera, isPointLight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Restore GL state.\n\t\t\tvar clearColor = _renderer.getClearColor();\n\t\t\tvar clearAlpha = _renderer.getClearAlpha();\n\t\t\t_renderer.setClearColor( clearColor, clearAlpha );\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t};\n\n\t\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tvar result = null;\n\n\t\t\tvar materialVariants = _depthMaterials;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif ( isPointLight ) {\n\n\t\t\t\tmaterialVariants = _distanceMaterials;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t\t}\n\n\t\t\tif ( ! customMaterial ) {\n\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\t\tif ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t\t} else if ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( object.isSkinnedMesh && material.skinning === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\n\t\t\t\tvar variantIndex = 0;\n\n\t\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n\t\t\t\tresult = materialVariants[ variantIndex ];\n\n\t\t\t} else {\n\n\t\t\t\tresult = customMaterial;\n\n\t\t\t}\n\n\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tvar side = material.side;\n\n\t\t\tif ( scope.renderSingleSided && side == DoubleSide ) {\n\n\t\t\t\tside = FrontSide;\n\n\t\t\t}\n\n\t\t\tif ( scope.renderReverseSided ) {\n\n\t\t\t\tif ( side === FrontSide ) side = BackSide;\n\t\t\t\telse if ( side === BackSide ) side = FrontSide;\n\n\t\t\t}\n\n\t\t\tresult.side = side;\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\n\t\t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction renderObject( object, camera, shadowCamera, isPointLight ) {\n\n\t\t\tif ( object.visible === false ) return;\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\t\tif ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, isPointLight );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAttributes( gl ) {\n\n\t\tvar buffers = {};\n\n\t\tfunction createBuffer( attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n\t\t\tvar buffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\t\t\tgl.bufferData( bufferType, array, usage );\n\n\t\t\tattribute.onUploadCallback();\n\n\t\t\tvar type = gl.FLOAT;\n\n\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\ttype = gl.FLOAT;\n\n\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\n\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\ttype = gl.SHORT;\n\n\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\ttype = gl.UNSIGNED_INT;\n\n\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\ttype = gl.INT;\n\n\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\ttype = gl.BYTE;\n\n\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\n\t\t}\n\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\t\tif ( attribute.dynamic === false ) {\n\n\t\t\t\tgl.bufferData( bufferType, array, gl.STATIC_DRAW );\n\n\t\t\t} else if ( updateRange.count === - 1 ) {\n\n\t\t\t\t// Not using update ranges\n\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t\t} else if ( updateRange.count === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n\t\t\t} else {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t\tupdateRange.count = -1; // reset range\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction get( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\t\treturn buffers[ attribute.uuid ];\n\n\t\t}\n\n\t\tfunction remove( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\t\t\t\n\t\t\tvar data = buffers[ attribute.uuid ];\n\n\t\t\tif ( data ) {\n\n\t\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\t\tdelete buffers[ attribute.uuid ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction update( attribute, bufferType ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\t\tvar data = buffers[ attribute.uuid ];\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tbuffers[ attribute.uuid ] = createBuffer( attribute, bufferType );\n\n\t\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\t\tdata.version = attribute.version;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Euler( x, y, z, order ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._order = order || Euler.DefaultOrder;\n\n\t}\n\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n\tEuler.DefaultOrder = 'XYZ';\n\n\tObject.defineProperties( Euler.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\torder: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._order;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._order = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Euler.prototype, {\n\n\t\tisEuler: true,\n\n\t\tset: function ( x, y, z, order ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t\t},\n\n\t\tcopy: function ( euler ) {\n\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\t\tvar clamp = _Math.clamp;\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\torder = order || this._order;\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t\t}\n\n\t\t\tthis._order = order;\n\n\t\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromQuaternion: function () {\n\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function setFromQuaternion( q, order, update ) {\n\n\t\t\t\tmatrix.makeRotationFromQuaternion( q );\n\n\t\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetFromVector3: function ( v, order ) {\n\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t\t},\n\n\t\treorder: function () {\n\n\t\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t\tvar q = new Quaternion();\n\n\t\t\treturn function reorder( newOrder ) {\n\n\t\t\t\tq.setFromEuler( this );\n\n\t\t\t\treturn this.setFromQuaternion( q, newOrder );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tequals: function ( euler ) {\n\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t\t},\n\n\t\tfromArray: function ( array ) {\n\n\t\t\tthis._x = array[ 0 ];\n\t\t\tthis._y = array[ 1 ];\n\t\t\tthis._z = array[ 2 ];\n\t\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._order;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoVector3: function ( optionalResult ) {\n\n\t\t\tif ( optionalResult ) {\n\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t\t} else {\n\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t\t}\n\n\t\t},\n\n\t\tonChange: function ( callback ) {\n\n\t\t\tthis.onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Layers() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tObject.assign( Layers.prototype, {\n\n\t\tset: function ( channel ) {\n\n\t\t\tthis.mask = 1 << channel | 0;\n\n\t\t},\n\n\t\tenable: function ( channel ) {\n\n\t\t\tthis.mask |= 1 << channel | 0;\n\n\t\t},\n\n\t\ttoggle: function ( channel ) {\n\n\t\t\tthis.mask ^= 1 << channel | 0;\n\n\t\t},\n\n\t\tdisable: function ( channel ) {\n\n\t\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t\t},\n\n\t\ttest: function ( layers ) {\n\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author elephantatwork / www.elephantatwork.ch\n\t */\n\n\tvar object3DId = 0;\n\n\tfunction Object3D() {\n\n\t\tObject.defineProperty( this, 'id', { value: object3DId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation.onChange( onRotationChange );\n\t\tquaternion.onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.userData = {};\n\t}\n\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\n\tObject.assign( Object3D.prototype, EventDispatcher.prototype, {\n\n\t\tisObject3D: true,\n\n\t\tonBeforeRender: function () {},\n\t\tonAfterRender: function () {},\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tthis.quaternion.premultiply( q );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t\t},\n\n\t\tsetRotationFromEuler: function ( euler ) {\n\n\t\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t\t},\n\n\t\tsetRotationFromMatrix: function ( m ) {\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t\t},\n\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\t// assumes q is normalized\n\n\t\t\tthis.quaternion.copy( q );\n\n\t\t},\n\n\t\trotateOnAxis: function () {\n\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\tvar q1 = new Quaternion();\n\n\t\t\treturn function rotateOnAxis( axis, angle ) {\n\n\t\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\t\tthis.quaternion.multiply( q1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateX: function () {\n\n\t\t\tvar v1 = new Vector3( 1, 0, 0 );\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 1, 0 );\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 0, 1 );\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateOnAxis: function () {\n\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function translateOnAxis( axis, distance ) {\n\n\t\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateX: function () {\n\n\t\t\tvar v1 = new Vector3( 1, 0, 0 );\n\n\t\t\treturn function translateX( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateY: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 1, 0 );\n\n\t\t\treturn function translateY( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateZ: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 0, 1 );\n\n\t\t\treturn function translateZ( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlocalToWorld: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t\t},\n\n\t\tworldToLocal: function () {\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function worldToLocal( vector ) {\n\n\t\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\t// This method does not support objects with rotated and/or translated parent(s)\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function lookAt( vector ) {\n\n\t\t\t\tif ( this.isCamera ) {\n\n\t\t\t\t\tm1.lookAt( this.position, vector, this.up );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tm1.lookAt( vector, this.position, this.up );\n\n\t\t\t\t}\n\n\t\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tadd: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( object === this ) {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\t\tobject.parent.remove( object );\n\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tobject.dispatchEvent( { type: 'added' } );\n\n\t\t\t\tthis.children.push( object );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tremove: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf( object );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tobject.parent = null;\n\n\t\t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n\t\t\t\tthis.children.splice( index, 1 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\t\t\t\n\t\t},\n\n\t\tgetObjectById: function ( id ) {\n\n\t\t\treturn this.getObjectByProperty( 'id', id );\n\n\t\t},\n\n\t\tgetObjectByName: function ( name ) {\n\n\t\t\treturn this.getObjectByProperty( 'name', name );\n\n\t\t},\n\n\t\tgetObjectByProperty: function ( name, value ) {\n\n\t\t\tif ( this[ name ] === value ) return this;\n\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\t\tif ( object !== undefined ) {\n\n\t\t\t\t\treturn object;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tgetWorldPosition: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\n\t\t},\n\n\t\tgetWorldQuaternion: function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar scale = new Vector3();\n\n\t\t\treturn function getWorldQuaternion( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Quaternion();\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.matrixWorld.decompose( position, result, scale );\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldRotation: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function getWorldRotation( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Euler();\n\n\t\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldScale: function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function getWorldScale( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldDirection: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function getWorldDirection( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\traycast: function () {},\n\n\t\ttraverse: function ( callback ) {\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverse( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseVisible: function ( callback ) {\n\n\t\t\tif ( this.visible === false ) return;\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseAncestors: function ( callback ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tcallback( parent );\n\n\t\t\t\tparent.traverseAncestors( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\t\tforce = true;\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\t// meta is '' when called from JSON.stringify\n\t\t\tvar isRootObject = ( meta === undefined || meta === '' );\n\n\t\t\tvar output = {};\n\n\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// standard Object3D serialization\n\n\t\t\tvar object = {};\n\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\n\t\t\tif ( this.name !== '' ) object.name = this.name;\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\t\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\t\tif ( this.visible === false ) object.visible = false;\n\n\t\t\tobject.matrix = this.matrix.toArray();\n\n\t\t\t//\n\n\t\t\tfunction serialize( library, element ) {\n\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.geometry !== undefined ) {\n\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\t}\n\n\t\t\tif ( this.material !== undefined ) {\n\n\t\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.children.length > 0 ) {\n\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\t\tif ( images.length > 0 ) output.images = images;\n\n\t\t\t}\n\n\t\t\toutput.object = object;\n\n\t\t\treturn output;\n\n\t\t\t// extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function ( recursive ) {\n\n\t\t\treturn new this.constructor().copy( this, recursive );\n\n\t\t},\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tif ( recursive === undefined ) recursive = true;\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.up.copy( source.up );\n\n\t\t\tthis.position.copy( source.position );\n\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\tthis.scale.copy( source.scale );\n\n\t\t\tthis.matrix.copy( source.matrix );\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tif ( recursive === true ) {\n\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\tthis.add( child.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction Camera() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\t\tthis.projectionMatrix = new Matrix4();\n\n\t}\n\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Camera,\n\n\t\tisCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetWorldDirection: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function getWorldDirection( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author arose / http://github.com/arose\n\t */\n\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: OrthographicCamera,\n\n\t\tisOrthographicCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.view = {\n\t\t\t\tfullWidth: fullWidth,\n\t\t\t\tfullHeight: fullHeight,\n\t\t\t\toffsetX: x,\n\t\t\t\toffsetY: y,\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function() {\n\n\t\t\tthis.view = null;\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n\t\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\n\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author greggman / http://games.greggman.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author tschw\n\t */\n\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: PerspectiveCamera,\n\n\t\tisPerspectiveCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function ( focalLength ) {\n\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\t\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\n\t\t\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\n\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t\t},\n\n\t\tgetEffectiveFOV: function () {\n\n\t\t\treturn _Math.RAD2DEG * 2 * Math.atan(\n\t\t\t\t\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t\t},\n\n\t\tgetFilmWidth: function () {\n\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t\t},\n\n\t\tgetFilmHeight: function () {\n\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *   +---+---+---+\n\t\t *   | A | B | C |\n\t\t *   +---+---+---+\n\t\t *   | D | E | F |\n\t\t *   +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *   var w = 1920;\n\t\t *   var h = 1080;\n\t\t *   var fullWidth = w * 3;\n\t\t *   var fullHeight = h * 2;\n\t\t *\n\t\t *   --A--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *   --B--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *   --C--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *   --D--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *   --E--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *   --F--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tthis.view = {\n\t\t\t\tfullWidth: fullWidth,\n\t\t\t\tfullHeight: fullHeight,\n\t\t\t\toffsetX: x,\n\t\t\t\toffsetY: y,\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tthis.view = null;\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar near = this.near,\n\t\t\t\ttop = near * Math.tan(\n\t\t\t\t\t\t_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\t\theight = 2 * top,\n\t\t\t\twidth = this.aspect * height,\n\t\t\t\tleft = - 0.5 * width,\n\t\t\t\tview = this.view;\n\n\t\t\tif ( view !== null ) {\n\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\n\t\t\tdata.object.aspect = this.aspect;\n\n\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n\t}\n\n\tObject.assign( Face3.prototype, {\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\n\t\t\tthis.normal.copy( source.normal );\n\t\t\tthis.color.copy( source.color );\n\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar count = 0;\n\tfunction GeometryIdCount() { return count++; }\n\n\tfunction Geometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\tthis.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( Geometry.prototype, EventDispatcher.prototype, {\n\n\t\tisGeometry: true,\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function () {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\tm1.makeRotationX( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\tm1.makeRotationY( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\tm1.makeRotationZ( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function () {\n\n\t\t\t// translate geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function translate( x, y, z ) {\n\n\t\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tscale: function () {\n\n\t\t\t// scale geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function scale( x, y, z ) {\n\n\t\t\t\tm1.makeScale( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\tvar obj = new Object3D();\n\n\t\t\treturn function lookAt( vector ) {\n\n\t\t\t\tobj.lookAt( vector );\n\n\t\t\t\tobj.updateMatrix();\n\n\t\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tfromBufferGeometry: function ( geometry ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n\t\t\tvar tempNormals = [];\n\t\t\tvar tempUVs = [];\n\t\t\tvar tempUVs2 = [];\n\n\t\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n\t\t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n\t\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\t\tscope.faces.push( face );\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tvar offset = this.boundingBox.getCenter().negate();\n\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\t\treturn offset;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\t\tvar matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\tthis.applyMatrix( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tface.normal.copy( cb );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n\t\t\tvar v, vl, f, fl, face, vertices;\n\n\t\t\tvertices = new Array( this.vertices.length );\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ] = new Vector3();\n\n\t\t\t}\n\n\t\t\tif ( areaWeighted ) {\n\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.computeFaceNormals();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ].normalize();\n\n\t\t\t}\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFlatVertexNormals: function () {\n\n\t\t\tvar f, fl, face;\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeMorphNormals: function () {\n\n\t\t\tvar i, il, f, fl, face;\n\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\t\tvar tmpGeo = new Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\t// create on first access\n\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tfaceNormal = new Vector3();\n\t\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t\t// set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t\t// compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t\t// store morph normals\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore original normals\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar d = 0;\n\t\t\tvar vertices = this.vertices;\n\n\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tif ( i > 0 ) {\n\n\t\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.lineDistances[ i ] = d;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar normalMatrix,\n\t\t\t\tvertexOffset = this.vertices.length,\n\t\t\t\tvertices1 = this.vertices,\n\t\t\t\tvertices2 = geometry.vertices,\n\t\t\t\tfaces1 = this.faces,\n\t\t\t\tfaces2 = geometry.faces,\n\t\t\t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t\t\t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n\t\t\t\tcolors1 = this.colors,\n\t\t\t\tcolors2 = geometry.colors;\n\n\t\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n\t\t\tif ( matrix !== undefined ) {\n\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t}\n\n\t\t\t// vertices\n\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n\t\t\t\tvertices1.push( vertexCopy );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n\t\t\t\tcolors1.push( colors2[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\t\tfaces1.push( faceCopy );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n\t\t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n\t\t\t\tif ( uv === undefined ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n\t\t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tuvs1.push( uvCopy );\n\n\t\t\t}\n\n\t\t},\n\n\t\tmergeMesh: function ( mesh ) {\n\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\n\t\tmergeVertices: function () {\n\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\tvar unique = [], changes = [];\n\n\t\t\tvar v, key;\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\t\tvar i, il, face;\n\t\t\tvar indices, j, jl;\n\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tv = this.vertices[ i ];\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tface = this.faces[ i ];\n\n\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\tface.c = changes[ face.c ];\n\n\t\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Use unique set of vertices\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\n\t\t},\n\n\t\tsortFacesByMaterialIndex: function () {\n\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length;\n\n\t\t\t// tag faces\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tfaces[ i ]._id = i;\n\n\t\t\t}\n\n\t\t\t// sort faces\n\n\t\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t\t}\n\n\t\t\tfaces.sort( materialIndexSort );\n\n\t\t\t// sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\t\tvar newUvs1, newUvs2;\n\n\t\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar id = faces[ i ]._id;\n\n\t\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n\t\t\t}\n\n\t\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\t\tvar faceType = 0;\n\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\t\tfaces.push( faceType );\n\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\tfaces.push( face.materialIndex );\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t\t}\n\n\t\t\tfunction getNormalIndex( normal ) {\n\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getColorIndex( color ) {\n\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\tcolors.push( color.getHex() );\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getUvIndex( uv ) {\n\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tdata.data = {};\n\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\t\tdata.data.faces = faces;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new Geometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar i, il, j, jl, k, kl;\n\n\t\t\t// reset\n\n\t\t\tthis.vertices = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [[]];\n\t\t\tthis.morphTargets = [];\n\t\t\tthis.morphNormals = [];\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\t\tthis.lineDistances = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// vertices\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tvar colors = source.colors;\n\n\t\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.colors.push( colors[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// face vertex uvs\n\n\t\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargets = source.morphTargets;\n\n\t\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = {};\n\t\t\t\tmorphTarget.name = morphTargets[ i ].name;\n\n\t\t\t\t// vertices\n\n\t\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\n\n\t\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// normals\n\n\t\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\n\n\t\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t\t// morph normals\n\n\t\t\tvar morphNormals = source.morphNormals;\n\n\t\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphNormal = {};\n\n\t\t\t\t// vertex normals\n\n\t\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\n\t\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// face normals\n\n\t\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t\t}\n\n\t\t\t// skin weights\n\n\t\t\tvar skinWeights = source.skinWeights;\n\n\t\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// skin indices\n\n\t\t\tvar skinIndices = source.skinIndices;\n\n\t\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// line distances\n\n\t\t\tvar lineDistances = source.lineDistances;\n\n\t\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\n\n\t\t\t\tthis.lineDistances.push( lineDistances[ i ] );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// update flags\n\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferAttribute( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.uuid = _Math.generateUUID();\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.dynamic = false;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.onUploadCallback = function () {};\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\n\t\tisBufferAttribute: true,\n\n\t\tsetArray: function ( array ) {\n\n\t\t\tif ( Array.isArray( array ) ) {\n\n\t\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t\t}\n\n\t\t\tthis.count = array !== undefined ? array.length / this.itemSize : 0;\n\t\t\tthis.array = array;\n\n\t\t},\n\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tthis.dynamic = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\n\t\t\tthis.dynamic = source.dynamic;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyArray: function ( array ) {\n\n\t\t\tthis.array.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyColorsArray: function ( colors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\t\tvar color = colors[ i ];\n\n\t\t\t\tif ( color === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\tcolor = new Color();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyIndicesArray: function ( indices ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tvar index = indices[ i ];\n\n\t\t\t\tarray[ offset ++ ] = index.a;\n\t\t\t\tarray[ offset ++ ] = index.b;\n\t\t\t\tarray[ offset ++ ] = index.c;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector2sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector3sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector4sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize ];\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\t\tthis.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction Int8BufferAttribute( array, itemSize ) {\n\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize );\n\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\n\tfunction Uint8BufferAttribute( array, itemSize ) {\n\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize );\n\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\n\tfunction Uint8ClampedBufferAttribute( array, itemSize ) {\n\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize );\n\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\n\tfunction Int16BufferAttribute( array, itemSize ) {\n\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize );\n\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\n\tfunction Uint16BufferAttribute( array, itemSize ) {\n\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize );\n\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\n\tfunction Int32BufferAttribute( array, itemSize ) {\n\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize );\n\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\n\tfunction Uint32BufferAttribute( array, itemSize ) {\n\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize );\n\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\n\tfunction Float32BufferAttribute( array, itemSize ) {\n\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize );\n\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\n\tfunction Float64BufferAttribute( array, itemSize ) {\n\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize );\n\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectGeometry() {\n\n\t\tthis.indices = [];\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\n\t\tthis.groups = [];\n\n\t\tthis.morphTargets = {};\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\t// this.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( DirectGeometry.prototype, {\n\n\t\tcomputeGroups: function ( geometry ) {\n\n\t\t\tvar group;\n\t\t\tvar groups = [];\n\t\t\tvar materialIndex = undefined;\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t// materials\n\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( group !== undefined ) {\n\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\tgroups.push( group );\n\n\t\t\t}\n\n\t\t\tthis.groups = groups;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t\t// morphs\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\t\tvar morphTargetsPosition;\n\n\t\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\t\tmorphTargetsPosition = [];\n\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsPosition[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t\t}\n\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\t\tvar morphTargetsNormal;\n\n\t\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\t\tmorphTargetsNormal = [];\n\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsNormal[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t\t//\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar normal = face.normal;\n\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t\t}\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar color = face.color;\n\n\t\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// morphs\n\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t\t}\n\n\t\t\t\t// skins\n\n\t\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeGroups( geometry );\n\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction arrayMax( array ) {\n\n\t\tif ( array.length === 0 ) return - Infinity;\n\n\t\tvar max = array[ 0 ];\n\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\t\tif ( array[ i ] > max ) max = array[ i ];\n\n\t\t}\n\n\t\treturn max;\n\n\t}\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferGeometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: GeometryIdCount() } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t}\n\n\tBufferGeometry.MaxIndex = 65535;\n\n\tObject.assign( BufferGeometry.prototype, EventDispatcher.prototype, {\n\n\t\tisBufferGeometry: true,\n\n\t\tgetIndex: function () {\n\n\t\t\treturn this.index;\n\n\t\t},\n\n\t\tsetIndex: function ( index ) {\n\n\t\t\tif ( Array.isArray( index ) ) {\n\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tthis.index = index;\n\n\t\t\t}\n\n\t\t},\n\n\t\taddAttribute: function ( name, attribute ) {\n\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\t\tthis.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( name === 'index' ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\tthis.setIndex( attribute );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.attributes[ name ] = attribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetAttribute: function ( name ) {\n\n\t\t\treturn this.attributes[ name ];\n\n\t\t},\n\n\t\tremoveAttribute: function ( name ) {\n\n\t\t\tdelete this.attributes[ name ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclearGroups: function () {\n\n\t\t\tthis.groups = [];\n\n\t\t},\n\n\t\tsetDrawRange: function ( start, count ) {\n\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\n\t\t},\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tmatrix.applyToBufferAttribute( position );\n\t\t\t\tposition.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif ( normal !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\tnormalMatrix.applyToBufferAttribute( normal );\n\t\t\t\tnormal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function () {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\tm1.makeRotationX( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\tm1.makeRotationY( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\tm1.makeRotationZ( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function () {\n\n\t\t\t// translate geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function translate( x, y, z ) {\n\n\t\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tscale: function () {\n\n\t\t\t// scale geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function scale( x, y, z ) {\n\n\t\t\t\tm1.makeScale( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\tvar obj = new Object3D();\n\n\t\t\treturn function lookAt( vector ) {\n\n\t\t\t\tobj.lookAt( vector );\n\n\t\t\t\tobj.updateMatrix();\n\n\t\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tvar offset = this.boundingBox.getCenter().negate();\n\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\t\treturn offset;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh ) {\n\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateFromObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\t\tdirect = undefined;\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( direct === undefined ) {\n\n\t\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t\tgeometry = direct;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.position;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.normal;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.color;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.uv;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\tthis.groups = geometry.groups;\n\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t\t},\n\n\t\tfromDirectGeometry: function ( geometry ) {\n\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.indices.length > 0 ) {\n\n\t\t\t\tvar TypeArray = arrayMax( geometry.indices ) > 65535 ? Uint32Array : Uint16Array;\n\t\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n\t\t\t\tthis.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\t// morphs\n\n\t\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.length * 3, 3 );\n\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// skinning\n\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t} else {\n\n\t\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tvar box = new Box3();\n\t\t\tvar vector = new Vector3();\n\n\t\t\treturn function computeBoundingSphere() {\n\n\t\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t\t}\n\n\t\t\t\tvar position = this.attributes.position;\n\n\t\t\t\tif ( position ) {\n\n\t\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t\tbox.setFromBufferAttribute( position );\n\t\t\t\t\tbox.getCenter( center );\n\n\t\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t\t\tvector.x = position.getX( i );\n\t\t\t\t\t\tvector.y = position.getY( i );\n\t\t\t\t\t\tvector.z = position.getZ( i );\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\t// backwards compatibility\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes;\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( attributes.position ) {\n\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// reset existing normals to zero\n\n\t\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\t// indexed elements\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\t\tthis.addGroup( 0, indices.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n\t\t\t\t\t\tvar group = groups[ j ];\n\n\t\t\t\t\t\tvar start = group.start;\n\t\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\n\t\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmerge: function ( geometry, offset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\t\tvar attributeSize = attribute2.itemSize;\n\n\t\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalizeNormals: function () {\n\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tvar x, y, z, n;\n\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t\tx = normals.getX( i );\n\t\t\t\ty = normals.getY( i );\n\t\t\t\tz = normals.getZ( i );\n\n\t\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\n\t\t\t\tnormals.setXYZ( i, x * n, y * n, z * n );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoNonIndexed: function () {\n\n\t\t\tif ( this.index === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\t\tvar index = 0, index2 = 0;\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\n\t\t\t}\n\n\t\t\treturn geometry2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tdata.data = { attributes: {} };\n\n\t\t\tvar index = this.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tvar array = Array.prototype.slice.call( index.array );\n\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: array\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\n\t\t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n\t\t\t\tdata.data.attributes[ key ] = {\n\t\t\t\t\titemSize: attribute.itemSize,\n\t\t\t\t\ttype: attribute.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: attribute.normalized\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new BufferGeometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar name, i, l;\n\n\t\t\t// reset\n\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone() );\n\n\t\t\t}\n\n\t\t\t// attributes\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// draw range\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// BoxGeometry\n\n\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tBoxGeometry.prototype = Object.create( Geometry.prototype );\n\tBoxGeometry.prototype.constructor = BoxGeometry;\n\n\t// BoxBufferGeometry\n\n\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'BoxBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tvar scope = this;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar numberOfVertices = 0;\n\t\tvar groupStart = 0;\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tvar segmentWidth = width / gridX;\n\t\t\tvar segmentHeight = height / gridY;\n\n\t\t\tvar widthHalf = width / 2;\n\t\t\tvar heightHalf = height / 2;\n\t\t\tvar depthHalf = depth / 2;\n\n\t\t\tvar gridX1 = gridX + 1;\n\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\tvar vertexCounter = 0;\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar ix, iy;\n\n\t\t\tvar vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tBoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PlaneGeometry\n\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n\t// PlaneBufferGeometry\n\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PlaneBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tvar width_half = width / 2;\n\t\tvar height_half = height / 2;\n\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar segment_width = width / gridX;\n\t\tvar segment_height = height / gridY;\n\n\t\tvar ix, iy;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = ix + gridX1 * iy;\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  shading: THREE.SmoothShading,\n\t *  depthTest: <bool>,\n\t *  depthWrite: <bool>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Ray( origin, direction ) {\n\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\n\t}\n\n\tObject.assign( Ray.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\tthis.origin.copy( origin );\n\t\t\tthis.direction.copy( direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( ray ) {\n\n\t\t\tthis.origin.copy( ray.origin );\n\t\t\tthis.direction.copy( ray.direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tat: function ( t, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t\t},\n\n\t\tlookAt: function ( v ) {\n\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trecast: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function recast( t ) {\n\n\t\t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclosestPointToPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\tresult.subVectors( point, this.origin );\n\t\t\tvar directionDistance = result.dot( this.direction );\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn result.copy( this.origin );\n\n\t\t\t}\n\n\t\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t\t},\n\n\t\tdistanceSqToPoint: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function distanceSqToPoint( point ) {\n\n\t\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t\t// point behind the ray\n\n\t\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t\t}\n\n\t\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\t\treturn v1.distanceToSquared( point );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tdistanceSqToSegment: function () {\n\n\t\t\tvar segCenter = new Vector3();\n\t\t\tvar segDir = new Vector3();\n\t\t\tvar diff = new Vector3();\n\n\t\t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t\t// defined by v0 and v1\n\t\t\t\t// It can also set two optional targets :\n\t\t\t\t// - The closest point on the ray\n\t\t\t\t// - The closest point on the segment\n\n\t\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n\t\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\t\tvar a01 = - this.direction.dot( segDir );\n\t\t\t\tvar b0 = diff.dot( this.direction );\n\t\t\t\tvar b1 = - diff.dot( segDir );\n\t\t\t\tvar c = diff.lengthSq();\n\t\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\t\tif ( det > 0 ) {\n\n\t\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\t\textDet = segExtent * det;\n\n\t\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t\t}\n\n\t\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n\t\t\t\t}\n\n\t\t\t\treturn sqrDist;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectSphere: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function intersectSphere( sphere, optionalTarget ) {\n\n\t\t\t\tv1.subVectors( sphere.center, this.origin );\n\t\t\t\tvar tca = v1.dot( this.direction );\n\t\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\t\tif ( d2 > radius2 ) return null;\n\n\t\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\t\tvar t0 = tca - thc;\n\n\t\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\t\tvar t1 = tca + thc;\n\n\t\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t\t\t// test to see if t0 is behind the ray:\n\t\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\n\t\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\t\treturn this.at( t0, optionalTarget );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n\t\t},\n\n\t\tdistanceToPlane: function ( plane ) {\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t\t// Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t :  null;\n\n\t\t},\n\n\t\tintersectPlane: function ( plane, optionalTarget ) {\n\n\t\t\tvar t = this.distanceToPlane( plane );\n\n\t\t\tif ( t === null ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn this.at( t, optionalTarget );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// check if the ray lies on the plane first\n\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\t\tif ( distToPoint === 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tintersectBox: function ( box, optionalTarget ) {\n\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\t\tvar origin = this.origin;\n\n\t\t\tif ( invdirx >= 0 ) {\n\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t\t} else {\n\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t\t}\n\n\t\t\tif ( invdiry >= 0 ) {\n\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t\t} else {\n\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\t\tif ( invdirz >= 0 ) {\n\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t\t} else {\n\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t\t//return point closest to the ray (positive side)\n\n\t\t\tif ( tmax < 0 ) return null;\n\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\n\t\t},\n\n\t\tintersectsBox: ( function () {\n\n\t\t\tvar v = new Vector3();\n\n\t\t\treturn function intersectsBox( box ) {\n\n\t\t\t\treturn this.intersectBox( box, v ) !== null;\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tintersectTriangle: function () {\n\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\tvar diff = new Vector3();\n\t\t\tvar edge1 = new Vector3();\n\t\t\tvar edge2 = new Vector3();\n\t\t\tvar normal = new Vector3();\n\n\t\t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\n\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\t\tedge1.subVectors( b, a );\n\t\t\t\tedge2.subVectors( c, a );\n\t\t\t\tnormal.crossVectors( edge1, edge2 );\n\n\t\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\t\tvar DdN = this.direction.dot( normal );\n\t\t\t\tvar sign;\n\n\t\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\t\tif ( backfaceCulling ) return null;\n\t\t\t\t\tsign = 1;\n\n\t\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\t\tsign = - 1;\n\t\t\t\t\tDdN = - DdN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tdiff.subVectors( this.origin, a );\n\t\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n\t\t\t\t// b1 < 0, no intersection\n\t\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n\t\t\t\t// b2 < 0, no intersection\n\t\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// b1+b2 > 1, no intersection\n\t\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// Line intersects triangle, check if ray does.\n\t\t\t\tvar QdN = - sign * diff.dot( normal );\n\n\t\t\t\t// t < 0, no intersection\n\t\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// Ray intersects triangle.\n\t\t\t\treturn this.at( QdN / DdN, optionalTarget );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyMatrix4: function ( matrix4 ) {\n\n\t\t\tthis.origin.applyMatrix4( matrix4 );\n\t\t\tthis.direction.transformDirection( matrix4 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( ray ) {\n\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Line3( start, end ) {\n\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n\t}\n\n\tObject.assign( Line3.prototype, {\n\n\t\tset: function ( start, end ) {\n\n\t\t\tthis.start.copy( start );\n\t\t\tthis.end.copy( end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( line ) {\n\n\t\t\tthis.start.copy( line.start );\n\t\t\tthis.end.copy( line.end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCenter: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tdelta: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.subVectors( this.end, this.start );\n\n\t\t},\n\n\t\tdistanceSq: function () {\n\n\t\t\treturn this.start.distanceToSquared( this.end );\n\n\t\t},\n\n\t\tdistance: function () {\n\n\t\t\treturn this.start.distanceTo( this.end );\n\n\t\t},\n\n\t\tat: function ( t, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tclosestPointToPointParameter: function () {\n\n\t\t\tvar startP = new Vector3();\n\t\t\tvar startEnd = new Vector3();\n\n\t\t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n\t\t\t\tstartP.subVectors( point, this.start );\n\t\t\t\tstartEnd.subVectors( this.end, this.start );\n\n\t\t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t\t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n\t\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\t\tif ( clampToLine ) {\n\n\t\t\t\t\tt = _Math.clamp( t, 0, 1 );\n\n\t\t\t\t}\n\n\t\t\t\treturn t;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.start.applyMatrix4( matrix );\n\t\t\tthis.end.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( line ) {\n\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Triangle( a, b, c ) {\n\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n\t}\n\n\tObject.assign( Triangle, {\n\n\t\tnormal: function () {\n\n\t\t\tvar v0 = new Vector3();\n\n\t\t\treturn function normal( a, b, c, optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\tresult.subVectors( c, b );\n\t\t\t\tv0.subVectors( a, b );\n\t\t\t\tresult.cross( v0 );\n\n\t\t\t\tvar resultLengthSq = result.lengthSq();\n\t\t\t\tif ( resultLengthSq > 0 ) {\n\n\t\t\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn result.set( 0, 0, 0 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\t// static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\tbarycoordFromPoint: function () {\n\n\t\t\tvar v0 = new Vector3();\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\n\t\t\t\tv0.subVectors( c, a );\n\t\t\t\tv1.subVectors( b, a );\n\t\t\t\tv2.subVectors( point, a );\n\n\t\t\t\tvar dot00 = v0.dot( v0 );\n\t\t\t\tvar dot01 = v0.dot( v1 );\n\t\t\t\tvar dot02 = v0.dot( v2 );\n\t\t\t\tvar dot11 = v1.dot( v1 );\n\t\t\t\tvar dot12 = v1.dot( v2 );\n\n\t\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\n\t\t\t\t// collinear or singular triangle\n\t\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\t\treturn result.set( - 2, - 1, - 1 );\n\n\t\t\t\t}\n\n\t\t\t\tvar invDenom = 1 / denom;\n\t\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t\t// barycentric coordinates must always sum to 1\n\t\t\t\treturn result.set( 1 - u - v, v, u );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcontainsPoint: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function containsPoint( point, a, b, c ) {\n\n\t\t\t\tvar result = Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\n\t\t\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\n\t\t\t};\n\n\t\t}()\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tset: function ( a, b, c ) {\n\n\t\t\tthis.a.copy( a );\n\t\t\tthis.b.copy( b );\n\t\t\tthis.c.copy( c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\t\tthis.a.copy( points[ i0 ] );\n\t\t\tthis.b.copy( points[ i1 ] );\n\t\t\tthis.c.copy( points[ i2 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( triangle ) {\n\n\t\t\tthis.a.copy( triangle.a );\n\t\t\tthis.b.copy( triangle.b );\n\t\t\tthis.c.copy( triangle.c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tarea: function () {\n\n\t\t\tvar v0 = new Vector3();\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function area() {\n\n\t\t\t\tv0.subVectors( this.c, this.b );\n\t\t\t\tv1.subVectors( this.a, this.b );\n\n\t\t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmidpoint: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t\t},\n\n\t\tnormal: function ( optionalTarget ) {\n\n\t\t\treturn Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\n\t\t},\n\n\t\tplane: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new Plane();\n\n\t\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t\t},\n\n\t\tbarycoordFromPoint: function ( point, optionalTarget ) {\n\n\t\t\treturn Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t\t},\n\n\t\tclosestPointToPoint: function () {\n\n\t\t\tvar plane = new Plane();\n\t\t\tvar edgeList = [ new Line3(), new Line3(), new Line3() ];\n\t\t\tvar projectedPoint = new Vector3();\n\t\t\tvar closestPoint = new Vector3();\n\n\t\t\treturn function closestPointToPoint( point, optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new Vector3();\n\t\t\t\tvar minDistance = Infinity;\n\n\t\t\t\t// project the point onto the plane of the triangle\n\n\t\t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\t\t\tplane.projectPoint( point, projectedPoint );\n\n\t\t\t\t// check if the projection lies within the triangle\n\n\t\t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\n\t\t\t\t\t// if so, this is the closest point\n\n\t\t\t\t\tresult.copy( projectedPoint );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\n\t\t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n\t\t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n\t\t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\n\t\t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\n\t\t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\n\t\t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\n\t\t\t\t\t\tif( distance < minDistance ) {\n\n\t\t\t\t\t\t\tminDistance = distance;\n\n\t\t\t\t\t\t\tresult.copy( closestPoint );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tequals: function ( triangle ) {\n\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author jonobr1 / http://jonobr1.com/\n\t */\n\n\tfunction Mesh( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\t\tthis.drawMode = TrianglesDrawMode;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Mesh,\n\n\t\tisMesh: true,\n\n\t\tsetDrawMode: function ( value ) {\n\n\t\t\tthis.drawMode = value;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.drawMode = source.drawMode;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tname = morphTargets[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\tvar ray = new Ray();\n\t\t\tvar sphere = new Sphere();\n\n\t\t\tvar vA = new Vector3();\n\t\t\tvar vB = new Vector3();\n\t\t\tvar vC = new Vector3();\n\n\t\t\tvar tempA = new Vector3();\n\t\t\tvar tempB = new Vector3();\n\t\t\tvar tempC = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tvar barycoord = new Vector3();\n\n\t\t\tvar intersectionPoint = new Vector3();\n\t\t\tvar intersectionPointWorld = new Vector3();\n\n\t\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n\t\t\t\tTriangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\n\t\t\t\tuv1.multiplyScalar( barycoord.x );\n\t\t\t\tuv2.multiplyScalar( barycoord.y );\n\t\t\t\tuv3.multiplyScalar( barycoord.z );\n\n\t\t\t\tuv1.add( uv2 ).add( uv3 );\n\n\t\t\t\treturn uv1.clone();\n\n\t\t\t}\n\n\t\t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\n\t\t\t\tvar intersect;\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t\t\t}\n\n\t\t\t\tif ( intersect === null ) return null;\n\n\t\t\t\tintersectionPointWorld.copy( point );\n\t\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\t\t\t\treturn {\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\tpoint: intersectionPointWorld.clone(),\n\t\t\t\t\tobject: object\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, position, uv, a, b, c ) {\n\n\t\t\t\tvA.fromBufferAttribute( position, a );\n\t\t\t\tvB.fromBufferAttribute( position, b );\n\t\t\t\tvC.fromBufferAttribute( position, c );\n\n\t\t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\tif ( uv ) {\n\n\t\t\t\t\t\tuvA.fromBufferAttribute( uv, a );\n\t\t\t\t\t\tuvB.fromBufferAttribute( uv, b );\n\t\t\t\t\t\tuvC.fromBufferAttribute( uv, c );\n\n\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tintersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );\n\t\t\t\t\tintersection.faceIndex = a;\n\n\t\t\t\t}\n\n\t\t\t\treturn intersection;\n\n\t\t\t}\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar material = this.material;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t\tif ( material === undefined ) return;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\t// Check boundingBox before continuing\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t\t\t}\n\n\t\t\t\tvar intersection;\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar a, b, c;\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\t\tvar i, l;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\t// indexed buffer geometry\n\n\t\t\t\t\t\tfor ( i = 0, l = index.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\ta = index.getX( i );\n\t\t\t\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\t\t\tfor ( i = 0, l = position.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\ta = i;\n\t\t\t\t\t\t\tb = i + 1;\n\t\t\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar uvs;\n\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n\t\t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t\t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t\t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n\t\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvA.add( fvA );\n\t\t\t\t\t\t\tvB.add( fvB );\n\t\t\t\t\t\t\tvC.add( fvC );\n\n\t\t\t\t\t\t\tfvA = vA;\n\t\t\t\t\t\t\tfvB = vB;\n\t\t\t\t\t\t\tfvC = vC;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\n\n\t\tvar clearColor = new Color( 0x000000 );\n\t\tvar clearAlpha = 0;\n\n\t\tvar planeCamera, planeMesh;\n\t\tvar boxCamera, boxMesh;\n\n\t\tfunction render( scene, camera, forceClear ) {\n\n\t\t\tvar background = scene.background;\n\n\t\t\tif ( background === null ) {\n\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t} else if ( background && background.isColor ) {\n\n\t\t\t\tsetClear( background, 1 );\n\t\t\t\tforceClear = true;\n\n\t\t\t}\n\n\t\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t\t}\n\n\t\t\tif ( background && background.isCubeTexture ) {\n\n\t\t\t\tif ( boxCamera === undefined ) {\n\n\t\t\t\t\tboxCamera = new PerspectiveCamera();\n\n\t\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\t\tnew BoxBufferGeometry( 5, 5, 5 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\tuniforms: ShaderLib.cube.uniforms,\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tboxCamera.projectionMatrix.copy( camera.projectionMatrix );\n\n\t\t\t\tboxCamera.matrixWorld.extractRotation( camera.matrixWorld );\n\t\t\t\tboxCamera.matrixWorldInverse.getInverse( boxCamera.matrixWorld );\n\n\t\t\t\tboxMesh.material.uniforms[ \"tCube\" ].value = background;\n\t\t\t\tboxMesh.modelViewMatrix.multiplyMatrices( boxCamera.matrixWorldInverse, boxMesh.matrixWorld );\n\n\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t\trenderer.renderBufferDirect( boxCamera, null, boxMesh.geometry, boxMesh.material, boxMesh, null );\n\n\t\t\t} else if ( background && background.isTexture ) {\n\n\t\t\t\tif ( planeCamera === undefined ) {\n\n\t\t\t\t\tplaneCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n\t\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.map = background;\n\n\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t\trenderer.renderBufferDirect( planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setClear( color, alpha ) {\n\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tgetClearColor: function () {\n\n\t\t\t\treturn clearColor;\n\n\t\t\t},\n\t\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\t\tclearColor.set( color );\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\n\t\t\t\treturn clearAlpha;\n\n\t\t\t},\n\t\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\trender: render\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction painterSortStable( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.program && b.program && a.program !== b.program ) {\n\n\t\t\treturn a.program.id - b.program.id;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction WebGLRenderList() {\n\n\t\tvar opaque = [];\n\t\tvar opaqueLastIndex = - 1;\n\n\t\tvar transparent = [];\n\t\tvar transparentLastIndex = - 1;\n\n\t\tfunction init() {\n\n\t\t\topaqueLastIndex = - 1;\n\t\t\ttransparentLastIndex = - 1;\n\n\t\t}\n\n\t\tfunction push( object, geometry, material, z, group ) {\n\n\t\t\tvar array, index;\n\n\t\t\t// allocate the next position in the appropriate array\n\n\t\t\tif ( material.transparent ) {\n\n\t\t\t\tarray = transparent;\n\t\t\t\tindex = ++ transparentLastIndex;\n\n\t\t\t} else {\n\n\t\t\t\tarray = opaque;\n\t\t\t\tindex = ++ opaqueLastIndex;\n\n\t\t\t}\n\n\t\t\t// recycle existing render item or grow the array\n\n\t\t\tvar renderItem = array[ index ];\n\n\t\t\tif ( renderItem ) {\n\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = material.program;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\n\t\t\t} else {\n\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: material.program,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\n\t\t\t\t// assert( index === array.length );\n\t\t\t\tarray.push( renderItem );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction finish() {\n\n\t\t\topaque.length = opaqueLastIndex + 1;\n\t\t\ttransparent.length = transparentLastIndex + 1;\n\n\t\t}\n\n\t\tfunction sort() {\n\n\t\t\topaque.sort( painterSortStable );\n\t\t\ttransparent.sort( reversePainterSortStable );\n\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tfinish: finish,\n\n\t\t\tsort: sort\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderLists() {\n\n\t\tvar lists = {};\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar hash = scene.id + ',' + camera.id;\n\t\t\tvar list = lists[ hash ];\n\n\t\t\tif ( list === undefined ) {\n\n\t\t\t\t// console.log( 'THREE.WebGLRenderLists:', hash );\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlists[ hash ] = list;\n\n\t\t\t}\n\n\t\t\treturn list;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tlists = {};\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex( value ) {\n\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\t\tinfoRender.calls ++;\n\t\t\tinfoRender.vertices += count;\n\n\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\textension.drawElementsInstancedANGLE( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );\n\n\t\t\tinfoRender.calls ++;\n\t\t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBufferRenderer( gl, extensions, infoRender ) {\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawArrays( mode, start, count );\n\n\t\t\tinfoRender.calls ++;\n\t\t\tinfoRender.vertices += count;\n\n\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar position = geometry.attributes.position;\n\n\t\t\tif ( position.isInterleavedBufferAttribute ) {\n\n\t\t\t\tcount = position.data.count;\n\n\t\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n\t\t\t} else {\n\n\t\t\t\textension.drawArraysInstancedANGLE( mode, start, count, geometry.maxInstancedCount );\n\n\t\t\t}\n\n\t\t\tinfoRender.calls ++;\n\t\t\tinfoRender.vertices += count * geometry.maxInstancedCount;\n\n\t\t\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLGeometries( gl, attributes, infoMemory ) {\n\n\t\tvar geometries = {};\n\t\tvar wireframeAttributes = {};\n\n\t\tfunction onGeometryDispose( event ) {\n\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t\t}\n\n\t\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tdelete geometries[ geometry.id ];\n\n\t\t\t// TODO Remove duplicate code\n\n\t\t\tvar attribute = wireframeAttributes[ geometry.id ];\n\n\t\t\tif ( attribute ) {\n\n\t\t\t\tattributes.remove( attribute );\n\t\t\t\tdelete wireframeAttributes[ geometry.id ];\n\n\t\t\t}\n\n\t\t\tattribute = wireframeAttributes[ buffergeometry.id ];\n\n\t\t\tif ( attribute ) {\n\n\t\t\t\tattributes.remove( attribute );\n\t\t\t\tdelete wireframeAttributes[ buffergeometry.id ];\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tinfoMemory.geometries --;\n\n\t\t}\n\n\t\tfunction get( object, geometry ) {\n\n\t\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\t\tif ( buffergeometry ) return buffergeometry;\n\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tbuffergeometry = geometry;\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t\t}\n\n\t\t\tgeometries[ geometry.id ] = buffergeometry;\n\n\t\t\tinfoMemory.geometries ++;\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction update( geometry ) {\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattributes.update( index, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\t\tattributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var name in morphAttributes ) {\n\n\t\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tattributes.update( array[ i ], gl.ARRAY_BUFFER );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getWireframeAttribute( geometry ) {\n\n\t\t\tvar attribute = wireframeAttributes[ geometry.id ];\n\n\t\t\tif ( attribute ) return attribute;\n\n\t\t\tvar indices = [];\n\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\t// console.time( 'wireframe' );\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\tvar array = geometryIndex.array;\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar array = geometryAttributes.position.array;\n\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = i + 0;\n\t\t\t\t\tvar b = i + 1;\n\t\t\t\t\tvar c = i + 2;\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// console.timeEnd( 'wireframe' );\n\n\t\t\tattribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\n\t\t\tattributes.update( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t\twireframeAttributes[ geometry.id ] = attribute;\n\n\t\t\treturn attribute;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tupdate: update,\n\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLLights() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLObjects( gl, geometries, infoRender ) {\n\n\t\tvar updateList = {};\n\n\t\tfunction update( object ) {\n\n\t\t\tvar frame = infoRender.frame;\n\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t\t// Update once per frame\n\n\t\t\tif ( updateList[ buffergeometry.id ] !== frame ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tgeometries.update( buffergeometry );\n\n\t\t\t\tupdateList[ buffergeometry.id ] = frame;\n\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction clear() {\n\n\t\t\tupdateList = {};\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update,\n\t\t\tclear: clear\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\tfunction WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n\t\t}\n\n\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n\t\t}\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\treturn shader;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar programIdCount = 0;\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn [ 'Linear','( value )' ];\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn [ 'sRGB','( value )' ];\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn [ 'RGBE','( value )' ];\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t\t}\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = \"Linear\";\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = \"Reinhard\";\n\t\t\t\tbreak;\n\n\t\t\tcase Uncharted2ToneMapping:\n\t\t\t\ttoneMappingName = \"Uncharted2\";\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = \"OptimizedCineon\";\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t\t}\n\n\t\treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\n\t}\n\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\n\t\textensions = extensions || {};\n\n\t\tvar chunks = [\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) continue;\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program, identifiers ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n\t}\n\n\tfunction parseIncludes( string ) {\n\n\t\tvar pattern = /^[ \\t]*#include +<([\\w\\d.]+)>/gm;\n\n\t\tfunction replace( match, include ) {\n\n\t\t\tvar replace = ShaderChunk[ include ];\n\n\t\t\tif ( replace === undefined ) {\n\n\t\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t\t}\n\n\t\t\treturn parseIncludes( replace );\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\tfunction unrollLoops( string ) {\n\n\t\tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n\t\tfunction replace( match, start, end, snippet ) {\n\n\t\t\tvar unroll = '';\n\n\t\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n\t\t\t}\n\n\t\t\treturn unroll;\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\tfunction WebGLProgram( renderer, code, material, shader, parameters ) {\n\n\t\tvar gl = renderer.context;\n\n\t\tvar extensions = material.extensions;\n\t\tvar defines = material.defines;\n\n\t\tvar vertexShader = shader.vertexShader;\n\t\tvar fragmentShader = shader.fragmentShader;\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t}\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EquirectangularReflectionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SphericalReflectionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.combine ) {\n\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\t// console.log( 'building new program ' );\n\n\t\t//\n\n\t\tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\t//\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tif ( material.isRawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\t\t\t\tcustomDefines,\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\t\t\t\t'#define UNION_CLIPPING_PLANES ' + (parameters.numClippingPlanes - parameters.numClipIntersection),\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\n\t\t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = parseIncludes( vertexShader );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\n\t\tfragmentShader = parseIncludes( fragmentShader );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\n\t\tif ( ! material.isShaderMaterial ) {\n\n\t\t\tvertexShader = unrollLoops( vertexShader );\n\t\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\t\tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( material.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\tvar programLog = gl.getProgramInfoLog( program );\n\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\n\t\tvar runnable = true;\n\t\tvar haveDiagnostics = true;\n\n\t\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\t\t\t\tmaterial: material,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t// clean up\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function() {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms =\n\t\t\t\t\tnew WebGLUniforms( gl, program, renderer );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function() {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function() {\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t// DEPRECATED\n\n\t\tObject.defineProperties( this, {\n\n\t\t\tuniforms: {\n\t\t\t\tget: function() {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t\t\t\t\treturn this.getUniforms();\n\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tattributes: {\n\t\t\t\tget: function() {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t\t\t\t\treturn this.getAttributes();\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t} );\n\n\n\t\t//\n\n\t\tthis.id = programIdCount ++;\n\t\tthis.code = code;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLPrograms( renderer, capabilities ) {\n\n\t\tvar programs = [];\n\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'phong',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points'\n\t\t};\n\n\t\tvar parameterNames = [\n\t\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\"\n\t\t];\n\n\n\t\tfunction allocateBones( object ) {\n\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\treturn 1024;\n\n\t\t\t} else {\n\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//    (up to 54 should be safe)\n\n\t\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n\t\t\tvar encoding;\n\n\t\t\tif ( ! map ) {\n\n\t\t\t\tencoding = LinearEncoding;\n\n\t\t\t} else if ( map.isTexture ) {\n\n\t\t\t\tencoding = map.encoding;\n\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\tencoding = map.texture.encoding;\n\n\t\t\t}\n\n\t\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\n\t\t\t\tencoding = GammaEncoding;\n\n\t\t\t}\n\n\t\t\treturn encoding;\n\n\t\t}\n\n\t\tthis.getParameters = function ( material, lights, fog, nClipPlanes, nClipIntersection, object ) {\n\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\t\t\tvar precision = renderer.getPrecision();\n\n\t\t\tif ( material.precision !== null ) {\n\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar parameters = {\n\n\t\t\t\tshaderID: shaderID,\n\n\t\t\t\tprecision: precision,\n\t\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\t\tmap: !! material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\t\tenvMap: !! material.envMap,\n\t\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\t\tcombine: material.combine,\n\n\t\t\t\tvertexColors: material.vertexColors,\n\n\t\t\t\tfog: !! fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp: ( fog && fog.isFogExp2 ),\n\n\t\t\t\tflatShading: material.shading === FlatShading,\n\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: capabilities.floatVertexTextures,\n\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\t\tdithering: material.dithering,\n\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\t\ttoneMapping: renderer.toneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n\t\t\t};\n\n\t\t\treturn parameters;\n\n\t\t};\n\n\t\tthis.getProgramCode = function ( material, parameters ) {\n\n\t\t\tvar array = [];\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tarray.push( parameters.shaderID );\n\n\t\t\t} else {\n\n\t\t\t\tarray.push( material.fragmentShader );\n\t\t\t\tarray.push( material.vertexShader );\n\n\t\t\t}\n\n\t\t\tif ( material.defines !== undefined ) {\n\n\t\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\t\tarray.push( name );\n\t\t\t\t\tarray.push( material.defines[ name ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t}\n\n\t\t\tarray.push( material.onBeforeCompile.toString() );\n\n\t\t\tarray.push( renderer.gammaOutput );\n\n\t\t\treturn array.join();\n\n\t\t};\n\n\t\tthis.acquireProgram = function ( material, shader, parameters, code ) {\n\n\t\t\tvar program;\n\n\t\t\t// Check if code has been already compiled\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\t\tvar programInfo = programs[ p ];\n\n\t\t\t\tif ( programInfo.code === code ) {\n\n\t\t\t\t\tprogram = programInfo;\n\t\t\t\t\t++ program.usedTimes;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tprogram = new WebGLProgram( renderer, code, material, shader, parameters );\n\t\t\t\tprograms.push( program );\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t};\n\n\t\tthis.releaseProgram = function ( program ) {\n\n\t\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\tprograms.pop();\n\n\t\t\t\t// Free WebGL resources\n\t\t\t\tprogram.destroy();\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tthis.programs = programs;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, infoMemory ) {\n\n\t\tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\n\t\t//\n\n\t\tfunction clampToMaxSize( image, maxSize ) {\n\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t\t\t\t// premultiplied alpha.\n\n\t\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n\t\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = Math.floor( image.width * scale );\n\t\t\t\tcanvas.height = Math.floor( image.height * scale );\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\t\treturn canvas;\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\n\n\t\t}\n\n\t\tfunction makePowerOfTwo( image ) {\n\n\t\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = _Math.nearestPowerOfTwo( image.width );\n\t\t\t\tcanvas.height = _Math.nearestPowerOfTwo( image.height );\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\t\treturn canvas;\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps( texture, isPowerOfTwo ) {\n\n\t\t\treturn texture.generateMipmaps && isPowerOfTwo &&\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t\t}\n\n\t\t// Fallback filters for non-power-of-2 textures\n\n\t\tfunction filterFallback( f ) {\n\n\t\t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\n\t\t\t\treturn _gl.NEAREST;\n\n\t\t\t}\n\n\t\t\treturn _gl.LINEAR;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction onTextureDispose( event ) {\n\n\t\t\tvar texture = event.target;\n\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\t\tdeallocateTexture( texture );\n\n\t\t\tinfoMemory.textures --;\n\n\n\t\t}\n\n\t\tfunction onRenderTargetDispose( event ) {\n\n\t\t\tvar renderTarget = event.target;\n\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t\tinfoMemory.textures --;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction deallocateTexture( texture ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t// cube texture\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n\t\t\t} else {\n\n\t\t\t\t// 2D texture\n\n\t\t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\t// remove all webgl properties\n\t\t\tproperties.remove( texture );\n\n\t\t}\n\n\t\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\tif ( ! renderTarget ) return;\n\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n\t\t\t}\n\n\t\t\tproperties.remove( renderTarget.texture );\n\t\t\tproperties.remove( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\n\n\t\tfunction setTexture2D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureCube( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.image.length === 6 ) {\n\n\t\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n\t\t\t\t\t\tinfoMemory.textures ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n\t\t\t\t\tvar isCompressed = ( texture && texture.isCompressedTexture );\n\t\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\t\t\tvar cubeImage = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t\t\t\t\tglType = paramThreeToGL( texture.type );\n\n\t\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {\n\n\t\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( isPowerOfTwoImage ) {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension ) {\n\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\t\tif ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\tinfoMemory.textures ++;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n\t\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n\t\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n\t\t\t\timage = makePowerOfTwo( image );\n\n\t\t\t}\n\n\t\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t\t\tglType = paramThreeToGL( texture.type );\n\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n\t\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t\t} else if ( _isWebGL2 ) {\n\n\t\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthFormat && internalFormat === _gl.DEPTH_COMPONENT ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t        console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = paramThreeToGL( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.format === DepthStencilFormat ) {\n\n\t\t\t\t\tinternalFormat = _gl.DEPTH_STENCIL;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = paramThreeToGL( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\t// Render targets\n\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n\t\t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n\t\t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t}\n\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t} else {\n\n\t\t\t\t// FIXME: We don't support !depth !stencil\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t\t}\n\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t\t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\tif ( !( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\n\t\t\t}\n\n\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t}\n\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error('Unknown depthTexture format')\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup GL resources for a non-texture depth buffer\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t}\n\n\t\t// Set up GL resources for the render target\n\t\tfunction setupRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfoMemory.textures ++;\n\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t\t// Setup framebuffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t\t// Setup color buffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t\t}\n\n\t\t\t// Setup depth and stencil buffers\n\n\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, isTargetPowerOfTwo ) ) {\n\n\t\t\t\tvar target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\t_gl.generateMipmap( target );\n\t\t\t\tstate.bindTexture( target, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\n\t}\n\n\t/**\n\t * @author fordacious / fordacious.github.io\n\t */\n\n\tfunction WebGLProperties() {\n\n\t\tvar properties = {};\n\n\t\tfunction get( object ) {\n\n\t\t\tvar uuid = object.uuid;\n\t\t\tvar map = properties[ uuid ];\n\n\t\t\tif ( map === undefined ) {\n\n\t\t\t\tmap = {};\n\t\t\t\tproperties[ uuid ] = map;\n\n\t\t\t}\n\n\t\t\treturn map;\n\n\t\t}\n\n\t\tfunction remove( object ) {\n\n\t\t\tdelete properties[ object.uuid ];\n\n\t\t}\n\n\t\tfunction clear() {\n\n\t\t\tproperties = {};\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tclear: clear\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLState( gl, extensions, paramThreeToGL ) {\n\n\t\tfunction ColorBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4();\n\n\t\t\treturn {\n\n\t\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set( 0, 0, 0, 1 );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\t\tenable( gl.DEPTH_TEST );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( gl.DEPTH_TEST );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\tenable( gl.STENCIL_TEST );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( gl.STENCIL_TEST );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\n\t\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\t\tvar capabilities = {};\n\n\t\tvar compressedTextureFormats = null;\n\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\n\t\tvar currentLineWidth = null;\n\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\n\t\tvar currentScissorTest = null;\n\n\t\tvar maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );\n\n\t\tvar version = parseFloat( /^WebGL\\ ([0-9])/.exec( gl.getParameter( gl.VERSION ) )[ 1 ] );\n\t\tvar lineWidthAvailable = parseFloat( version ) >= 1.0;\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture( type, target, count ) {\n\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\tvar texture = gl.createTexture();\n\n\t\t\tgl.bindTexture( type, texture );\n\t\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\t\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n\t\t//\n\n\t\tfunction init() {\n\n\t\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\t\t\tdepthBuffer.setClear( 1 );\n\t\t\tstencilBuffer.setClear( 0 );\n\n\t\t\tenable( gl.DEPTH_TEST );\n\t\t\tdepthBuffer.setFunc( LessEqualDepth );\n\n\t\t\tsetFlipSided( false );\n\t\t\tsetCullFace( CullFaceBack );\n\t\t\tenable( gl.CULL_FACE );\n\n\t\t\tenable( gl.BLEND );\n\t\t\tsetBlending( NormalBlending );\n\n\t\t}\n\n\t\tfunction initAttributes() {\n\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttribute( attribute ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\n\t\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t\t\t\tattributeDivisors[ attribute ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enable( id ) {\n\n\t\t\tif ( capabilities[ id ] !== true ) {\n\n\t\t\t\tgl.enable( id );\n\t\t\t\tcapabilities[ id ] = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disable( id ) {\n\n\t\t\tif ( capabilities[ id ] !== false ) {\n\n\t\t\t\tgl.disable( id );\n\t\t\t\tcapabilities[ id ] = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getCompressedTextureFormats() {\n\n\t\t\tif ( compressedTextureFormats === null ) {\n\n\t\t\t\tcompressedTextureFormats = [];\n\n\t\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\n\t\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n\t\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n\t\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn compressedTextureFormats;\n\n\t\t}\n\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\t\tif ( blending !== NoBlending ) {\n\n\t\t\t\tenable( gl.BLEND );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.BLEND );\n\n\t\t\t}\n\n\t\t\tif ( ( blending !== CustomBlending ) && ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) ) {\n\n\t\t\t\tif ( blending === AdditiveBlending ) {\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( blending === SubtractiveBlending ) {\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( blending === MultiplyBlending ) {\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrentBlending = blending;\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blending === CustomBlending ) {\n\n\t\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\n\t\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t\t}\n\n\t\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\n\t\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tcurrentBlendEquation = null;\n\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\tcurrentBlendDst = null;\n\t\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setMaterial( material ) {\n\n\t\t\tmaterial.side === DoubleSide\n\t\t\t\t? disable( gl.CULL_FACE )\n\t\t\t\t: enable( gl.CULL_FACE );\n\n\t\t\tsetFlipSided( material.side === BackSide );\n\n\t\t\tmaterial.transparent === true\n\t\t\t\t? setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )\n\t\t\t\t: setBlending( NoBlending );\n\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\t\tdepthBuffer.setTest( material.depthTest );\n\t\t\tdepthBuffer.setMask( material.depthWrite );\n\t\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setFlipSided( flipSided ) {\n\n\t\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\t\tif ( flipSided ) {\n\n\t\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setCullFace( cullFace ) {\n\n\t\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\t\tenable( gl.CULL_FACE );\n\n\t\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.CULL_FACE );\n\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\n\t\t}\n\n\t\tfunction setLineWidth( width ) {\n\n\t\t\tif ( width !== currentLineWidth ) {\n\n\t\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\t\tcurrentLineWidth = width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\t\tif ( polygonOffset ) {\n\n\t\t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getScissorTest() {\n\n\t\t\treturn currentScissorTest;\n\n\t\t}\n\n\t\tfunction setScissorTest( scissorTest ) {\n\n\t\t\tcurrentScissorTest = scissorTest;\n\n\t\t\tif ( scissorTest ) {\n\n\t\t\t\tenable( gl.SCISSOR_TEST );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.SCISSOR_TEST );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// texture\n\n\t\tfunction activeTexture( webglSlot ) {\n\n\t\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\tactiveTexture();\n\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture === undefined ) {\n\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t\t}\n\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction scissor( scissor ) {\n\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\tcurrentScissor.copy( scissor );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction viewport( viewport ) {\n\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\tcurrentViewport.copy( viewport );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction reset() {\n\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcapabilities = {};\n\n\t\t\tcompressedTextureFormats = null;\n\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\n\t\t\tcurrentBlending = null;\n\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\n\t\t\tinit: init,\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\t\tgetScissorTest: getScissorTest,\n\t\t\tsetScissorTest: setScissorTest,\n\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\n\t\t\treset: reset\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\n\t\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t\t} else {\n\n\t\t\t\tmaxAnisotropy = 0;\n\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\n\t\t}\n\n\t\tfunction getMaxPrecision( precision ) {\n\n\t\t\tif ( precision === 'highp' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n\t\t\t\t\treturn 'highp';\n\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\n\t\t\t}\n\n\t\t\tif ( precision === 'mediump' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n\t\t\t\t\treturn 'mediump';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\n\t\t}\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision( precision );\n\n\t\tif ( maxPrecision !== precision ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\t\tprecision = maxPrecision;\n\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );\n\n\t\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t\tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\t\tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\t\tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\t\tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t\tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\t\tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\t\tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\t\treturn {\n\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ArrayCamera( array ) {\n\n\t\tPerspectiveCamera.call( this );\n\n\t\tthis.cameras = array || [];\n\n\t}\n\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\t\tconstructor: ArrayCamera,\n\n\t\tisArrayCamera: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebVRManager( renderer ) {\n\n\t\tvar scope = this;\n\n\t\tvar device = null;\n\t\tvar frameData = null;\n\n\t\tif ( 'VRFrameData' in window ) {\n\n\t\t\tframeData = new window.VRFrameData();\n\n\t\t}\n\n\t\tvar matrixWorldInverse = new Matrix4();\n\n\t\tvar standingMatrix = new Matrix4();\n\t\tvar standingMatrixInverse = new Matrix4();\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );\n\t\tcameraL.layers.enable( 1 );\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );\n\t\tcameraR.layers.enable( 2 );\n\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\t//\n\n\t\tvar currentSize, currentPixelRatio;\n\n\t\tfunction onVRDisplayPresentChange() {\n\n\t\t\tif ( device.isPresenting ) {\n\n\t\t\t\tvar eyeParameters = device.getEyeParameters( 'left' );\n\t\t\t\tvar renderWidth = eyeParameters.renderWidth;\n\t\t\t\tvar renderHeight = eyeParameters.renderHeight;\n\n\t\t\t\tcurrentPixelRatio = renderer.getPixelRatio();\n\t\t\t\tcurrentSize = renderer.getSize();\n\n\t\t\t\trenderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );\n\n\t\t\t} else if ( scope.enabled ) {\n\n\t\t\t\trenderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );\n\n\t\t\t}\n\n\t\t}\n\n\t\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\n\n\t\t//\n\n\t\tthis.enabled = false;\n\t\tthis.standing = false;\n\n\t\tthis.getDevice = function () {\n\n\t\t\treturn device;\n\n\t\t};\n\n\t\tthis.setDevice = function ( value ) {\n\n\t\t\tif ( value !== undefined ) device = value;\n\n\t\t};\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tif ( device === null ) return camera;\n\n\t\t\tdevice.depthNear = camera.near;\n\t\t\tdevice.depthFar = camera.far;\n\n\t\t\tdevice.getFrameData( frameData );\n\n\t\t\t//\n\n\t\t\tvar pose = frameData.pose;\n\n\t\t\tif ( pose.position !== null ) {\n\n\t\t\t\tcamera.position.fromArray( pose.position );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.position.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( pose.orientation !== null ) {\n\n\t\t\t\tcamera.quaternion.fromArray( pose.orientation );\n\n\t\t\t}\n\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t\tvar stageParameters = device.stageParameters;\n\n\t\t\tif ( this.standing && stageParameters ) {\n\n\t\t\t\tstandingMatrix.fromArray( stageParameters.sittingToStandingTransform );\n\t\t\t\tstandingMatrixInverse.getInverse( standingMatrix );\n\n\t\t\t\tcamera.matrixWorld.multiply( standingMatrix );\n\t\t\t\tcamera.matrixWorldInverse.multiply( standingMatrixInverse );\n\n\t\t\t}\n\n\t\t\tif ( device.isPresenting === false ) return camera;\n\n\t\t\t//\n\n\t\t\tcameraVR.matrixWorld.copy( camera.matrixWorld );\n\t\t\tcameraVR.matrixWorldInverse.copy( camera.matrixWorldInverse );\n\n\t\t\tcameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );\n\t\t\tcameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );\n\n\t\t\tif ( this.standing && stageParameters ) {\n\n\t\t\t\tcameraL.matrixWorldInverse.multiply( standingMatrixInverse );\n\t\t\t\tcameraR.matrixWorldInverse.multiply( standingMatrixInverse );\n\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\n\t\t\t\tcameraL.matrixWorldInverse.multiply( matrixWorldInverse );\n\t\t\t\tcameraR.matrixWorldInverse.multiply( matrixWorldInverse );\n\n\t\t\t}\n\n\t\t\t// envMap and Mirror needs camera.matrixWorld\n\n\t\t\tcameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );\n\t\t\tcameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );\n\n\t\t\tcameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );\n\t\t\tcameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );\n\n\t\t\t// HACK @mrdoob\n\t\t\t// https://github.com/w3c/webvr/issues/203\n\n\t\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t\t//\n\n\t\t\tvar layers = device.getLayers();\n\n\t\t\tif ( layers.length ) {\n\n\t\t\t\tvar layer = layers[ 0 ];\n\n\t\t\t\tif ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {\n\n\t\t\t\t\tcameraL.bounds.fromArray( layer.leftBounds );\n\n\t\t\t\t}\n\n\t\t\t\tif ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {\n\n\t\t\t\t\tcameraR.bounds.fromArray( layer.rightBounds );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\tthis.getStandingMatrix = function () {\n\n\t\t\treturn standingMatrix;\n\n\t\t};\n\n\t\tthis.submitFrame = function () {\n\n\t\t\tif ( device && device.isPresenting ) device.submitFrame();\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLExtensions( gl ) {\n\n\t\tvar extensions = {};\n\n\t\treturn {\n\n\t\t\tget: function ( name ) {\n\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\t\treturn extensions[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tvar extension;\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_etc1':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t\t}\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t\t}\n\n\t\t\t\textensions[ name ] = extension;\n\n\t\t\t\treturn extension;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction WebGLClipping() {\n\n\t\tvar scope = this,\n\n\t\t\tglobalState = null,\n\t\t\tnumGlobalPlanes = 0,\n\t\t\tlocalClippingEnabled = false,\n\t\t\trenderingShadows = false,\n\n\t\t\tplane = new Plane(),\n\t\t\tviewNormalMatrix = new Matrix3(),\n\n\t\t\tuniform = { value: null, needsUpdate: false };\n\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function( planes, enableLocalClipping, camera ) {\n\n\t\t\tvar enabled =\n\t\t\t\tplanes.length !== 0 ||\n\t\t\t\tenableLocalClipping ||\n\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\tlocalClippingEnabled;\n\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\tnumGlobalPlanes = planes.length;\n\n\t\t\treturn enabled;\n\n\t\t};\n\n\t\tthis.beginShadows = function() {\n\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes( null );\n\n\t\t};\n\n\t\tthis.endShadows = function() {\n\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\n\t\t};\n\n\t\tthis.setState = function( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\t\tif ( ! localClippingEnabled ||\n\t\t\t\t\tplanes === null || planes.length === 0 ||\n\t\t\t\t\trenderingShadows && ! clipShadows ) {\n\t\t\t\t// there's no local clipping\n\n\t\t\t\tif ( renderingShadows ) {\n\t\t\t\t\t// there's no global clipping\n\n\t\t\t\t\tprojectPlanes( null );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresetGlobalState();\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcache.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\n\t\t\t}\n\n\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\n\t\t\tif ( uniform.value !== globalState ) {\n\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t}\n\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\t\tdstArray = null;\n\n\t\t\tif ( nPlanes !== 0 ) {\n\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset;\n\t\t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\t\tplane.copy( planes[ i ] ).\n\t\t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\t\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t}\n\n\t// import { Sphere } from '../math/Sphere';\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t * @author tschw\n\t */\n\n\tfunction WebGLRenderer( parameters ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\n\t\tvar lights = [];\n\n\t\tvar currentRenderList = null;\n\n\t\tvar morphInfluences = new Float32Array( 8 );\n\n\t\tvar sprites = [];\n\t\tvar lensFlares = [];\n\n\t\t// public properties\n\n\t\tthis.domElement = _canvas;\n\t\tthis.context = null;\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\tthis.gammaInput = false;\n\t\tthis.gammaOutput = false;\n\n\t\t// physical lights\n\n\t\tthis.physicallyCorrectLights = false;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = LinearToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\t\tthis.toneMappingWhitePoint = 1.0;\n\n\t\t// morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4;\n\n\t\t// internal properties\n\n\t\tvar _this = this,\n\n\t\t\t// internal state cache\n\n\t\t\t_currentProgram = null,\n\t\t\t_currentRenderTarget = null,\n\t\t\t_currentFramebuffer = null,\n\t\t\t_currentMaterialId = - 1,\n\t\t\t_currentGeometryProgram = '',\n\n\t\t\t_currentCamera = null,\n\t\t\t_currentArrayCamera = null,\n\n\t\t\t_currentScissor = new Vector4(),\n\t\t\t_currentScissorTest = null,\n\n\t\t\t_currentViewport = new Vector4(),\n\n\t\t\t//\n\n\t\t\t_usedTextureUnits = 0,\n\n\t\t\t//\n\n\t\t\t_width = _canvas.width,\n\t\t\t_height = _canvas.height,\n\n\t\t\t_pixelRatio = 1,\n\n\t\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissorTest = false,\n\n\t\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\n\t\t\t// frustum\n\n\t\t\t_frustum = new Frustum(),\n\n\t\t\t// clipping\n\n\t\t\t_clipping = new WebGLClipping(),\n\t\t\t_clippingEnabled = false,\n\t\t\t_localClippingEnabled = false,\n\n\t\t\t// camera matrices cache\n\n\t\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t\t_vector3 = new Vector3(),\n\t\t\t_matrix4 = new Matrix4(),\n\t\t\t_matrix42 = new Matrix4(),\n\n\t\t\t// light arrays cache\n\n\t\t\t_lights = {\n\n\t\t\t\thash: '',\n\n\t\t\t\tambient: [ 0, 0, 0 ],\n\t\t\t\tdirectional: [],\n\t\t\t\tdirectionalShadowMap: [],\n\t\t\t\tdirectionalShadowMatrix: [],\n\t\t\t\tspot: [],\n\t\t\t\tspotShadowMap: [],\n\t\t\t\tspotShadowMatrix: [],\n\t\t\t\trectArea: [],\n\t\t\t\tpoint: [],\n\t\t\t\tpointShadowMap: [],\n\t\t\t\tpointShadowMatrix: [],\n\t\t\t\themi: [],\n\n\t\t\t\tshadows: []\n\n\t\t\t},\n\n\t\t\t// info\n\n\t\t\t_infoMemory = {\n\t\t\t\tgeometries: 0,\n\t\t\t\ttextures: 0\n\t\t\t},\n\n\t\t\t_infoRender = {\n\n\t\t\t\tframe: 0,\n\t\t\t\tcalls: 0,\n\t\t\t\tvertices: 0,\n\t\t\t\tfaces: 0,\n\t\t\t\tpoints: 0\n\n\t\t\t};\n\n\t\tthis.info = {\n\n\t\t\trender: _infoRender,\n\t\t\tmemory: _infoMemory,\n\t\t\tprograms: null\n\n\t\t};\n\n\n\t\t// initialize\n\n\t\tvar _gl;\n\n\t\ttry {\n\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n\t\t\t};\n\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow 'Error creating WebGL context.';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\n\t\t}\n\n\t\tvar extensions = new WebGLExtensions( _gl );\n\n\t\textensions.get( 'WEBGL_depth_texture' );\n\t\textensions.get( 'OES_texture_float' );\n\t\textensions.get( 'OES_texture_float_linear' );\n\t\textensions.get( 'OES_texture_half_float' );\n\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\textensions.get( 'OES_standard_derivatives' );\n\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\n\t\t\tBufferGeometry.MaxIndex = 4294967296;\n\n\t\t}\n\n\t\tvar capabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\tvar state = new WebGLState( _gl, extensions, paramThreeToGL );\n\n\t\tvar properties = new WebGLProperties();\n\t\tvar textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, _infoMemory );\n\t\tvar attributes = new WebGLAttributes( _gl );\n\t\tvar geometries = new WebGLGeometries( _gl, attributes, _infoMemory );\n\t\tvar objects = new WebGLObjects( _gl, geometries, _infoRender );\n\t\tvar programCache = new WebGLPrograms( this, capabilities );\n\t\tvar lightCache = new WebGLLights();\n\t\tvar renderLists = new WebGLRenderLists();\n\n\t\tvar background = new WebGLBackground( this, state, objects, _premultipliedAlpha );\n\t\tvar vr = new WebVRManager( this );\n\n\t\tthis.info.programs = programCache.programs;\n\n\t\tvar bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );\n\t\tvar indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\n\t\t//\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\tfunction setDefaultGLState() {\n\n\t\t\tstate.init();\n\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\t}\n\n\t\tfunction resetGLState() {\n\n\t\t\t_currentProgram = null;\n\t\t\t_currentCamera = null;\n\n\t\t\t_currentGeometryProgram = '';\n\t\t\t_currentMaterialId = - 1;\n\n\t\t\tstate.reset();\n\n\t\t}\n\n\t\tsetDefaultGLState();\n\n\t\tthis.context = _gl;\n\t\tthis.capabilities = capabilities;\n\t\tthis.extensions = extensions;\n\t\tthis.properties = properties;\n\t\tthis.renderLists = renderLists;\n\t\tthis.state = state;\n\t\tthis.vr = vr;\n\n\t\t// shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );\n\n\t\tthis.shadowMap = shadowMap;\n\n\n\t\t// Plugins\n\n\t\tvar spritePlugin = new SpritePlugin( this, sprites );\n\t\tvar lensFlarePlugin = new LensFlarePlugin( this, lensFlares );\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) extension.loseContext();\n\n\t\t};\n\n\t\tthis.getMaxAnisotropy = function () {\n\n\t\t\treturn capabilities.getMaxAnisotropy();\n\n\t\t};\n\n\t\tthis.getPrecision = function () {\n\n\t\t\treturn capabilities.precision;\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) return;\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _width, _height, false );\n\n\t\t};\n\n\t\tthis.getSize = function () {\n\n\t\t\treturn {\n\t\t\t\twidth: _width,\n\t\t\t\theight: _height\n\t\t\t};\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\tvar device = vr.getDevice();\n\n\t\t\tif ( device && device.isPresenting ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_canvas.width = width * _pixelRatio;\n\t\t\t_canvas.height = height * _pixelRatio;\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function () {\n\n\t\t\treturn {\n\t\t\t\twidth: _width * _pixelRatio,\n\t\t\t\theight: _height * _pixelRatio\n\t\t\t};\n\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_pixelRatio = pixelRatio;\n\n\t\t\t_canvas.width = width * pixelRatio;\n\t\t\t_canvas.height = height * pixelRatio;\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\t_viewport.set( x, _height - y - height, width, height );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\t_scissor.set( x, _height - y - height, width, height );\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = background.getClearColor;\n\t\tthis.setClearColor = background.setClearColor;\n\t\tthis.getClearAlpha = background.getClearAlpha;\n\t\tthis.setClearAlpha = background.setClearAlpha;\n\n\t\tthis.clear = function ( color, depth, stencil ) {\n\n\t\t\tvar bits = 0;\n\n\t\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\tthis.clear( color, depth, stencil );\n\n\t\t};\n\n\t\t// Reset\n\n\t\tthis.resetGLState = resetGLState;\n\n\t\tthis.dispose = function () {\n\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\n\t\t\trenderLists.dispose();\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tresetGLState();\n\t\t\tsetDefaultGLState();\n\n\t\t\tproperties.clear();\n\t\t\tobjects.clear();\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tvar material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\tproperties.remove( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReference( material ) {\n\n\t\t\tvar programInfo = properties.get( material ).program;\n\n\t\t\tmaterial.program = undefined;\n\n\t\t\tif ( programInfo !== undefined ) {\n\n\t\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tfunction renderObjectImmediate( object, program, material ) {\n\n\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.renderBufferImmediate = function ( object, program, material ) {\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar buffers = properties.get( object );\n\n\t\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( object.hasPositions ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.position );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasNormals ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\n\t\t\t\tif ( ! material.isMeshPhongMaterial &&\n\t\t\t\t\t! material.isMeshStandardMaterial &&\n\t\t\t\t\t! material.isMeshNormalMaterial &&\n\t\t\t\t\tmaterial.shading === FlatShading ) {\n\n\t\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\n\t\t\t\t\t\tvar array = object.normalArray;\n\n\t\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\n\t\t\t\t\t\tarray[ i + 0 ] = nx;\n\t\t\t\t\t\tarray[ i + 1 ] = ny;\n\t\t\t\t\t\tarray[ i + 2 ] = nz;\n\n\t\t\t\t\t\tarray[ i + 3 ] = nx;\n\t\t\t\t\t\tarray[ i + 4 ] = ny;\n\t\t\t\t\t\tarray[ i + 5 ] = nz;\n\n\t\t\t\t\t\tarray[ i + 6 ] = nx;\n\t\t\t\t\t\tarray[ i + 7 ] = ny;\n\t\t\t\t\t\tarray[ i + 8 ] = nz;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.normal );\n\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasUvs && material.map ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.uv );\n\n\t\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasColors && material.vertexColors !== NoColors ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.color );\n\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n\t\t\tobject.count = 0;\n\n\t\t};\n\n\t\tfunction absNumericalSort( a, b ) {\n\n\t\t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\n\t\t}\n\n\t\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n\t\t\tstate.setMaterial( material );\n\n\t\t\tvar program = setProgram( camera, fog, material, object );\n\t\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + ( material.wireframe === true );\n\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\n\t\t\t\t_currentGeometryProgram = geometryProgram;\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\n\t\t\tif ( morphTargetInfluences !== undefined ) {\n\n\t\t\t\t// TODO Remove allocations\n\n\t\t\t\tvar activeInfluences = [];\n\n\t\t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar influence = morphTargetInfluences[ i ];\n\t\t\t\t\tactiveInfluences.push( [ influence, i ] );\n\n\t\t\t\t}\n\n\t\t\t\tactiveInfluences.sort( absNumericalSort );\n\n\t\t\t\tif ( activeInfluences.length > 8 ) {\n\n\t\t\t\t\tactiveInfluences.length = 8;\n\n\t\t\t\t}\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar influence = activeInfluences[ i ];\n\t\t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\n\t\t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\n\t\t\t\t\t\tvar index = influence[ 1 ];\n\n\t\t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n\t\t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n\t\t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {\n\n\t\t\t\t\tmorphInfluences[ i ] = 0.0;\n\n\t\t\t\t}\n\n\t\t\t\tprogram.getUniforms().setValue( _gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattribute = attributes.get( index );\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( attribute );\n\n\t\t\t}\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\tsetupVertexAttributes( material, program, geometry );\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar dataCount = 0;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdataCount = index.count;\n\n\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\tdataCount = position.count;\n\n\t\t\t}\n\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t\tif ( drawCount === 0 ) return;\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( object.drawMode ) {\n\n\t\t\t\t\t\tcase TrianglesDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TriangleStripDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TriangleFanDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\t\trenderer.setMode( _gl.LINE_LOOP );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t\t}\n\n\t\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n\t\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\n\t\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( startIndex === undefined ) startIndex = 0;\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor ( var name in programAttributes ) {\n\n\t\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, ( startIndex * stride + offset ) * bytesPerElement );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * bytesPerElement );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t}\n\n\t\t// Compile\n\n\t\tthis.compile = function ( scene, camera ) {\n\n\t\t\tlights = [];\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tlights.push( object );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tsetupLights( lights, camera );\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.material ) {\n\n\t\t\t\t\tif ( Array.isArray( object.material ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\n\n\t\t\t\t\t\t\tinitMaterial( object.material[ i ], scene.fog, object );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tinitMaterial( object.material, scene.fog, object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\t// Rendering\n\n\t\tthis.animate = function ( callback ) {\n\n\t\t\tfunction onFrame() {\n\n\t\t\t\tcallback();\n\n\t\t\t\t( vr.getDevice() || window ).requestAnimationFrame( onFrame );\n\n\t\t\t}\n\n\t\t\t( vr.getDevice() || window ).requestAnimationFrame( onFrame );\n\n\t\t};\n\n\t\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n\t\t\tif ( ! ( camera && camera.isCamera ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// reset caching for this frame\n\n\t\t\t_currentGeometryProgram = '';\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t\tif ( vr.enabled ) {\n\n\t\t\t\tcamera = vr.getCamera( camera );\n\n\t\t\t}\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\tlights.length = 0;\n\t\t\tsprites.length = 0;\n\t\t\tlensFlares.length = 0;\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\t\tcurrentRenderList.init();\n\n\t\t\tprojectObject( scene, camera, _this.sortObjects );\n\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\tcurrentRenderList.sort();\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n\t\t\tsetupShadows( lights );\n\n\t\t\tshadowMap.render( scene, camera );\n\n\t\t\tsetupLights( lights, camera );\n\n\t\t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n\t\t\t//\n\n\t\t\t_infoRender.frame ++;\n\t\t\t_infoRender.calls = 0;\n\t\t\t_infoRender.vertices = 0;\n\t\t\t_infoRender.faces = 0;\n\t\t\t_infoRender.points = 0;\n\n\t\t\tif ( renderTarget === undefined ) {\n\n\t\t\t\trenderTarget = null;\n\n\t\t\t}\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t\t//\n\n\t\t\tbackground.render( scene, camera, forceClear );\n\n\t\t\t// render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\t\tif ( scene.overrideMaterial ) {\n\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );\n\t\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );\n\n\t\t\t} else {\n\n\t\t\t\t// opaque pass (front-to-back order)\n\n\t\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );\n\n\t\t\t\t// transparent pass (back-to-front order)\n\n\t\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );\n\n\t\t\t}\n\n\t\t\t// custom render plugins (post pass)\n\n\t\t\tspritePlugin.render( scene, camera );\n\t\t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n\t\t\t}\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t_this.setScissorTest( false );\n\n\t\t\t}\n\n\t\t\tif ( vr.enabled ) {\n\n\t\t\t\tvr.submitFrame();\n\n\t\t\t}\n\n\t\t\t// _gl.finish();\n\n\t\t};\n\n\t\t/*\n\t\t// TODO Duplicated code (Frustum)\n\n\t\tvar _sphere = new Sphere();\n\n\t\tfunction isObjectViewable( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy( geometry.boundingSphere ).\n\t\t\tapplyMatrix4( object.matrixWorld );\n\n\t\t\treturn isSphereViewable( _sphere );\n\n\t\t}\n\n\t\tfunction isSpriteViewable( sprite ) {\n\n\t\t\t_sphere.center.set( 0, 0, 0 );\n\t\t\t_sphere.radius = 0.7071067811865476;\n\t\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn isSphereViewable( _sphere );\n\n\t\t}\n\n\t\tfunction isSphereViewable( sphere ) {\n\n\t\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n\t\t\tvar numPlanes = _clipping.numPlanes;\n\n\t\t\tif ( numPlanes === 0 ) return true;\n\n\t\t\tvar planes = _this.clippingPlanes,\n\n\t\t\t\tcenter = sphere.center,\n\t\t\t\tnegRad = - sphere.radius,\n\t\t\t\ti = 0;\n\n\t\t\tdo {\n\n\t\t\t\t// out when deeper than radius in the negative halfspace\n\t\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n\t\t\t} while ( ++ i !== numPlanes );\n\n\t\t\treturn true;\n\n\t\t}\n\t\t*/\n\n\t\tfunction projectObject( object, camera, sortObjects ) {\n\n\t\t\tif ( ! object.visible ) return;\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tlights.push( object );\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\t\tsprites.push( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isLensFlare ) {\n\n\t\t\t\t\tlensFlares.push( object );\n\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, _vector3.z, null );\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\tobject.skeleton.update();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera, sortObjects );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\t\tvar bounds = camera2.bounds;\n\n\t\t\t\t\t\t\tvar x = bounds.x * _width;\n\t\t\t\t\t\t\tvar y = bounds.y * _height;\n\t\t\t\t\t\t\tvar width = bounds.z * _width;\n\t\t\t\t\t\t\tvar height = bounds.w * _height;\n\n\t\t\t\t\t\t\t_this.setViewport( x, y, width, height );\n\t\t\t\t\t\t\t_this.setScissor( x, y, width, height );\n\t\t\t\t\t\t\t_this.setScissorTest( true );\n\n\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\n\t\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\t\tstate.setMaterial( material );\n\n\t\t\t\tvar program = setProgram( camera, scene.fog, material, object );\n\n\t\t\t\t_currentGeometryProgram = '';\n\n\t\t\t\trenderObjectImmediate( object, program, material );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\n\t\t}\n\n\t\tfunction initMaterial( material, fog, object ) {\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tvar parameters = programCache.getParameters(\n\t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, _clipping.numIntersection, object );\n\n\t\t\tvar code = programCache.getProgramCode( material, parameters );\n\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t} else if ( program.code !== code ) {\n\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\n\t\t\t}\n\n\t\t\tif ( programChange ) {\n\n\t\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\n\t\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.onBeforeCompile( materialProperties.shader );\n\n\t\t\t\tprogram = programCache.acquireProgram( material, materialProperties.shader, parameters, code );\n\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterial.program = program;\n\n\t\t\t}\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.shader.uniforms;\n\n\t\t\tif ( ! material.isShaderMaterial &&\n\t\t\t\t! material.isRawShaderMaterial ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t\t}\n\n\t\t\tmaterialProperties.fog = fog;\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.lightsHash = _lights.hash;\n\n\t\t\tif ( material.lights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n\t\t\t\tuniforms.directionalLights.value = _lights.directional;\n\t\t\t\tuniforms.spotLights.value = _lights.spot;\n\t\t\t\tuniforms.rectAreaLights.value = _lights.rectArea;\n\t\t\t\tuniforms.pointLights.value = _lights.point;\n\t\t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\t\tuniformsList =\n\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\t}\n\n\t\tfunction setProgram( camera, fog, material, object ) {\n\n\t\t\t_usedTextureUnits = 0;\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tif ( _clippingEnabled ) {\n\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\t_clipping.setState(\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.needsUpdate === false ) {\n\n\t\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.needsUpdate ) {\n\n\t\t\t\tinitMaterial( material, fog, object );\n\t\t\t\tmaterial.needsUpdate = false;\n\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\n\t\t\tvar program = materialProperties.program,\n\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.shader.uniforms;\n\n\t\t\tif ( program.id !== _currentProgram ) {\n\n\t\t\t\t_gl.useProgram( program.program );\n\t\t\t\t_currentProgram = program.id;\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// Avoid unneeded uniform updates per ArrayCamera's sub-camera\n\n\t\t\t\tif ( _currentCamera !== ( _currentArrayCamera || camera ) ) {\n\n\t\t\t\t\t_currentCamera = ( _currentArrayCamera || camera );\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// not sure why, but otherwise weird things happen\n\n\t\t\tif ( material.skinning ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\t\tsize = _Math.nextPowerOfTwo( Math.ceil( size ) );\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\n\n\t\t\t\tif ( material.lights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isMeshNormalMaterial ||\n\t\t\t\t\tmaterial.isMeshDepthMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh single material specific uniforms\n\n\t\t\t\tif ( material.isLineBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n\t\t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n\t\t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\t\trefreshUniformsNormal( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t\t// RectAreaLight Texture\n\t\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\t\tif ( m_uniforms.ltcMat !== undefined ) m_uniforms.ltcMat.value = UniformsLib.LTC_MAT_TEXTURE;\n\t\t\t\tif ( m_uniforms.ltcMag !== undefined ) m_uniforms.ltcMag.value = UniformsLib.LTC_MAG_TEXTURE;\n\n\t\t\t\tWebGLUniforms.upload(\n\t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\n\t\t\t}\n\n\n\t\t\t// common matrices\n\n\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// Uniforms (refresh uniforms objects)\n\n\t\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tuniforms.diffuse.value = material.color;\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t}\n\n\t\t\tuniforms.map.value = material.map;\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. normal map\n\t\t\t// 4. bump map\n\t\t\t// 5. alpha map\n\t\t\t// 6. emissive map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t} else if ( material.roughnessMap ) {\n\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t\t} else if ( material.metalnessMap ) {\n\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tvar offset = uvScaleMap.offset;\n\t\t\t\tvar repeat = uvScaleMap.repeat;\n\n\t\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t\t}\n\n\t\t\tuniforms.envMap.value = material.envMap;\n\n\t\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t}\n\n\t\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t}\n\n\t\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\n\t\t}\n\n\t\tfunction refreshUniformsPoints( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\t\tuniforms.scale.value = _height * 0.5;\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tvar offset = material.map.offset;\n\t\t\t\tvar repeat = material.map.repeat;\n\n\t\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsFog( uniforms, fog ) {\n\n\t\t\tuniforms.fogColor.value = fog.color;\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\t\tuniforms.specular.value = material.specular;\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t\tif ( material.gradientMap ) {\n\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif ( material.roughnessMap ) {\n\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.metalnessMap ) {\n\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap ) {\n\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhysical( uniforms, material ) {\n\n\t\t\tuniforms.clearCoat.value = material.clearCoat;\n\t\t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t}\n\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\t// Lighting\n\n\t\tfunction setupShadows( lights ) {\n\n\t\t\tvar lightShadowsLength = 0;\n\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t_lights.shadows[ lightShadowsLength ] = light;\n\t\t\t\t\tlightShadowsLength ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_lights.shadows.length = lightShadowsLength;\n\n\t\t}\n\n\t\tfunction setupLights( lights, camera ) {\n\n\t\t\tvar l, ll, light, shadow,\n\t\t\t\tr = 0, g = 0, b = 0,\n\t\t\t\tcolor,\n\t\t\t\tintensity,\n\t\t\t\tdistance,\n\t\t\t\tshadowMap,\n\n\t\t\t\tviewMatrix = camera.matrixWorldInverse,\n\n\t\t\t\tdirectionalLength = 0,\n\t\t\t\tpointLength = 0,\n\t\t\t\tspotLength = 0,\n\t\t\t\trectAreaLength = 0,\n\t\t\t\themiLength = 0;\n\n\t\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\t\tlight = lights[ l ];\n\n\t\t\t\tcolor = light.color;\n\t\t\t\tintensity = light.intensity;\n\t\t\t\tdistance = light.distance;\n\n\t\t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\n\t\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tshadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t\t\t\t\t_lights.directional[ directionalLength ] = uniforms;\n\n\t\t\t\t\tdirectionalLength ++;\n\n\t\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tshadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t\t\t\t\t_lights.spot[ spotLength ] = uniforms;\n\n\t\t\t\t\tspotLength ++;\n\n\t\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\t\t// (a) intensity controls irradiance of entire light\n\t\t\t\t\tuniforms.color\n\t\t\t\t\t\t.copy( color )\n\t\t\t\t\t\t.multiplyScalar( intensity / ( light.width * light.height ) );\n\n\t\t\t\t\t// (b) intensity controls the radiance per light area\n\t\t\t\t\t// uniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\t\t_matrix42.identity();\n\t\t\t\t\t_matrix4.copy( light.matrixWorld );\n\t\t\t\t\t_matrix4.premultiply( viewMatrix );\n\t\t\t\t\t_matrix42.extractRotation( _matrix4 );\n\n\t\t\t\t\tuniforms.halfWidth.set( light.width * 0.5,                0.0, 0.0 );\n\t\t\t\t\tuniforms.halfHeight.set(              0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4( _matrix42 );\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4( _matrix42 );\n\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\t\t_lights.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\t\trectAreaLength ++;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tshadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\t\t\t\t\t_lights.point[ pointLength ] = uniforms;\n\n\t\t\t\t\tpointLength ++;\n\n\t\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t\t_lights.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\t\themiLength ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_lights.ambient[ 0 ] = r;\n\t\t\t_lights.ambient[ 1 ] = g;\n\t\t\t_lights.ambient[ 2 ] = b;\n\n\t\t\t_lights.directional.length = directionalLength;\n\t\t\t_lights.spot.length = spotLength;\n\t\t\t_lights.rectArea.length = rectAreaLength;\n\t\t\t_lights.point.length = pointLength;\n\t\t\t_lights.hemi.length = hemiLength;\n\n\t\t\t// TODO (sam-g-steel) why aren't we using join\n\t\t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + rectAreaLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\n\t\t}\n\n\t\t// GL state setting\n\n\t\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\n\t\t\tstate.setCullFace( cullFace );\n\t\t\tstate.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );\n\n\t\t};\n\n\t\t// Textures\n\n\t\tfunction allocTextureUnit() {\n\n\t\t\tvar textureUnit = _usedTextureUnits;\n\n\t\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n\t\t\t}\n\n\t\t\t_usedTextureUnits += 1;\n\n\t\t\treturn textureUnit;\n\n\t\t}\n\n\t\tthis.allocTextureUnit = allocTextureUnit;\n\n\t\t// this.setTexture2D = setTexture2D;\n\t\tthis.setTexture2D = ( function () {\n\n\t\t\tvar warned = false;\n\n\t\t\t// backwards compatibility: peel texture.texture\n\t\t\treturn function setTexture2D( texture, slot ) {\n\n\t\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\t\twarned = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture = texture.texture;\n\n\t\t\t\t}\n\n\t\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.setTexture = ( function () {\n\n\t\t\tvar warned = false;\n\n\t\t\treturn function setTexture( texture, slot ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.setTextureCube = ( function () {\n\n\t\t\tvar warned = false;\n\n\t\t\treturn function setTextureCube( texture, slot ) {\n\n\t\t\t\t// backwards compatibility: peel texture.texture\n\t\t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\n\t\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\t\twarned = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture = texture.texture;\n\n\t\t\t\t}\n\n\t\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t\t\t// TODO: unify these code paths\n\t\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\t\ttextures.setTextureCube( texture, slot );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n\t\t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t\t\tvar framebuffer;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\n\t\t\t\t}\n\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = null;\n\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\n\t\t\t}\n\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t\t}\n\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tstate.viewport( _currentViewport );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\t\trestore = true;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t\t! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t\t! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Map three.js constants to WebGL constants\n\n\t\tfunction paramThreeToGL( p ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( p === RepeatWrapping ) return _gl.REPEAT;\n\t\t\tif ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n\t\t\tif ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\n\t\t\tif ( p === NearestFilter ) return _gl.NEAREST;\n\t\t\tif ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n\t\t\tif ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\n\t\t\tif ( p === LinearFilter ) return _gl.LINEAR;\n\t\t\tif ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n\t\t\tif ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\n\t\t\tif ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n\t\t\tif ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n\t\t\tif ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n\t\t\tif ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\n\t\t\tif ( p === ByteType ) return _gl.BYTE;\n\t\t\tif ( p === ShortType ) return _gl.SHORT;\n\t\t\tif ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n\t\t\tif ( p === IntType ) return _gl.INT;\n\t\t\tif ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;\n\t\t\tif ( p === FloatType ) return _gl.FLOAT;\n\n\t\t\tif ( p === HalfFloatType ) {\n\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\t\tif ( extension !== null ) return extension.HALF_FLOAT_OES;\n\n\t\t\t}\n\n\t\t\tif ( p === AlphaFormat ) return _gl.ALPHA;\n\t\t\tif ( p === RGBFormat ) return _gl.RGB;\n\t\t\tif ( p === RGBAFormat ) return _gl.RGBA;\n\t\t\tif ( p === LuminanceFormat ) return _gl.LUMINANCE;\n\t\t\tif ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n\t\t\tif ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;\n\t\t\tif ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;\n\n\t\t\tif ( p === AddEquation ) return _gl.FUNC_ADD;\n\t\t\tif ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;\n\t\t\tif ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\n\t\t\tif ( p === ZeroFactor ) return _gl.ZERO;\n\t\t\tif ( p === OneFactor ) return _gl.ONE;\n\t\t\tif ( p === SrcColorFactor ) return _gl.SRC_COLOR;\n\t\t\tif ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n\t\t\tif ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;\n\t\t\tif ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n\t\t\tif ( p === DstAlphaFactor ) return _gl.DST_ALPHA;\n\t\t\tif ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\n\t\t\tif ( p === DstColorFactor ) return _gl.DST_COLOR;\n\t\t\tif ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n\t\t\tif ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\t\tif ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t}\n\n\t\t\tif ( p === MinEquation || p === MaxEquation ) {\n\n\t\t\t\textension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n\t\t\t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\t\tif ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction FogExp2 ( color, density ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n\t}\n\n\tFogExp2.prototype.isFogExp2 = true;\n\n\tFogExp2.prototype.clone = function () {\n\n\t\treturn new FogExp2( this.color.getHex(), this.density );\n\n\t};\n\n\tFogExp2.prototype.toJSON = function ( meta ) {\n\n\t\treturn {\n\t\t\ttype: 'FogExp2',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tdensity: this.density\n\t\t};\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Fog ( color, near, far ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\n\t}\n\n\tFog.prototype.isFog = true;\n\n\tFog.prototype.clone = function () {\n\n\t\treturn new Fog( this.color.getHex(), this.near, this.far );\n\n\t};\n\n\tFog.prototype.toJSON = function ( meta ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Scene () {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.fog = null;\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t}\n\n\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Scene,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\t\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n\t\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction LensFlare( texture, size, distance, blending, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.lensFlares = [];\n\n\t\tthis.positionScreen = new Vector3();\n\t\tthis.customUpdateCallback = undefined;\n\n\t\tif ( texture !== undefined ) {\n\n\t\t\tthis.add( texture, size, distance, blending, color );\n\n\t\t}\n\n\t}\n\n\tLensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LensFlare,\n\n\t\tisLensFlare: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.positionScreen.copy( source.positionScreen );\n\t\t\tthis.customUpdateCallback = source.customUpdateCallback;\n\n\t\t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( texture, size, distance, blending, color, opacity ) {\n\n\t\t\tif ( size === undefined ) size = - 1;\n\t\t\tif ( distance === undefined ) distance = 0;\n\t\t\tif ( opacity === undefined ) opacity = 1;\n\t\t\tif ( color === undefined ) color = new Color( 0xffffff );\n\t\t\tif ( blending === undefined ) blending = NormalBlending;\n\n\t\t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\n\t\t\tthis.lensFlares.push( {\n\t\t\t\ttexture: texture,\t// THREE.Texture\n\t\t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n\t\t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n\t\t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n\t\t\t\tscale: 1, \t\t// scale\n\t\t\t\trotation: 0, \t\t// rotation\n\t\t\t\topacity: opacity,\t// opacity\n\t\t\t\tcolor: color,\t\t// color\n\t\t\t\tblending: blending\t// blending\n\t\t\t} );\n\n\t\t},\n\n\t\t/*\n\t\t * Update lens flares update positions on all flares based on the screen position\n\t\t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n\t\t */\n\n\t\tupdateLensFlares: function () {\n\n\t\t\tvar f, fl = this.lensFlares.length;\n\t\t\tvar flare;\n\t\t\tvar vecX = - this.positionScreen.x * 2;\n\t\t\tvar vecY = - this.positionScreen.y * 2;\n\n\t\t\tfor ( f = 0; f < fl; f ++ ) {\n\n\t\t\t\tflare = this.lensFlares[ f ];\n\n\t\t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n\t\t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\n\t\t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n\t\t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *\tuvOffset: new THREE.Vector2(),\n\t *\tuvScale: new THREE.Vector2()\n\t * }\n\t */\n\n\tfunction SpriteMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\t\tthis.map = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.map = source.map;\n\n\t\tthis.rotation = source.rotation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Sprite( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t}\n\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Sprite,\n\n\t\tisSprite: true,\n\n\t\traycast: ( function () {\n\n\t\t\tvar intersectPoint = new Vector3();\n\t\t\tvar worldPosition = new Vector3();\n\t\t\tvar worldScale = new Vector3();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tworldPosition.setFromMatrixPosition( this.matrixWorld );\n\t\t\t\traycaster.ray.closestPointToPoint( worldPosition, intersectPoint );\n\n\t\t\t\tworldScale.setFromMatrixScale( this.matrixWorld );\n\t\t\t\tvar guessSizeSq = worldScale.x * worldScale.y / 4;\n\n\t\t\t\tif ( worldPosition.distanceToSquared( intersectPoint ) > guessSizeSq ) return;\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\tface: null,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LOD() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LOD,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddLevel: function ( object, distance ) {\n\n\t\t\tif ( distance === undefined ) distance = 0;\n\n\t\t\tdistance = Math.abs( distance );\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\t\tthis.add( object );\n\n\t\t},\n\n\t\tgetObjectForDistance: function ( distance ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t},\n\n\t\traycast: ( function () {\n\n\t\t\tvar matrixPosition = new Vector3();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tupdate: function () {\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\treturn function update( camera ) {\n\n\t\t\t\tvar levels = this.levels;\n\n\t\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\t\tvar distance = v1.distanceTo( v2 );\n\n\t\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.levels = [];\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author michael guerrero / http://realitymeltdown.com\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Skeleton( bones, boneInverses ) {\n\n\t\t// copy the bone array\n\n\t\tbones = bones || [];\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\t\t// use the supplied bone inverses or calculate the inverses\n\n\t\tif ( boneInverses === undefined ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Skeleton.prototype, {\n\n\t\tcalculateInverses: function () {\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push( inverse );\n\n\t\t\t}\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tvar bone, i, il;\n\n\t\t\t// recover the bind-time world matrices\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// compute the local matrices, positions, rotations and scales\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: ( function () {\n\n\t\t\tvar offsetMatrix = new Matrix4();\n\t\t\tvar identityMatrix = new Matrix4();\n\n\t\t\treturn function update() {\n\n\t\t\t\tvar bones = this.bones;\n\t\t\t\tvar boneInverses = this.boneInverses;\n\t\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\t\tvar boneTexture = this.boneTexture;\n\n\t\t\t\t// flatten bone matrices to array\n\n\t\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;\n\n\t\t\t\t\toffsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t\t\toffsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( boneTexture !== undefined ) {\n\n\t\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tclone: function () {\n\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Bone() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Bone,\n\n\t\tisBone: true\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction SkinnedMesh( geometry, material ) {\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t\tvar bones = this.initBones();\n\t\tvar skeleton = new Skeleton( bones );\n\n\t\tthis.bind( skeleton, this.matrixWorld );\n\n\t\tthis.normalizeSkinWeights();\n\n\t}\n\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: SkinnedMesh,\n\n\t\tisSkinnedMesh: true,\n\n\t\tinitBones: function () {\n\n\t\t\tvar bones = [], bone, gbone;\n\t\t\tvar i, il;\n\n\t\t\tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n\t\t\t\t// first, create array of 'Bone' objects from geometry data\n\n\t\t\t\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tgbone = this.geometry.bones[ i ];\n\n\t\t\t\t\t// create new 'Bone' object\n\n\t\t\t\t\tbone = new Bone();\n\t\t\t\t\tbones.push( bone );\n\n\t\t\t\t\t// apply values\n\n\t\t\t\t\tbone.name = gbone.name;\n\t\t\t\t\tbone.position.fromArray( gbone.pos );\n\t\t\t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t\t\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n\t\t\t\t}\n\n\t\t\t\t// second, create bone hierarchy\n\n\t\t\t\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tgbone = this.geometry.bones[ i ];\n\n\t\t\t\t\tif ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {\n\n\t\t\t\t\t\t// subsequent bones in the hierarchy\n\n\t\t\t\t\t\tbones[ gbone.parent ].add( bones[ i ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// topmost bone, immediate child of the skinned mesh\n\n\t\t\t\t\t\tthis.add( bones[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// now the bones are part of the scene graph and children of the skinned mesh.\n\t\t\t// let's update the corresponding matrices\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn bones;\n\n\t\t},\n\n\t\tbind: function ( skeleton, bindMatrix ) {\n\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif ( bindMatrix === undefined ) {\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tthis.skeleton.pose();\n\n\t\t},\n\n\t\tnormalizeSkinWeights: function () {\n\n\t\t\tvar scale, i;\n\n\t\t\tif ( this.geometry && this.geometry.isGeometry ) {\n\n\t\t\t\tfor ( i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n\t\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n\t\t\t\t\tscale = 1.0 / sw.lengthManhattan();\n\n\t\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\t\tsw.multiplyScalar( scale );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( this.geometry && this.geometry.isBufferGeometry ) {\n\n\t\t\t\tvar vec = new Vector4();\n\n\t\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\t\tfor ( i = 0; i < skinWeight.count; i ++ ) {\n\n\t\t\t\t\tvec.x = skinWeight.getX( i );\n\t\t\t\t\tvec.y = skinWeight.getY( i );\n\t\t\t\t\tvec.z = skinWeight.getZ( i );\n\t\t\t\t\tvec.w = skinWeight.getW( i );\n\n\t\t\t\t\tscale = 1.0 / vec.lengthManhattan();\n\n\t\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\t\tvec.multiplyScalar( scale );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t\t}\n\n\t\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *  linecap: \"round\",\n\t *  linejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Line( geometry, material, mode ) {\n\n\t\tif ( mode === 1 ) {\n\n\t\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t\t\treturn new LineSegments( geometry, material );\n\n\t\t}\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\t}\n\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Line,\n\n\t\tisLine: true,\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\tvar ray = new Ray();\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar precision = raycaster.linePrecision;\n\t\t\t\tvar precisionSq = precision * precision;\n\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\tvar vStart = new Vector3();\n\t\t\t\tvar vEnd = new Vector3();\n\t\t\t\tvar interSegment = new Vector3();\n\t\t\t\tvar interRay = new Vector3();\n\t\t\t\tvar step = (this && this.isLineSegments) ? 2 : 1;\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LineSegments( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineSegments,\n\n\t\tisLineSegments: true\n\n\t} );\n\n\t/**\n\t * @author mgreter / http://github.com/mgreter\n\t */\n\n\tfunction LineLoop( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineLoop,\n\n\t\tisLineLoop: true,\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  size: <float>,\n\t *  sizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tPointsMaterial.prototype = Object.create( Material.prototype );\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Points( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\n\t}\n\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Points,\n\n\t\tisPoints: true,\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\tvar ray = new Ray();\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar object = this;\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\t\t\t\tsphere.radius += threshold;\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\t\tvar position = new Vector3();\n\n\t\t\t\tfunction testPoint( point, index ) {\n\n\t\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n\t\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n\t\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tobject: object\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\t\ttestPoint( position, a );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\t\ttestPoint( position, i );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\ttestPoint( vertices[ i ], i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Group() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Group';\n\n\t}\n\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Group\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.generateMipmaps = false;\n\n\t\tvar scope = this;\n\n\t\tfunction update() {\n\n\t\t\trequestAnimationFrame( update );\n\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\t\tscope.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tupdate();\n\n\t}\n\n\tVideoTexture.prototype = Object.create( Texture.prototype );\n\tVideoTexture.prototype.constructor = VideoTexture;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\n\t/**\n\t * @author Matt DesLauriers / @mattdesl\n\t * @author atix / arthursilber.de\n\t */\n\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) type = UnsignedShortType;\n\t\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\tDepthTexture.prototype = Object.create( Texture.prototype );\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WireframeGeometry( geometry ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar i, j, l, o, ol;\n\t\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\t\tvar vertex;\n\n\t\t// different logic for Geometry and BufferGeometry\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( key in edges ) {\n\n\t\t\t\te = edges[ key ];\n\n\t\t\t\tvertex = geometry.vertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\tvar position, indices, groups;\n\t\t\tvar group, start, count;\n\t\t\tvar index1, index2;\n\n\t\t\tvertex = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\t\t\t\tindices = geometry.index;\n\t\t\t\tgroups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tgroup = groups[ o ];\n\n\t\t\t\t\tstart = group.start;\n\t\t\t\t\tcount = group.count;\n\n\t\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tedge1 = indices.getX( i + j );\n\t\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\n\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// generate vertices\n\n\t\t\t\tfor ( key in edges ) {\n\n\t\t\t\t\te = edges[ key ];\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\n\t\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tindex1 = 3 * i + j;\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n\t */\n\n\t// ParametricGeometry\n\n\tfunction ParametricGeometry( func, slices, stacks ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ParametricGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\t// ParametricBufferGeometry\n\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ParametricBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar EPS = 0.00001;\n\n\t\tvar normal = new Vector3();\n\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\n\t\tvar pu = new Vector3(), pv = new Vector3();\n\n\t\tvar i, j;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\t\tvar u = j / slices;\n\n\t\t\t\t// vertex\n\n\t\t\t\tp0 = func( u, v, p0 );\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t\t// normal\n\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\t\tp1 = func( u - EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp1 = func( u + EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\t\tp1 = func( u, v - EPS, p1 );\n\t\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp1 = func( u, v + EPS, p1 );\n\t\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, v );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\t\tvar a = i * sliceCount + j;\n\t\t\t\tvar b = i * sliceCount + j + 1;\n\t\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\n\t\t\t\tvar d = ( i + 1 ) * sliceCount + j;\n\n\t\t\t\t// faces one and two\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n\t/**\n\t * @author clockworkgeek / https://github.com/clockworkgeek\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PolyhedronGeometry\n\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n\t// PolyhedronBufferGeometry\n\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tdetail = detail || 0;\n\n\t\t// default buffer data\n\n\t\tvar vertexBuffer = [];\n\t\tvar uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tappplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tvar cols = Math.pow( 2, detail );\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tvar v = [];\n\n\t\t\tvar i, j;\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tvar rows = cols - i;\n\n\t\t\t\tfor ( j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction appplyRadius( radius ) {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tvar stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\tvar centroid = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tvar azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TetrahedronGeometry\n\n\tfunction TetrahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n\t// TetrahedronBufferGeometry\n\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// OctahedronGeometry\n\n\tfunction OctahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n\t// OctahedronBufferGeometry\n\n\tfunction OctahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// IcosahedronGeometry\n\n\tfunction IcosahedronGeometry( radius, detail ) {\n\n\t \tGeometry.call( this );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n\t// IcosahedronBufferGeometry\n\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tvar vertices = [\n\t\t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n\t\t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n\t\t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n\t\t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n\t\t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n\t\t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n\t/**\n\t * @author Abe Pazos / https://hamoid.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// DodecahedronGeometry\n\n\tfunction DodecahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n\t// DodecahedronBufferGeometry\n\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tvar r = 1 / t;\n\n\t\tvar vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,    - 1, - 1,  1,\n\t\t\t- 1,  1, - 1,    - 1,  1,  1,\n\t\t\t  1, - 1, - 1,     1, - 1,  1,\n\t\t\t  1,  1, - 1,     1,  1,  1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t 0, - r, - t,     0, - r,  t,\n\t\t\t 0,  r, - t,     0,  r,  t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t,  0,    - r,  t,  0,\n\t\t\t r, - t,  0,     r,  t,  0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t,  0, - r,     t,  0, - r,\n\t\t\t- t,  0,  r,     t,  0,  r\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n\t\t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n\t\t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n\t\t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n\t\t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n\t\t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n\t\t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n\t\t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n\t\t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n\t\t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n\t\t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n\t\t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\n\t * @author WestLangley / https://github.com/WestLangley\n\t * @author zz85 / https://github.com/zz85\n\t * @author miningold / https://github.com/miningold\n\t * @author jonobr1 / https://github.com/jonobr1\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t */\n\n\t// TubeGeometry\n\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tif ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );\n\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = bufferGeometry.tangents;\n\t\tthis.normals = bufferGeometry.normals;\n\t\tthis.binormals = bufferGeometry.binormals;\n\n\t\t// create geometry\n\n\t\tthis.fromBufferGeometry( bufferGeometry );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\n\tTubeGeometry.prototype.constructor = TubeGeometry;\n\n\t// TubeBufferGeometry\n\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TubeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\ttubularSegments = tubularSegments || 64;\n\t\tradius = radius || 1;\n\t\tradialSegments = radialSegments || 8;\n\t\tclosed = closed || false;\n\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\tvar i, j;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tvar P = path.getPointAt( i / tubularSegments );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tvar N = frames.normals[ i ];\n\t\t\tvar B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tvar sin =   Math.sin( v );\n\t\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * based on http://www.blackpawn.com/texts/pqtorus/\n\t */\n\n\t// TorusKnotGeometry\n\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tif ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n\t// TorusKnotBufferGeometry\n\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tradius = radius || 100;\n\t\ttube = tube || 40;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\tp = p || 2;\n\t\tq = q || 3;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, j;\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar P1 = new Vector3();\n\t\tvar P2 = new Vector3();\n\n\t\tvar B = new Vector3();\n\t\tvar T = new Vector3();\n\t\tvar N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tvar cu = Math.cos( u );\n\t\t\tvar su = Math.sin( u );\n\t\t\tvar quOverP = q / p * u;\n\t\t\tvar cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TorusGeometry\n\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusGeometry.prototype.constructor = TorusGeometry;\n\n\t// TorusBufferGeometry\n\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradius = radius || 100;\n\t\ttube = tube || 40;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\tarc = arc || Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar center = new Vector3();\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tvar ShapeUtils = {\n\n\t\t// calculate area of the contour polygon\n\n\t\tarea: function ( contour ) {\n\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\n\t\t},\n\n\t\ttriangulate: ( function () {\n\n\t\t\t/**\n\t\t\t * This code is a quick port of code written in C++ which was submitted to\n\t\t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n\t\t\t * See original code and more information here:\n\t\t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n\t\t\t *\n\t\t\t * ported to actionscript by Zevan Rosser\n\t\t\t * www.actionsnippet.com\n\t\t\t *\n\t\t\t * ported to javascript by Joshua Koo\n\t\t\t * http://www.lab4games.net/zz85/blog\n\t\t\t *\n\t\t\t */\n\n\t\t\tfunction snip( contour, u, v, w, n, verts ) {\n\n\t\t\t\tvar p;\n\t\t\t\tvar ax, ay, bx, by;\n\t\t\t\tvar cx, cy, px, py;\n\n\t\t\t\tax = contour[ verts[ u ] ].x;\n\t\t\t\tay = contour[ verts[ u ] ].y;\n\n\t\t\t\tbx = contour[ verts[ v ] ].x;\n\t\t\t\tby = contour[ verts[ v ] ].y;\n\n\t\t\t\tcx = contour[ verts[ w ] ].x;\n\t\t\t\tcy = contour[ verts[ w ] ].y;\n\n\t\t\t\tif ( ( bx - ax ) * ( cy - ay ) - ( by - ay ) * ( cx - ax ) <= 0 ) return false;\n\n\t\t\t\tvar aX, aY, bX, bY, cX, cY;\n\t\t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n\t\t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\n\t\t\t\taX = cx - bx;  aY = cy - by;\n\t\t\t\tbX = ax - cx;  bY = ay - cy;\n\t\t\t\tcX = bx - ax;  cY = by - ay;\n\n\t\t\t\tfor ( p = 0; p < n; p ++ ) {\n\n\t\t\t\t\tpx = contour[ verts[ p ] ].x;\n\t\t\t\t\tpy = contour[ verts[ p ] ].y;\n\n\t\t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n\t\t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n\t\t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\n\t\t\t\t\tapx = px - ax;  apy = py - ay;\n\t\t\t\t\tbpx = px - bx;  bpy = py - by;\n\t\t\t\t\tcpx = px - cx;  cpy = py - cy;\n\n\t\t\t\t\t// see if p is inside triangle abc\n\n\t\t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n\t\t\t\t\tcCROSSap = cX * apy - cY * apx;\n\t\t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\n\t\t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// takes in an contour array and returns\n\n\t\t\treturn function triangulate( contour, indices ) {\n\n\t\t\t\tvar n = contour.length;\n\n\t\t\t\tif ( n < 3 ) return null;\n\n\t\t\t\tvar result = [],\n\t\t\t\t\tverts = [],\n\t\t\t\t\tvertIndices = [];\n\n\t\t\t\t/* we want a counter-clockwise polygon in verts */\n\n\t\t\t\tvar u, v, w;\n\n\t\t\t\tif ( ShapeUtils.area( contour ) > 0.0 ) {\n\n\t\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\n\t\t\t\t}\n\n\t\t\t\tvar nv = n;\n\n\t\t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\n\t\t\t\tvar count = 2 * nv;   /* error detection */\n\n\t\t\t\tfor ( v = nv - 1; nv > 2; ) {\n\n\t\t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\n\t\t\t\t\tif ( ( count -- ) <= 0 ) {\n\n\t\t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\n\t\t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n\t\t\t\t\t\t//return null;\n\t\t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n\t\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\n\t\t\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\t\t\treturn result;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\n\t\t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n\t\t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n\t\t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\n\t\t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\n\t\t\t\t\t\tvar a, b, c, s, t;\n\n\t\t\t\t\t\t/* true names of the vertices */\n\n\t\t\t\t\t\ta = verts[ u ];\n\t\t\t\t\t\tb = verts[ v ];\n\t\t\t\t\t\tc = verts[ w ];\n\n\t\t\t\t\t\t/* output Triangle */\n\n\t\t\t\t\t\tresult.push( [ contour[ a ],\n\t\t\t\t\t\t\tcontour[ b ],\n\t\t\t\t\t\t\tcontour[ c ] ] );\n\n\n\t\t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\n\t\t\t\t\t\t/* remove v from the remaining polygon */\n\n\t\t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\n\t\t\t\t\t\t\tverts[ s ] = verts[ t ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnv --;\n\n\t\t\t\t\t\t/* reset error detection counter */\n\n\t\t\t\t\t\tcount = 2 * nv;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\treturn result;\n\n\t\t\t}\n\n\t\t} )(),\n\n\t\ttriangulateShape: function ( contour, holes ) {\n\n\t\t\tfunction removeDupEndPts(points) {\n\n\t\t\t\tvar l = points.length;\n\n\t\t\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\t\tpoints.pop();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tremoveDupEndPts( contour );\n\t\t\tholes.forEach( removeDupEndPts );\n\n\t\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\n\t\t\t\t// inOtherPt needs to be collinear to the inSegment\n\t\t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\n\t\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\n\t\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\n\t\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\n\t\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n\t\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\n\t\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n\t\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\n\t\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n\t\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\n\t\t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\n\t\t\t\t\tvar perpSeg2;\n\t\t\t\t\tif ( limit > 0 ) {\n\n\t\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n\t\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n\t\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// i.e. to reduce rounding errors\n\t\t\t\t\t// intersection at endpoint of segment#1?\n\t\t\t\t\tif ( perpSeg2 === 0 ) {\n\n\t\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( perpSeg2 === limit ) {\n\n\t\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\t\treturn [ inSeg1Pt2 ];\n\n\t\t\t\t\t}\n\t\t\t\t\t// intersection at endpoint of segment#2?\n\t\t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n\t\t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\n\t\t\t\t\t// return real intersection point\n\t\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n\t\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n\t\t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n\t\t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\n\t\t\t\t\t// they are collinear or degenerate\n\t\t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n\t\t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n\t\t\t\t\t// both segments are points\n\t\t\t\t\tif ( seg1Pt && seg2Pt ) {\n\n\t\t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n\t\t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\n\t\t\t\t\t}\n\t\t\t\t\t// segment#1  is a single point\n\t\t\t\t\tif ( seg1Pt ) {\n\n\t\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t\t}\n\t\t\t\t\t// segment#2  is a single point\n\t\t\t\t\tif ( seg2Pt ) {\n\n\t\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n\t\t\t\t\t\treturn [ inSeg2Pt1 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// they are collinear segments, which might overlap\n\t\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n\t\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n\t\t\t\t\tif ( seg1dx !== 0 ) {\n\n\t\t\t\t\t\t// the segments are NOT on a vertical line\n\t\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// the segments are on a vertical line\n\t\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\n\t\t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n\t\t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\n\t\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\t\treturn [ seg2min ];\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n\t\t\t\t\t\treturn\t[ seg2min, seg2max ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n\t\t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\n\t\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\t\treturn [ seg1min ];\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n\t\t\t\t\t\treturn\t[ seg1min, seg2max ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\n\t\t\t\t// The order of legs is important\n\n\t\t\t\t// translation of all points, so that Vertex is at (0,0)\n\t\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n\t\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n\t\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\n\t\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\t\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n\t\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\n\t\t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\n\t\t\t\t\t// angle != 180 deg.\n\n\t\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n\t\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\n\t\t\t\t\tif ( from2toAngle > 0 ) {\n\n\t\t\t\t\t\t// main angle < 180 deg.\n\t\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// main angle > 180 deg.\n\t\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// angle == 180 deg.\n\t\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n\t\t\t\t\treturn\t( from2otherAngle > 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tfunction removeHoles( contour, holes ) {\n\n\t\t\t\tvar shape = contour.concat(); // work on this shape\n\t\t\t\tvar hole;\n\n\t\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\n\t\t\t\t\t// Check if hole point lies within angle around shape point\n\t\t\t\t\tvar lastShapeIdx = shape.length - 1;\n\n\t\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n\t\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\n\t\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n\t\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\n\t\t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n\t\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n\t\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if shape point lies within angle around hole point\n\t\t\t\t\tvar lastHoleIdx = hole.length - 1;\n\n\t\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n\t\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\n\t\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n\t\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\n\t\t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n\t\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n\t\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn\ttrue;\n\n\t\t\t\t}\n\n\t\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t\t// checks for intersections with shape edges\n\t\t\t\t\tvar sIdx, nextIdx, intersection;\n\t\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\n\t\t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\tvar indepHoles = [];\n\n\t\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t\t// checks for intersections with hole edges\n\t\t\t\t\tvar ihIdx, chkHole,\n\t\t\t\t\t\thIdx, nextIdx, intersection;\n\t\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\n\t\t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n\t\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\n\t\t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n\t\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n\t\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\tvar holeIndex, shapeIndex,\n\t\t\t\t\tshapePt, holePt,\n\t\t\t\t\tholeIdx, cutKey, failedCuts = [],\n\t\t\t\t\ttmpShape1, tmpShape2,\n\t\t\t\t\ttmpHole1, tmpHole2;\n\n\t\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tindepHoles.push( h );\n\n\t\t\t\t}\n\n\t\t\t\tvar minShapeIndex = 0;\n\t\t\t\tvar counter = indepHoles.length * 2;\n\t\t\t\twhile ( indepHoles.length > 0 ) {\n\n\t\t\t\t\tcounter --;\n\t\t\t\t\tif ( counter < 0 ) {\n\n\t\t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// search for shape-vertex and hole-vertex,\n\t\t\t\t\t// which can be connected without intersections\n\t\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\n\t\t\t\t\t\tshapePt = shape[ shapeIndex ];\n\t\t\t\t\t\tholeIndex\t= - 1;\n\n\t\t\t\t\t\t// search for hole which can be reached without intersections\n\t\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\n\t\t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\n\t\t\t\t\t\t\t// prevent multiple checks\n\t\t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n\t\t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\n\t\t\t\t\t\t\thole = holes[ holeIdx ];\n\t\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\n\t\t\t\t\t\t\t\tholePt = hole[ h2 ];\n\t\t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n\t\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n\t\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\n\t\t\t\t\t\t\t\tholeIndex = h2;\n\t\t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\n\t\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n\t\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n\t\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n\t\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\n\t\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\n\t\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\n\t\t\t\t\t\t\t\t// Debug only, to show the selected cuts\n\t\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn shape; \t\t\t/* shape with no holes */\n\n\t\t\t}\n\n\n\t\t\tvar i, il, f, face,\n\t\t\t\tkey, index,\n\t\t\t\tallPointsMap = {};\n\n\t\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n\t\t\tvar allpoints = contour.concat();\n\n\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\n\t\t\t}\n\n\t\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\n\t\t\t// prepare all points map\n\n\t\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\n\t\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\n\t\t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.ShapeUtils: Duplicate point\", key, i );\n\n\t\t\t\t}\n\n\t\t\t\tallPointsMap[ key ] = i;\n\n\t\t\t}\n\n\t\t\t// remove holes by cutting paths to holes and adding them to the shape\n\t\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\n\t\t\tvar triangles = ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n\t\t\t//console.log( \"triangles\",triangles, triangles.length );\n\n\t\t\t// check all face vertices against all points map\n\n\t\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\n\t\t\t\tface = triangles[ i ];\n\n\t\t\t\tfor ( f = 0; f < 3; f ++ ) {\n\n\t\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\n\t\t\t\t\tindex = allPointsMap[ key ];\n\n\t\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\t\tface[ f ] = index;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn triangles.concat();\n\n\t\t},\n\n\t\tisClockWise: function ( pts ) {\n\n\t\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *  curveSegments: <int>, // number of points on the curves\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *  amount: <int>, // Depth to extrude the shape\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t *  bevelSize: <float>, // how far from shape outline is bevel\n\t *  bevelSegments: <int>, // number of bevel layers\n\t *\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\n\t *  frames: <Object> // containing arrays of tangents, normals, binormals\n\t *\n\t *  UVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\t// ExtrudeGeometry\n\n\tfunction ExtrudeGeometry( shapes, options ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n\t// ExtrudeBufferGeometry\n\n\tfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\t\tif ( typeof ( shapes ) === \"undefined\" ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeBufferGeometry';\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tthis.addShapeList( shapes, options );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// can't really use automatic vertex normals\n\t\t// as then front and back sides get smoothed too\n\t\t// should do separate smoothing just for sides\n\n\t\t//this.computeVertexNormals();\n\n\t\t//console.log( \"took\", ( Date.now() - startTime ) );\n\n\t}\n\n\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\n\tExtrudeBufferGeometry.prototype.getArrays = function () {\n\n\t\tvar positionAttribute = this.getAttribute( \"position\" );\n\t\tvar verticesArray = positionAttribute ? Array.prototype.slice.call( positionAttribute.array ) : [];\n\n\t\tvar uvAttribute = this.getAttribute( \"uv\" );\n\t\tvar uvArray = uvAttribute ? Array.prototype.slice.call( uvAttribute.array ) : [];\n\n\t\tvar IndexAttribute = this.index;\n\t\tvar indicesArray = IndexAttribute ? Array.prototype.slice.call( IndexAttribute.array ) : [];\n\n\t\treturn {\n\t\t\tposition: verticesArray,\n\t\t\tuv: uvArray,\n\t\t\tindex: indicesArray\n\t\t};\n\n\t};\n\n\tExtrudeBufferGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\t\tvar sl = shapes.length;\n\t\toptions.arrays = this.getArrays();\n\n\t\tfor ( var s = 0; s < sl; s ++ ) {\n\n\t\t\tvar shape = shapes[ s ];\n\t\t\tthis.addShape( shape, options );\n\n\t\t}\n\n\t\tthis.setIndex( options.arrays.index );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( options.arrays.position, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );\n\n\t};\n\n\tExtrudeBufferGeometry.prototype.addShape = function ( shape, options ) {\n\n\t\tvar arrays = options.arrays ? options.arrays : this.getArrays();\n\t\tvar verticesArray = arrays.position;\n\t\tvar indicesArray = arrays.index;\n\t\tvar uvArray = arrays.uv;\n\n\t\tvar placeholder = [];\n\n\n\t\tvar amount = options.amount !== undefined ? options.amount : 100;\n\n\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\n\t\tvar extrudePath = options.extrudePath;\n\t\tvar extrudePts, extrudeByPath = false;\n\n\t\t// Use default WorldUVGenerator if no UV generators are specified.\n\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;\n\n\t\tvar splineTube, binormal, normal, position2;\n\t\tif ( extrudePath ) {\n\n\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\textrudeByPath = true;\n\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t// SETUP TNB variables\n\n\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\tsplineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\tbinormal = new Vector3();\n\t\t\tnormal = new Vector3();\n\t\t\tposition2 = new Vector3();\n\n\t\t}\n\n\t\t// Safeguards if bevels are not enabled\n\n\t\tif ( ! bevelEnabled ) {\n\n\t\t\tbevelSegments = 0;\n\t\t\tbevelThickness = 0;\n\t\t\tbevelSize = 0;\n\n\t\t}\n\n\t\t// Variables initialization\n\n\t\tvar ahole, h, hl; // looping of holes\n\t\tvar scope = this;\n\n\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\tvar vertices = shapePoints.shape;\n\t\tvar holes = shapePoints.holes;\n\n\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\tif ( reverse ) {\n\n\t\t\tvertices = vertices.reverse();\n\n\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t/* Vertices */\n\n\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\tvertices = vertices.concat( ahole );\n\n\t\t}\n\n\n\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t}\n\n\t\tvar b, bs, t, z,\n\t\t\tvert, vlen = vertices.length,\n\t\t\tface, flen = faces.length;\n\n\n\t\t// Find directions for point movement\n\n\n\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t//\n\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t// check for collinear edges\n\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t// not collinear\n\n\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t//  but prevent crazy spikes\n\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\tvar direction_eq = false; // assumes: opposite\n\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t}\n\n\n\t\tvar contourMovements = [];\n\n\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\tif ( j === il ) j = 0;\n\t\t\tif ( k === il ) k = 0;\n\n\t\t\t//  (j)---(i)---(k)\n\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t}\n\n\t\tvar holesMovements = [],\n\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\toneHoleMovements = [];\n\n\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t}\n\n\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t}\n\n\n\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\tt = b / bevelSegments;\n\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n\t\t\t// contract shape\n\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t}\n\n\t\t\t// expand holes\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tbs = bevelSize;\n\n\t\t// Back facing vertices\n\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t} else {\n\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Add stepped vertices...\n\t\t// Including front facing vertices\n\n\t\tvar s;\n\n\t\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// Add bevel segments planes\n\n\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\tt = b / bevelSegments;\n\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n\t\t\t// contract shape\n\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\tv( vert.x, vert.y, amount + z );\n\n\t\t\t}\n\n\t\t\t// expand holes\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, amount + z );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t/* Faces */\n\n\t\t// Top and bottom faces\n\n\t\tbuildLidFaces();\n\n\t\t// Sides faces\n\n\t\tbuildSideFaces();\n\n\n\t\t/////  Internal functions\n\n\t\tfunction buildLidFaces() {\n\n\t\t\tvar start = verticesArray.length/3;\n\n\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t// Bottom faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t}\n\n\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t// Top faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Bottom faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\t// Top faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tscope.addGroup( start, verticesArray.length/3 -start, options.material !== undefined ? options.material : 0);\n\n\t\t}\n\n\t\t// Create faces for the z-sides of the shape\n\n\t\tfunction buildSideFaces() {\n\n\t\t\tvar start = verticesArray.length/3;\n\t\t\tvar layeroffset = 0;\n\t\t\tsidewalls( contour, layeroffset );\n\t\t\tlayeroffset += contour.length;\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t//, true\n\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t}\n\n\n\t\t\tscope.addGroup( start, verticesArray.length/3 -start, options.extrudeMaterial !== undefined ? options.extrudeMaterial : 1);\n\n\n\t\t}\n\n\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\tvar j, k;\n\t\t\ti = contour.length;\n\n\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\tj = i;\n\t\t\t\tk = i - 1;\n\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\tvar s = 0,\n\t\t\t\t\tsl = steps + bevelSegments * 2;\n\n\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction v( x, y, z ) {\n\n\t\t\tplaceholder.push( x );\n\t\t\tplaceholder.push( y );\n\t\t\tplaceholder.push( z );\n\n\t\t}\n\n\n\t\tfunction f3( a, b, c ) {\n\n\t\t\taddVertex( a );\n\t\t\taddVertex( b );\n\t\t\taddVertex( c );\n\n\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\taddUV( uvs[ 0 ] );\n\t\t\taddUV( uvs[ 1 ] );\n\t\t\taddUV( uvs[ 2 ] );\n\n\t\t}\n\n\t\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\n\t\t\taddVertex( a );\n\t\t\taddVertex( b );\n\t\t\taddVertex( d );\n\n\t\t\taddVertex( b );\n\t\t\taddVertex( c );\n\t\t\taddVertex( d );\n\n\n\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\taddUV( uvs[ 0 ] );\n\t\t\taddUV( uvs[ 1 ] );\n\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\taddUV( uvs[ 1 ] );\n\t\t\taddUV( uvs[ 2 ] );\n\t\t\taddUV( uvs[ 3 ] );\n\n\t\t}\n\n\t\tfunction addVertex( index ) {\n\n\t\t\tindicesArray.push( verticesArray.length / 3 );\n\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t}\n\n\n\t\tfunction addUV( vector2 ) {\n\n\t\t\tuvArray.push( vector2.x );\n\t\t\tuvArray.push( vector2.y );\n\n\t\t}\n\n\t\tif ( ! options.arrays ) {\n\n\t\t\tthis.setIndex( indicesArray );\n\t\t\tthis.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );\n\n\t\t}\n\n\t};\n\n\tExtrudeGeometry.WorldUVGenerator = {\n\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, a_y ),\n\t\t\t\tnew Vector2( b_x, b_y ),\n\t\t\t\tnew Vector2( c_x, c_y )\n\t\t\t];\n\n\t\t},\n\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\t\tvar d_x = vertices[ indexD * 3 ];\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t}\n\n\t\t}\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *  font: <THREE.Font>, // font\n\t *\n\t *  size: <float>, // size of the text\n\t *  height: <float>, // thickness to extrude text\n\t *  curveSegments: <int>, // number of points on the curves\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t *  bevelSize: <float> // how far from text outline is bevel\n\t * }\n\t */\n\n\t// TextGeometry\n\n\tfunction TextGeometry(  text, parameters ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TextGeometry';\n\n\t\tthis.parameters = {\n\t\t\ttext: text,\n\t\t\tparameters: parameters\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTextGeometry.prototype = Object.create( Geometry.prototype );\n\tTextGeometry.prototype.constructor = TextGeometry;\n\n\t// TextBufferGeometry\n\n\tfunction TextBufferGeometry( text, parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar font = parameters.font;\n\n\t\tif ( ! ( font && font.isFont ) ) {\n\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\treturn new Geometry();\n\n\t\t}\n\n\t\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\n\t\t// translate parameters to ExtrudeGeometry API\n\n\t\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t// defaults\n\n\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\t\tthis.type = 'TextBufferGeometry';\n\n\t}\n\n\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\n\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// SphereGeometry\n\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\n\tSphereGeometry.prototype.constructor = SphereGeometry;\n\n\t// SphereBufferGeometry\n\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'SphereBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 50;\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\t\tvar thetaEnd = thetaStart + thetaLength;\n\n\t\tvar ix, iy;\n\n\t\tvar index = 0;\n\t\tvar grid = [];\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tvar verticesRow = [];\n\n\t\t\tvar v = iy / heightSegments;\n\n\t\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tvar u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.set( vertex.x, vertex.y, vertex.z ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tvar a = grid[ iy ][ ix + 1 ];\n\t\t\t\tvar b = grid[ iy ][ ix ];\n\t\t\t\tvar c = grid[ iy + 1 ][ ix ];\n\t\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n\t/**\n\t * @author Kaleb Murphy\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// RingGeometry\n\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\n\tRingGeometry.prototype.constructor = RingGeometry;\n\n\t// RingBufferGeometry\n\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'RingBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tinnerRadius = innerRadius || 20;\n\t\touterRadius = outerRadius || 50;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// some helper variables\n\n\t\tvar segment;\n\t\tvar radius = innerRadius;\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\t\tvar a = segment;\n\t\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\t\tvar d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n\t/**\n\t * @author astrodud / http://astrodud.isgreat.org/\n\t * @author zz85 / https://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// LatheGeometry\n\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\n\tLatheGeometry.prototype.constructor = LatheGeometry;\n\n\t// LatheBufferGeometry\n\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'LatheBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments ) || 12;\n\t\tphiStart = phiStart || 0;\n\t\tphiLength = phiLength || Math.PI * 2;\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar base;\n\t\tvar inverseSegments = 1.0 / segments;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar i, j;\n\n\t\t// generate vertices and uvs\n\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tvar sin = Math.sin( phi );\n\t\t\tvar cos = Math.cos( phi );\n\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tbase = j + i * points.length;\n\n\t\t\t\tvar a = base;\n\t\t\t\tvar b = base + points.length;\n\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\tvar d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\tif ( phiLength === Math.PI * 2 ) {\n\n\t\t\tvar normals = this.attributes.normal.array;\n\t\t\tvar n1 = new Vector3();\n\t\t\tvar n2 = new Vector3();\n\t\t\tvar n = new Vector3();\n\n\t\t\t// this is the buffer offset for the last line of vertices\n\n\t\t\tbase = segments * points.length * 3;\n\n\t\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t\t// select the normal of the vertex in the first line\n\n\t\t\t\tn1.x = normals[ j + 0 ];\n\t\t\t\tn1.y = normals[ j + 1 ];\n\t\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t\t// select the normal of the vertex in the last line\n\n\t\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t\t// average normals\n\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t// assign the new values to both normals\n\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n\t/**\n\t * @author jonobr1 / http://jonobr1.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// ShapeGeometry\n\n\tfunction ShapeGeometry( shapes, curveSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tif ( typeof curveSegments === 'object' ) {\n\n\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\t\tcurveSegments = curveSegments.curveSegments;\n\n\t\t}\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\n\n\t// ShapeBufferGeometry\n\n\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ShapeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tcurveSegments = curveSegments || 12;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar groupStart = 0;\n\t\tvar groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar i, l, shapeHole;\n\n\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\t\tvar shapeVertices = points.shape;\n\t\t\tvar shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t\t// also check if holes are in the opposite direction\n\n\t\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\t\tshapeHole = shapeHoles[ i ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tvar vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// incides\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\n\t\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\n\t\t// prepare source geometry\n\n\t\tvar geometry2;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry2 = new Geometry();\n\t\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t\t} else {\n\n\t\t\tgeometry2 = geometry.clone();\n\n\t\t}\n\n\t\tgeometry2.mergeVertices();\n\t\tgeometry2.computeFaceNormals();\n\n\t\tvar sourceVertices = geometry2.vertices;\n\t\tvar faces = geometry2.faces;\n\n\t\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices\n\n\t\tfor ( key in edges ) {\n\n\t\t\tvar e = edges[ key ];\n\n\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// CylinderGeometry\n\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n\t// CylinderBufferGeometry\n\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CylinderBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tvar scope = this;\n\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n\t\theight = height !== undefined ? height : 100;\n\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar index = 0;\n\t\tvar indexArray = [];\n\t\tvar halfHeight = height / 2;\n\t\tvar groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tvar x, y;\n\t\t\tvar normal = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tvar indexRow = [];\n\n\t\t\t\tvar v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tvar a = indexArray[ y ][ x ];\n\t\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\t\tvar uv = new Vector2();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// save the index of the first center vertex\n\t\t\tcenterIndexStart = index;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\n\t\t\tcenterIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tvar c = centerIndexStart + x;\n\t\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\t// ConeGeometry\n\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\tConeGeometry.prototype.constructor = ConeGeometry;\n\n\t// ConeBufferGeometry\n\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author hughes\n\t */\n\n\t// CircleGeometry\n\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\n\tCircleGeometry.prototype.constructor = CircleGeometry;\n\n\t// CircleBufferGeometry\n\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CircleBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 50;\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, s;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\n\n\tvar Geometries = Object.freeze({\n\t\tWireframeGeometry: WireframeGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextBufferGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingBufferGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxBufferGeometry\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * parameters = {\n\t *  opacity: <float>\n\t * }\n\t */\n\n\tfunction ShadowMaterial( parameters ) {\n\n\t\tShaderMaterial.call( this, {\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\t\t\tvertexShader: ShaderChunk[ 'shadow_vert' ],\n\t\t\tfragmentShader: ShaderChunk[ 'shadow_frag' ]\n\t\t} );\n\n\t\tthis.lights = true;\n\t\tthis.transparent = true;\n\n\t\tObject.defineProperties( this, {\n\t\t\topacity: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function () {\n\t\t\t\t\treturn this.uniforms.opacity.value;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tthis.uniforms.opacity.value = value;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction RawShaderMaterial( parameters ) {\n\n\t\tShaderMaterial.call( this, parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  roughness: <float>,\n\t *  metalness: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  envMapIntensity: <float>\n\t *\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 0.5;\n\t\tthis.metalness = 0.5;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  reflectivity: <float>\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial( parameters ) {\n\n\t\tMeshStandardMaterial.call( this );\n\n\t\tthis.defines = { 'PHYSICAL': '' };\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tthis.clearCoat = 0.0;\n\t\tthis.clearCoatRoughness = 0.0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'PHYSICAL': '' };\n\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tthis.clearCoat = source.clearCoat;\n\t\tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author takahirox / http://github.com/takahirox\n\t *\n\t * parameters = {\n\t *  gradientMap: new THREE.Texture( <Image> )\n\t * }\n\t */\n\n\tfunction MeshToonMaterial( parameters ) {\n\n\t\tMeshPhongMaterial.call( this );\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.gradientMap = null;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshPhongMaterial.prototype.copy.call( this, source );\n\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  opacity: <float>,\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *\n\t *  scale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineDashedMaterial.prototype = Object.create( Material.prototype );\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Materials = Object.freeze({\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar Cache = {\n\n\t\tenabled: false,\n\n\t\tfiles: {},\n\n\t\tadd: function ( key, file ) {\n\n\t\t\tif ( this.enabled === false ) return;\n\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[ key ] = file;\n\n\t\t},\n\n\t\tget: function ( key ) {\n\n\t\t\tif ( this.enabled === false ) return;\n\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[ key ];\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete this.files[ key ];\n\n\t\t},\n\n\t\tclear: function () {\n\n\t\t\tthis.files = {};\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction FileLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( FileLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) url = '';\n\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\t// Check for data: URI\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\t\tif ( dataUriRegexResult ) {\n\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\n\n\t\t\t\tdata = window.decodeURIComponent( data );\n\n\t\t\t\tif ( isBase64 ) data = window.atob( data );\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\t \tresponse = new ArrayBuffer( data.length );\n\n\t\t\t\t\t\t\tvar view = new Uint8Array( response );\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\t\tresponse = new Blob( [ response ], { type: mimeType } );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Wait for next browser tick\n\t\t\t\t\twindow.setTimeout( function () {\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t// Wait for next browser tick\n\t\t\t\t\twindow.setTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) onError( error );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar request = new XMLHttpRequest();\n\t\t\t\trequest.open( 'GET', url, true );\n\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\t\tvar response = event.target.response;\n\n\t\t\t\t\tCache.add( url, response );\n\n\t\t\t\t\tif ( this.status === 200 ) {\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else if ( this.status === 0 ) {\n\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\t\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( onError ) onError( event );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( onProgress !== undefined ) {\n\n\t\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\t\t\tonProgress( event );\n\n\t\t\t\t\t}, false );\n\n\t\t\t\t}\n\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\t\tif ( onError ) onError( event );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\t\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n\t\t\t\tif ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );\n\n\t\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t\t}\n\n\t\t\t\trequest.send( null );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn request;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResponseType: function ( value ) {\n\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMimeType: function ( value ) {\n\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRequestHeader: function ( value ) {\n\n\t\t\tthis.requestHeader = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t */\n\n\tfunction CompressedTextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\t// override in sub classes\n\t\tthis._parser = null;\n\n\t}\n\n\tObject.assign( CompressedTextureLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar images = [];\n\n\t\t\tvar texture = new CompressedTexture();\n\t\t\ttexture.image = images;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\tvar loaded = 0;\n\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\t\tloadTexture( i );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Nikos M. / https://github.com/foo123/\n\t *\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t */\n\n\tfunction DataTextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\t// override in sub classes\n\t\tthis._parser = null;\n\n\t}\n\n\tObject.assign( DataTextureLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texture = new DataTexture();\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texData = scope._parser( buffer );\n\n\t\t\t\tif ( ! texData ) return;\n\n\t\t\t\tif ( undefined !== texData.image ) {\n\n\t\t\t\t\ttexture.image = texData.image;\n\n\t\t\t\t} else if ( undefined !== texData.data ) {\n\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\n\t\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n\t\t\t\tif ( undefined !== texData.format ) {\n\n\t\t\t\t\ttexture.format = texData.format;\n\n\t\t\t\t}\n\t\t\t\tif ( undefined !== texData.type ) {\n\n\t\t\t\t\ttexture.type = texData.type;\n\n\t\t\t\t}\n\n\t\t\t\tif ( undefined !== texData.mipmaps ) {\n\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( 1 === texData.mipmapCount ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t\t}, onProgress, onError );\n\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ImageLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( ImageLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) url = '';\n\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\t\timage.addEventListener( 'load', function () {\n\n\t\t\t\tCache.add( url, this );\n\n\t\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, false );\n\n\t\t\t/*\n\t\t\timage.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\tif ( onProgress ) onProgress( event );\n\n\t\t\t}, false );\n\t\t\t*/\n\n\t\t\timage.addEventListener( 'error', function ( event ) {\n\n\t\t\t\tif ( onError ) onError( event );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}, false );\n\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\timage.src = url;\n\n\t\t\treturn image;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( CubeTextureLoader.prototype, {\n\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new CubeTexture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, undefined, onError );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction TextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( TextureLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar texture = new Texture();\n\t\t\ttexture.image = loader.load( url, function () {\n\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\t\tonLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Light( color, intensity ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\t\tthis.receiveShadow = undefined;\n\n\t}\n\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Light,\n\n\t\tisLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\n\t\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\t\tLight.call( this, skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.castShadow = undefined;\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: HemisphereLight,\n\n\t\tisHemisphereLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.groundColor.copy( source.groundColor );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LightShadow( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.radius = 1;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.matrix = new Matrix4();\n\n\t}\n\n\tObject.assign( LightShadow.prototype, {\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.camera = source.camera.clone();\n\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\n\t\t\tthis.mapSize.copy( source.mapSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar object = {};\n\n\t\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\t\tdelete object.camera.matrix;\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction SpotLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t}\n\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: SpotLightShadow,\n\n\t\tisSpotLightShadow: true,\n\n\t\tupdate: function ( light ) {\n\n\t\t\tvar camera = this.camera;\n\n\t\t\tvar fov = _Math.RAD2DEG * 2 * light.angle;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\t\t\t},\n\t\t\tset: function ( power ) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: SpotLight,\n\n\t\tisSpotLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction PointLight( color, intensity, distance, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t}\n\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: PointLight,\n\n\t\tisPointLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectionalLightShadow( ) {\n\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: DirectionalLightShadow\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DirectionalLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: DirectionalLight,\n\n\t\tisDirectionalLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AmbientLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t\tthis.castShadow = undefined;\n\n\t}\n\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: AmbientLight,\n\n\t\tisAmbientLight: true\n\n\t} );\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\tfunction RectAreaLight( color, intensity, width, height ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.position.set( 0, 1, 0 );\n\t\tthis.updateMatrix();\n\n\t\tthis.width = ( width !== undefined ) ? width : 10;\n\t\tthis.height = ( height !== undefined ) ? height : 10;\n\n\t\t// TODO (abelnation): distance/decay\n\n\t\t// TODO (abelnation): update method for RectAreaLight to update transform to lookat target\n\n\t\t// TODO (abelnation): shadows\n\n\t}\n\n\t// TODO (abelnation): RectAreaLight update when light shape is changed\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: RectAreaLight,\n\n\t\tisRectAreaLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tvar AnimationUtils = {\n\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function ( array, from, to ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t\t}\n\n\t\t\treturn array.slice( from, to );\n\n\t\t},\n\n\t\t// converts an array to a specific type\n\t\tconvertArray: function ( array, type, forceClone ) {\n\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t\t! forceClone && array.constructor === type ) return array;\n\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\t\treturn new type( array ); // create typed array\n\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t\t},\n\n\t\tisTypedArray: function ( object ) {\n\n\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t\t! ( object instanceof DataView );\n\n\t\t},\n\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function ( times ) {\n\n\t\t\tfunction compareTime( i, j ) {\n\n\t\t\t\treturn times[ i ] - times[ j ];\n\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array( n );\n\t\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\t\t\tresult.sort( compareTime );\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function ( values, stride, order ) {\n\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor( nValues );\n\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t}\n\n\t\t\tif ( key === undefined ) return; // no data\n\n\t\t\tvar value = key[ valuePropertyName ];\n\t\t\tif ( value === undefined ) return; // no data\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t\t// ...assume THREE.Math-ish\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise push as-is\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t * @author tschw\n\t */\n\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t}\n\n\tObject.assign( Interpolant.prototype, {\n\n\t\tevaluate: function( t ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\ti1 = this._cachedIndex,\n\n\t\t\t\tt1 = pp[   i1   ],\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\tvalidate_interval: {\n\n\t\t\t\tseek: {\n\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t\t} // linear scan\n\n\t\t\t\t\t// binary search\n\n\t\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[   i1   ];\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t\t// check boundary cases, again\n\n\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // seek\n\n\t\t\t\tthis._cachedIndex = i1;\n\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t\t} // validate_interval\n\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t\t},\n\n\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\n\t\t// --- Protected interface\n\n\t\tDefaultSettings_: {},\n\n\t\tgetSettings_: function() {\n\n\t\t\treturn this.settings || this.DefaultSettings_;\n\n\t\t},\n\n\t\tcopySampleValue_: function( index ) {\n\n\t\t\t// copies a sample value to the result buffer\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = index * stride;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// Template methods for derived classes:\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\tthrow new Error( \"call to abstract method\" );\n\t\t\t// implementations shall return this.resultBuffer\n\n\t\t},\n\n\t\tintervalChanged_: function( i1, t0, t1 ) {\n\n\t\t\t// empty\n\n\t\t}\n\n\t} );\n\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\n\tObject.assign( Interpolant.prototype, {\n\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n\t} );\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call(\n\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = -0;\n\t\tthis._offsetPrev = -0;\n\t\tthis._weightNext = -0;\n\t\tthis._offsetNext = -0;\n\n\t}\n\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: CubicInterpolant,\n\n\t\tDefaultSettings_: {\n\n\t\t\tendingStart: \tZeroCurvatureEnding,\n\t\t\tendingEnd:\t\tZeroCurvatureEnding\n\n\t\t},\n\n\t\tintervalChanged_: function( i1, t0, t1 ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\tiPrev = i1 - 2,\n\t\t\t\tiNext = i1 + 1,\n\n\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\ttNext = pp[ iNext ];\n\n\t\t\tif ( tPrev === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tNext === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\tstride = this.valueSize;\n\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\n\t\t},\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tpp = p * p,\n\t\t\t\tppp = pp * p;\n\n\t\t\t// evaluate polynomials\n\n\t\t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n\t\t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n\t\t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n\t\t\tvar sN =       wN   * ppp   -           wN      * pp;\n\n\t\t\t// combine data linearly\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: LinearInterpolant,\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset1 = i1 * stride,\n\t\t\t\toffset0 = offset1 - stride,\n\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: DiscreteInterpolant,\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t}\n\n\t} );\n\n\tvar KeyframeTrackPrototype;\n\n\tKeyframeTrackPrototype = {\n\n\t\tTimeBufferType: Float32Array,\n\t\tValueBufferType: Float32Array,\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\t\treturn new DiscreteInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new LinearInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\t\treturn new CubicInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tsetInterpolation: function ( interpolation ) {\n\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch ( interpolation ) {\n\n\t\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( factoryMethod === undefined ) {\n\n\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrackPrototype:', message );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\n\t\t},\n\n\t\tgetInterpolation: function () {\n\n\t\t\tswitch ( this.createInterpolant ) {\n\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\t\treturn InterpolateSmooth;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetValueSize: function () {\n\n\t\t\treturn this.values.length / this.times.length;\n\n\t\t},\n\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function ( timeOffset ) {\n\n\t\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function ( timeScale ) {\n\n\t\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function ( startTime, endTime ) {\n\n\t\t\tvar times = this.times,\n\t\t\t\tnKeys = times.length,\n\t\t\t\tfrom = 0,\n\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) -- to;\n\n\t\t\t++ to; // inclusive -> exclusive bound\n\n\t\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif ( from >= to ) to = Math.max( to, 1 ), from = to - 1;\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\t\tthis.values = AnimationUtils.\n\t\t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tvar valueSize = this.getValueSize();\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrackPrototype: Invalid value size in track.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\n\t\t\t\tnKeys = times.length;\n\n\t\t\tif ( nKeys === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrackPrototype: Track is empty.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\t\tvar currTime = times[ i ];\n\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrackPrototype: Time is not a valid number.', this, i, currTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrackPrototype: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\n\t\t\t}\n\n\t\t\tif ( values !== undefined ) {\n\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrackPrototype: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function () {\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\t\t\t\tstride = this.getValueSize(),\n\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\t\twriteIndex = 1,\n\t\t\t\tlastIndex = times.length - 1;\n\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\t\tvar keep = false;\n\n\t\t\t\tvar time = times[ i ];\n\t\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else keep = true;\n\n\t\t\t\t}\n\n\t\t\t\t// in-place compaction\n\n\t\t\t\tif ( keep ) {\n\n\t\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j )\n\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t++ writeIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// flush last keyframe (compaction looks ahead)\n\n\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )\n\n\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t\tif ( writeIndex !== times.length ) {\n\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\tfunction KeyframeTrackConstructor( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) throw new Error( \"track name is undefined\" );\n\n\t\tif ( times === undefined || times.length === 0 ) {\n\n\t\t\tthrow new Error( \"no keyframes in track named \" + name );\n\n\t\t}\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t\tthis.validate();\n\t\tthis.optimize();\n\n\t}\n\n\t/**\n\t *\n\t * A Track of vectored keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tVectorKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: VectorKeyframeTrack,\n\n\t\tValueTypeName: 'vector'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: QuaternionLinearInterpolant,\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset = i1 * stride,\n\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\t\tQuaternion.slerpFlat( result, 0,\n\t\t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of quaternion keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: QuaternionKeyframeTrack,\n\n\t\tValueTypeName: 'quaternion',\n\n\t\t// ValueBufferType is inherited\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodLinear: function( result ) {\n\n\t\t\treturn new QuaternionLinearInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of numeric keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tNumberKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: NumberKeyframeTrack,\n\n\t\tValueTypeName: 'number'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t *\n\t * A Track that interpolates Strings\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tStringKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: StringKeyframeTrack,\n\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of Boolean keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction BooleanKeyframeTrack( name, times, values ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values );\n\n\t}\n\n\tBooleanKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: BooleanKeyframeTrack,\n\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t\t// Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of keyframe values that represent color.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.call( this, name, times, values, interpolation );\n\n\t}\n\n\tColorKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( KeyframeTrackPrototype ), {\n\n\t\tconstructor: ColorKeyframeTrack,\n\n\t\tValueTypeName: 'color'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t} );\n\n\t/**\n\t *\n\t * A timed sequence of keyframes for a specific property.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrackConstructor.apply( this, arguments );\n\n\t}\n\n\tKeyframeTrack.prototype = KeyframeTrackPrototype;\n\tKeyframeTrackPrototype.constructor = KeyframeTrack;\n\n\t// Static methods:\n\n\tObject.assign( KeyframeTrack, {\n\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\t\tparse: function( json ) {\n\n\t\t\tif( json.type === undefined ) {\n\n\t\t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\n\t\t\t}\n\n\t\t\tvar trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\n\t\t\tif ( json.times === undefined ) {\n\n\t\t\t\tvar times = [], values = [];\n\n\t\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\t\tjson.times = times;\n\t\t\t\tjson.values = values;\n\n\t\t\t}\n\n\t\t\t// derived classes can define a static parse method\n\t\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\t\treturn trackType.parse( json );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we asssume a constructor compatible with the base\n\t\t\t\treturn new trackType(\n\t\t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function( track ) {\n\n\t\t\tvar trackType = track.constructor;\n\n\t\t\tvar json;\n\n\t\t\t// derived classes can define a static toJSON method\n\t\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\t\tjson = trackType.toJSON( track );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t\t};\n\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\t_getTrackTypeForValueTypeName: function( typeName ) {\n\n\t\t\tswitch( typeName.toLowerCase() ) {\n\n\t\t\t\tcase \"scalar\":\n\t\t\t\tcase \"double\":\n\t\t\t\tcase \"float\":\n\t\t\t\tcase \"number\":\n\t\t\t\tcase \"integer\":\n\n\t\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\t\tcase \"vector\":\n\t\t\t\tcase \"vector2\":\n\t\t\t\tcase \"vector3\":\n\t\t\t\tcase \"vector4\":\n\n\t\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\t\tcase \"color\":\n\n\t\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\t\tcase \"quaternion\":\n\n\t\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\t\tcase \"bool\":\n\t\t\t\tcase \"boolean\":\n\n\t\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\t\tcase \"string\":\n\n\t\t\t\t\treturn StringKeyframeTrack;\n\n\t\t\t}\n\n\t\t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Reusable set of Tracks that represent an animation.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tfunction AnimationClip( name, duration, tracks ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t\tthis.optimize();\n\n\t}\n\n\tObject.assign( AnimationClip, {\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n\t\t},\n\n\t\ttoJSON: function ( clip ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tclipTracks = clip.tracks;\n\n\t\t\tvar json = {\n\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\ttimes.push(\n\t\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\t\ti,\n\t\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttracks.push(\n\t\t\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\t\ttimes, values\n\t\t\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t\t},\n\n\t\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\t\treturn clipArray[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\t\tvar animationToMorphTargets = {};\n\n\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t\t// sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t\t}\n\n\t\t\treturn clips;\n\n\t\t},\n\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function ( animation, bones ) {\n\n\t\t\tif ( ! animation ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\t// automatic length determination in AnimationClip.\n\t\t\tvar duration = animation.length || - 1;\n\t\t\tvar fps = animation.fps || 30;\n\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t\t// skip empty tracks\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t\t// process morph targets\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tracks.length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( AnimationClip.prototype, {\n\n\t\tresetDuration: function () {\n\n\t\t\tvar tracks = this.tracks, duration = 0;\n\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\t\tvar track = this.tracks[ i ];\n\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\n\t\t},\n\n\t\ttrim: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\toptimize: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].optimize();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction MaterialLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\tthis.textures = {};\n\n\t}\n\n\tObject.assign( MaterialLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTextures: function ( value ) {\n\n\t\t\tthis.textures = value;\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture( name ) {\n\n\t\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn textures[ name ];\n\n\t\t\t}\n\n\t\t\tvar material = new Materials[ json.type ]();\n\n\t\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\t\tif ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;\n\t\t\tif ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;\n\t\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\t\tif ( json.shading !== undefined ) material.shading = json.shading;\n\t\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\t\t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n\t\t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\n\t\t\t// for PointsMaterial\n\n\t\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t\t// maps\n\n\t\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\n\t\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t\t\t\tmaterial.transparent = true;\n\n\t\t\t}\n\n\t\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t\t}\n\n\t\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\n\t\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\n\t\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n\t\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\t\treturn material;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferGeometryLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( BufferGeometryLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar geometry = new BufferGeometry();\n\n\t\t\tvar index = json.data.index;\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif ( groups !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Loader() {\n\n\t\tthis.onLoadStart = function () {};\n\t\tthis.onLoadProgress = function () {};\n\t\tthis.onLoadComplete = function () {};\n\n\t}\n\n\tLoader.Handlers = {\n\n\t\thandlers: [],\n\n\t\tadd: function ( regex, loader ) {\n\n\t\t\tthis.handlers.push( regex, loader );\n\n\t\t},\n\n\t\tget: function ( file ) {\n\n\t\t\tvar handlers = this.handlers;\n\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t};\n\n\tObject.assign( Loader.prototype, {\n\n\t\tcrossOrigin: undefined,\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tvar parts = url.split( '/' );\n\n\t\t\tif ( parts.length === 1 ) return './';\n\n\t\t\tparts.pop();\n\n\t\t\treturn parts.join( '/' ) + '/';\n\n\t\t},\n\n\t\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n\t\t\tvar array = [];\n\n\t\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n\t\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tcreateMaterial: ( function () {\n\n\t\t\tvar BlendingMode = {\n\t\t\t\tNoBlending: NoBlending,\n\t\t\t\tNormalBlending: NormalBlending,\n\t\t\t\tAdditiveBlending: AdditiveBlending,\n\t\t\t\tSubtractiveBlending: SubtractiveBlending,\n\t\t\t\tMultiplyBlending: MultiplyBlending,\n\t\t\t\tCustomBlending: CustomBlending\n\t\t\t};\n\n\t\t\tvar color = new Color();\n\t\t\tvar textureLoader = new TextureLoader();\n\t\t\tvar materialLoader = new MaterialLoader();\n\n\t\t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n\t\t\t\t// convert from old material format\n\n\t\t\t\tvar textures = {};\n\n\t\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n\t\t\t\t\tvar fullPath = texturePath + path;\n\t\t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\n\t\t\t\t\tvar texture;\n\n\t\t\t\t\tif ( loader !== null ) {\n\n\t\t\t\t\t\ttexture = loader.load( fullPath );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t\t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( repeat !== undefined ) {\n\n\t\t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n\t\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\t\t\ttexture.offset.fromArray( offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( wrap !== undefined ) {\n\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( anisotropy !== undefined ) {\n\n\t\t\t\t\t\ttexture.anisotropy = anisotropy;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar uuid = _Math.generateUUID();\n\n\t\t\t\t\ttextures[ uuid ] = texture;\n\n\t\t\t\t\treturn uuid;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tvar json = {\n\t\t\t\t\tuuid: _Math.generateUUID(),\n\t\t\t\t\ttype: 'MeshLambertMaterial'\n\t\t\t\t};\n\n\t\t\t\tfor ( var name in m ) {\n\n\t\t\t\t\tvar value = m[ name ];\n\n\t\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\t\tcase 'DbgColor':\n\t\t\t\t\t\tcase 'DbgIndex':\n\t\t\t\t\t\tcase 'opticalDensity':\n\t\t\t\t\t\tcase 'illumination':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'DbgName':\n\t\t\t\t\t\t\tjson.name = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'blending':\n\t\t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorAmbient':\n\t\t\t\t\t\tcase 'mapAmbient':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorDiffuse':\n\t\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorSpecular':\n\t\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorEmissive':\n\t\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'specularCoef':\n\t\t\t\t\t\t\tjson.shininess = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'shading':\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapDiffuse':\n\t\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapDiffuseRepeat':\n\t\t\t\t\t\tcase 'mapDiffuseOffset':\n\t\t\t\t\t\tcase 'mapDiffuseWrap':\n\t\t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapEmissive':\n\t\t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapEmissiveRepeat':\n\t\t\t\t\t\tcase 'mapEmissiveOffset':\n\t\t\t\t\t\tcase 'mapEmissiveWrap':\n\t\t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapLight':\n\t\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapLightRepeat':\n\t\t\t\t\t\tcase 'mapLightOffset':\n\t\t\t\t\t\tcase 'mapLightWrap':\n\t\t\t\t\t\tcase 'mapLightAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAO':\n\t\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAORepeat':\n\t\t\t\t\t\tcase 'mapAOOffset':\n\t\t\t\t\t\tcase 'mapAOWrap':\n\t\t\t\t\t\tcase 'mapAOAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBump':\n\t\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBumpScale':\n\t\t\t\t\t\t\tjson.bumpScale = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBumpRepeat':\n\t\t\t\t\t\tcase 'mapBumpOffset':\n\t\t\t\t\t\tcase 'mapBumpWrap':\n\t\t\t\t\t\tcase 'mapBumpAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormal':\n\t\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormalFactor':\n\t\t\t\t\t\t\tjson.normalScale = [ value, value ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormalRepeat':\n\t\t\t\t\t\tcase 'mapNormalOffset':\n\t\t\t\t\t\tcase 'mapNormalWrap':\n\t\t\t\t\t\tcase 'mapNormalAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapSpecular':\n\t\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapSpecularRepeat':\n\t\t\t\t\t\tcase 'mapSpecularOffset':\n\t\t\t\t\t\tcase 'mapSpecularWrap':\n\t\t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapMetalness':\n\t\t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapMetalnessRepeat':\n\t\t\t\t\t\tcase 'mapMetalnessOffset':\n\t\t\t\t\t\tcase 'mapMetalnessWrap':\n\t\t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapRoughness':\n\t\t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapRoughnessRepeat':\n\t\t\t\t\t\tcase 'mapRoughnessOffset':\n\t\t\t\t\t\tcase 'mapRoughnessWrap':\n\t\t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAlpha':\n\t\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAlphaRepeat':\n\t\t\t\t\t\tcase 'mapAlphaOffset':\n\t\t\t\t\t\tcase 'mapAlphaWrap':\n\t\t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'flipSided':\n\t\t\t\t\t\t\tjson.side = BackSide;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'doubleSided':\n\t\t\t\t\t\t\tjson.side = DoubleSide;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t\t\t\t\t\t\tjson.opacity = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'depthTest':\n\t\t\t\t\t\tcase 'depthWrite':\n\t\t\t\t\t\tcase 'colorWrite':\n\t\t\t\t\t\tcase 'opacity':\n\t\t\t\t\t\tcase 'reflectivity':\n\t\t\t\t\t\tcase 'transparent':\n\t\t\t\t\t\tcase 'visible':\n\t\t\t\t\t\tcase 'wireframe':\n\t\t\t\t\t\t\tjson[ name ] = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n\t\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n\t\t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n\t\t\t\tmaterialLoader.setTextures( textures );\n\n\t\t\t\treturn materialLoader.parse( json );\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction JSONLoader( manager ) {\n\n\t\tif ( typeof manager === 'boolean' ) {\n\n\t\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\t\tmanager = undefined;\n\n\t\t}\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.withCredentials = false;\n\n\t}\n\n\tObject.assign( JSONLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setWithCredentials( this.withCredentials );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = JSON.parse( text );\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata !== undefined ) {\n\n\t\t\t\t\tvar type = metadata.type;\n\n\t\t\t\t\tif ( type !== undefined ) {\n\n\t\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar object = scope.parse( json, texturePath );\n\t\t\t\tonLoad( object.geometry, object.materials );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tthis.texturePath = value;\n\n\t\t},\n\n\t\tparse: ( function () {\n\n\t\t\tfunction parseModel( json, geometry ) {\n\n\t\t\t\tfunction isBitSet( value, position ) {\n\n\t\t\t\t\treturn value & ( 1 << position );\n\n\t\t\t\t}\n\n\t\t\t\tvar i, j, fi,\n\n\t\t\t\t\toffset, zLength,\n\n\t\t\t\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n\t\t\t\t\ttype,\n\t\t\t\t\tisQuad,\n\t\t\t\t\thasMaterial,\n\t\t\t\t\thasFaceVertexUv,\n\t\t\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\t\t\thasFaceColor, hasFaceVertexColor,\n\n\t\t\t\t\tvertex, face, faceA, faceB, hex, normal,\n\n\t\t\t\t\tuvLayer, uv, u, v,\n\n\t\t\t\t\tfaces = json.faces,\n\t\t\t\t\tvertices = json.vertices,\n\t\t\t\t\tnormals = json.normals,\n\t\t\t\t\tcolors = json.colors,\n\n\t\t\t\t\tscale = json.scale,\n\n\t\t\t\t\tnUvLayers = 0;\n\n\n\t\t\t\tif ( json.uvs !== undefined ) {\n\n\t\t\t\t\t// disregard empty arrays\n\n\t\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n\t\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = vertices.length;\n\n\t\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\t\tvertex = new Vector3();\n\n\t\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n\t\t\t\t\tgeometry.vertices.push( vertex );\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = faces.length;\n\n\t\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\t\ttype = faces[ offset ++ ];\n\n\t\t\t\t\tisQuad = isBitSet( type, 0 );\n\t\t\t\t\thasMaterial = isBitSet( type, 1 );\n\t\t\t\t\thasFaceVertexUv = isBitSet( type, 3 );\n\t\t\t\t\thasFaceNormal = isBitSet( type, 4 );\n\t\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\t\thasFaceColor = isBitSet( type, 6 );\n\t\t\t\t\thasFaceVertexColor = isBitSet( type, 7 );\n\n\t\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n\t\t\t\t\tif ( isQuad ) {\n\n\t\t\t\t\t\tfaceA = new Face3();\n\t\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n\t\t\t\t\t\tfaceB = new Face3();\n\t\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\n\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\t\tfaceB.color.setHex( hex );\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\t\tgeometry.faces.push( faceB );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface = new Face3();\n\t\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\t\tface.c = faces[ offset ++ ];\n\n\t\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.faces.push( face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseSkin( json, geometry ) {\n\n\t\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n\t\t\t\tif ( json.skinWeights ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\t\tvar x = json.skinWeights[ i ];\n\t\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n\t\t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.skinIndices ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\t\tvar a = json.skinIndices[ i ];\n\t\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n\t\t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.bones = json.bones;\n\n\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n\t\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseMorphing( json, geometry ) {\n\n\t\t\t\tvar scale = json.scale;\n\n\t\t\t\tif ( json.morphTargets !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n\t\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n\t\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n\t\t\t\t\t\t\tvar vertex = new Vector3();\n\t\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n\t\t\t\t\t\t\tdstVertices.push( vertex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n\t\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseAnimations( json, geometry ) {\n\n\t\t\t\tvar outputAnimations = [];\n\n\t\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\t\tvar animations = [];\n\n\t\t\t\tif ( json.animation !== undefined ) {\n\n\t\t\t\t\tanimations.push( json.animation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.animations !== undefined ) {\n\n\t\t\t\t\tif ( json.animations.length ) {\n\n\t\t\t\t\t\tanimations = animations.concat( json.animations );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tanimations.push( json.animations );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n\t\t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n\t\t\t\t}\n\n\t\t\t\t// parse implicit morph animations\n\t\t\t\tif ( geometry.morphTargets ) {\n\n\t\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n\t\t\t\t}\n\n\t\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n\t\t\t}\n\n\t\t\treturn function ( json, texturePath ) {\n\n\t\t\t\tif ( json.data !== undefined ) {\n\n\t\t\t\t\t// Geometry 4.0 spec\n\t\t\t\t\tjson = json.data;\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.scale !== undefined ) {\n\n\t\t\t\t\tjson.scale = 1.0 / json.scale;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tjson.scale = 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tvar geometry = new Geometry();\n\n\t\t\t\tparseModel( json, geometry );\n\t\t\t\tparseSkin( json, geometry );\n\t\t\t\tparseMorphing( json, geometry );\n\t\t\t\tparseAnimations( json, geometry );\n\n\t\t\t\tgeometry.computeFaceNormals();\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n\t\t\t\t\treturn { geometry: geometry };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n\t\t\t\t\treturn { geometry: geometry, materials: materials };\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ObjectLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\tthis.texturePath = '';\n\n\t}\n\n\tObject.assign( ObjectLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( this.texturePath === '' ) {\n\n\t\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n\t\t\t}\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url + '. Use THREE.JSONLoader instead.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tscope.parse( json, onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tthis.texturePath = value;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\n\t\t},\n\n\t\tparse: function ( json, onLoad ) {\n\n\t\t\tvar geometries = this.parseGeometries( json.geometries );\n\n\t\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t\t} );\n\n\t\t\tvar textures = this.parseTextures( json.textures, images );\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\t\tif ( json.animations ) {\n\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t\t}\n\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t},\n\n\t\tparseGeometries: function ( json ) {\n\n\t\t\tvar geometries = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar geometryLoader = new JSONLoader();\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar geometry;\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data, this.texturePath ).geometry;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometries;\n\n\t\t},\n\n\t\tparseMaterials: function ( json, textures ) {\n\n\t\t\tvar materials = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures( textures );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t\t// Deprecated\n\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\t\tarray.push( loader.parse( data.materials[ j ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t},\n\n\t\tparseAnimations: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t},\n\n\t\tparseImages: function ( json, onLoad ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\n\t\t\tfunction loadImage( url ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\treturn loader.load( url, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, undefined, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\t\tvar loader = new ImageLoader( manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n\t\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\tparseTextures: function ( json, images ) {\n\n\t\t\tfunction parseConstant( value, type ) {\n\n\t\t\t\tif ( typeof( value ) === 'number' ) return value;\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\t\treturn type[ value ];\n\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture = new Texture( images[ data.image ] );\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\n\t\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t},\n\n\t\tparseObject: function () {\n\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function parseObject( data, geometries, materials ) {\n\n\t\t\t\tvar object;\n\n\t\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn geometries[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn array;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn materials[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'Scene':\n\n\t\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\n\t\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LOD':\n\n\t\t\t\t\t\tobject = new LOD();\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Line':\n\n\t\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LineLoop':\n\n\t\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LineSegments':\n\n\t\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointCloud':\n\t\t\t\t\tcase 'Points':\n\n\t\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Group':\n\n\t\t\t\t\t\tobject = new Group();\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tobject = new Object3D();\n\n\t\t\t\t}\n\n\t\t\t\tobject.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) object.name = data.name;\n\t\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\t\tmatrix.fromArray( data.matrix );\n\t\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\t\t\tif ( data.shadow ) {\n\n\t\t\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n\t\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\t\tfor ( var child in data.children ) {\n\n\t\t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\t\tvar levels = data.levels;\n\n\t\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn object;\n\n\t\t\t};\n\n\t\t}()\n\n\t} );\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tSphericalReflectionMapping: SphericalReflectionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipMapNearestFilter: NearestMipMapNearestFilter,\n\t\tNearestMipMapLinearFilter: NearestMipMapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipMapNearestFilter: LinearMipMapNearestFilter,\n\t\tLinearMipMapLinearFilter: LinearMipMapLinearFilter\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n\t//\n\n\tfunction QuadraticBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\n\t}\n\n\tfunction QuadraticBezierP1( t, p ) {\n\n\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t}\n\n\tfunction QuadraticBezierP2( t, p ) {\n\n\t\treturn t * t * p;\n\n\t}\n\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\t\tQuadraticBezierP2( t, p2 );\n\n\t}\n\n\t//\n\n\tfunction CubicBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\n\t}\n\n\tfunction CubicBezierP1( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\n\t}\n\n\tfunction CubicBezierP2( t, p ) {\n\n\t\treturn 3 * ( 1 - t ) * t * t * p;\n\n\t}\n\n\tfunction CubicBezierP3( t, p ) {\n\n\t\treturn t * t * t * p;\n\n\t}\n\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\t\tCubicBezierP3( t, p3 );\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Extensible curve object\n\t *\n\t * Some common of curve methods:\n\t * .getPoint(t), getTangent(t)\n\t * .getPointAt(u), getTangentAt(u)\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tAbstract Curve base class\n\t **************************************************************/\n\n\tfunction Curve() {\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\tObject.assign( Curve.prototype, {\n\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\t\tgetPoint: function () {\n\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\t\tgetPointAt: function ( u ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getPoint( t );\n\n\t\t},\n\n\t\t// Get sequence of points using getPoint( t )\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = 5;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get sequence of points using getPointAt( u )\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = 5;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get total curve arc length\n\n\t\tgetLength: function () {\n\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[ lengths.length - 1 ];\n\n\t\t},\n\n\t\t// Get list of cumulative segment lengths\n\n\t\tgetLengths: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = this.arcLengthDivisions;\n\n\t\t\tif ( this.cacheArcLengths &&\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t\t! this.needsUpdate ) {\n\n\t\t\t\treturn this.cacheArcLengths;\n\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t\tvar cache = [];\n\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\tvar p, sum = 0;\n\n\t\t\tcache.push( 0 );\n\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\tcache.push( sum );\n\t\t\t\tlast = current;\n\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t\t},\n\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\t\tgetUtoTmapping: function ( u, distance ) {\n\n\t\t\tvar arcLengths = this.getLengths();\n\n\t\t\tvar i = 0, il = arcLengths.length;\n\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif ( distance ) {\n\n\t\t\t\ttargetArcLength = distance;\n\n\t\t\t} else {\n\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t\t}\n\n\t\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\t\tvar low = 0, high = il - 1, comparison;\n\n\t\t\twhile ( low <= high ) {\n\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\t\tlow = i + 1;\n\n\t\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\t\thigh = i - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// DONE\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\t\treturn i / ( il - 1 );\n\n\t\t\t}\n\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t\t// determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t\t// add that fractional amount to t\n\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\t\tgetTangent: function ( t ) {\n\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta;\n\n\t\t\t// Capping in case of danger\n\n\t\t\tif ( t1 < 0 ) t1 = 0;\n\t\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\tvar pt2 = this.getPoint( t2 );\n\n\t\t\tvar vec = pt2.clone().sub( pt1 );\n\t\t\treturn vec.normalize();\n\n\t\t},\n\n\t\tgetTangentAt: function ( u ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getTangent( t );\n\n\t\t},\n\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4();\n\n\t\t\tvar i, u, theta;\n\n\t\t\t// compute the tangent vectors for each segment on the curve\n\n\t\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\t\tu = i / segments;\n\n\t\t\t\ttangents[ i ] = this.getTangentAt( u );\n\t\t\t\ttangents[ i ].normalize();\n\n\t\t\t}\n\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\t\t\tnormals[ 0 ] = new Vector3();\n\t\t\tbinormals[ 0 ] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\t\tif ( tx <= min ) {\n\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( ty <= min ) {\n\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t\t}\n\n\t\t\tif ( tz <= min ) {\n\n\t\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t\t}\n\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\t\tvec.normalize();\n\n\t\t\t\t\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t\t}\n\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\t\tif ( closed === true ) {\n\n\t\t\t\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\t\ttheta = - theta;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\tfunction LineCurve( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tLineCurve.prototype = Object.create( Curve.prototype );\n\tLineCurve.prototype.constructor = LineCurve;\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function ( t ) {\n\n\t\tif ( t === 1 ) {\n\n\t\t\treturn this.v2.clone();\n\n\t\t}\n\n\t\tvar point = this.v2.clone().sub( this.v1 );\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve.prototype.getPointAt = function ( u ) {\n\n\t\treturn this.getPoint( u );\n\n\t};\n\n\tLineCurve.prototype.getTangent = function ( t ) {\n\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\t\treturn tangent.normalize();\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *  curves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\n\t\tCurve.call( this );\n\n\t\tthis.curves = [];\n\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\t\tconstructor: CurvePath,\n\n\t\tadd: function ( curve ) {\n\n\t\t\tthis.curves.push( curve );\n\n\t\t},\n\n\t\tclosePath: function () {\n\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0;\n\n\t\t\t// To think about boundaries points.\n\n\t\t\twhile ( i < curveLengths.length ) {\n\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t\t},\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tgetLength: function () {\n\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[ lens.length - 1 ];\n\n\t\t},\n\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\n\t\t},\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\t\tgetCurveLengths: function () {\n\n\t\t\t// We use cache values if curves and cache array are same length\n\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\t\treturn this.cacheLengths;\n\n\t\t\t}\n\n\t\t\t// Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\t\t\tvar lengths = [], sums = 0;\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\tlengths.push( sums );\n\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\n\t\t\treturn lengths;\n\n\t\t},\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = 40;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tdivisions = divisions || 12;\n\n\t\t\tvar points = [], last;\n\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\t\tvar curve = curves[ i ];\n\t\t\t\tvar resolution = (curve && curve.isEllipseCurve) ? divisions * 2\n\t\t\t\t\t: (curve && curve.isLineCurve) ? 1\n\t\t\t\t\t: (curve && curve.isSplineCurve) ? divisions * curve.points.length\n\t\t\t\t\t: divisions;\n\n\t\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\t\tfor ( var j = 0; j < pts.length; j++ ) {\n\n\t\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push( point );\n\t\t\t\t\tlast = point;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t/**************************************************************\n\t\t *\tCreate Geometries Helpers\n\t\t **************************************************************/\n\n\t\t/// Generate geometry from path points (for Line or Points objects)\n\n\t\tcreatePointsGeometry: function ( divisions ) {\n\n\t\t\tvar pts = this.getPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\t// Generate geometry from equidistant sampling along the path\n\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateGeometry: function ( points ) {\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.aX = aX;\n\t\tthis.aY = aY;\n\n\t\tthis.xRadius = xRadius;\n\t\tthis.yRadius = yRadius;\n\n\t\tthis.aStartAngle = aStartAngle;\n\t\tthis.aEndAngle = aEndAngle;\n\n\t\tthis.aClockwise = aClockwise;\n\n\t\tthis.aRotation = aRotation || 0;\n\n\t}\n\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function ( t ) {\n\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\tvar sin = Math.sin( this.aRotation );\n\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn new Vector2( x, y );\n\n\t};\n\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.points = ( points === undefined ) ? [] : points;\n\n\t}\n\n\tSplineCurve.prototype = Object.create( Curve.prototype );\n\tSplineCurve.prototype.constructor = SplineCurve;\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function ( t ) {\n\n\t\tvar points = this.points;\n\t\tvar point = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( point );\n\t\tvar weight = point - intPoint;\n\n\t\tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tvar point1 = points[ intPoint ];\n\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\treturn new Vector2(\n\t\t\tCatmullRom( weight, point0.x, point1.x, point2.x, point3.x ),\n\t\t\tCatmullRom( weight, point0.y, point1.y, point2.y, point3.y )\n\t\t);\n\n\t};\n\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n\tCubicBezierCurve.prototype.getPoint = function ( t ) {\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\treturn new Vector2(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t};\n\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\tQuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\treturn new Vector2(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t};\n\n\tvar PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\t\tfromPoints: function ( vectors ) {\n\n\t\t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\n\t\t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\n\t\t\t}\n\n\t\t},\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( x, y );\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tvar curve = new QuadraticBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tvar curve = new CubicBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t},\n\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\t\tvar curve = new SplineCurve( npts );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\t},\n\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\t},\n\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t},\n\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t},\n\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\tthis.currentPoint.copy( lastPoint );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Creates free form 2d path using series of points, lines or curves.\n\t **/\n\n\tfunction Path( points ) {\n\n\t\tCurvePath.call( this );\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.fromPoints( points );\n\n\t\t}\n\n\t}\n\n\tPath.prototype = PathPrototype;\n\tPathPrototype.constructor = Path;\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Defines a 2d shape plane using paths.\n\t **/\n\n\t// STEP 1 Create a path.\n\t// STEP 2 Turn path into shape.\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t// STEP 3a - Extract points from each shape, turn to vertices\n\t// STEP 3b - Triangulate each shape, add faces.\n\n\tfunction Shape() {\n\n\t\tPath.apply( this, arguments );\n\n\t\tthis.holes = [];\n\n\t}\n\n\tShape.prototype = Object.assign( Object.create( PathPrototype ), {\n\n\t\tconstructor: Shape,\n\n\t\tgetPointsHoles: function ( divisions ) {\n\n\t\t\tvar holesPts = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t\t}\n\n\t\t\treturn holesPts;\n\n\t\t},\n\n\t\t// Get points of shape and holes (keypoints based on segments parameter)\n\n\t\textractAllPoints: function ( divisions ) {\n\n\t\t\treturn {\n\n\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t\t};\n\n\t\t},\n\n\t\textractPoints: function ( divisions ) {\n\n\t\t\treturn this.extractAllPoints( divisions );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t **/\n\n\tfunction ShapePath() {\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tObject.assign( ShapePath.prototype, {\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push( this.currentPath );\n\t\t\tthis.currentPath.moveTo( x, y );\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tthis.currentPath.lineTo( x, y );\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\t},\n\n\t\tsplineThru: function ( pts ) {\n\n\t\t\tthis.currentPath.splineThru( pts );\n\n\t\t},\n\n\t\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\tvar inside = false;\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn\tinside;\n\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif ( subPaths.length === 0 ) return [];\n\n\t\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\t\tif ( subPaths.length === 1 ) {\n\n\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\n\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\t\tif ( solid ) {\n\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t\t//console.log('cw', i);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t\t//console.log('ccw', i);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\t\tif ( newShapes.length > 1 ) {\n\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Font( data ) {\n\n\t\tthis.data = data;\n\n\t}\n\n\tObject.assign( Font.prototype, {\n\n\t\tisFont: true,\n\n\t\tgenerateShapes: function ( text, size, divisions ) {\n\n\t\t\tfunction createPaths( text ) {\n\n\t\t\t\tvar chars = String( text ).split( '' );\n\t\t\t\tvar scale = size / data.resolution;\n\t\t\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\t\t\t\tvar offsetX = 0, offsetY = 0;\n\n\t\t\t\tvar paths = [];\n\n\t\t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\t\t\tvar char = chars[ i ];\n\n\t\t\t\t\tif ( char === '\\n' ) {\n\n\t\t\t\t\t\toffsetX = 0;\n\t\t\t\t\t\toffsetY -= line_height;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY );\n\t\t\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\t\t\tpaths.push( ret.path );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn paths;\n\n\t\t\t}\n\n\t\t\tfunction createPath( c, scale, offsetX, offsetY ) {\n\n\t\t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\n\t\t\t\tif ( ! glyph ) return;\n\n\t\t\t\tvar path = new ShapePath();\n\n\t\t\t\tvar pts = [];\n\t\t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\n\t\t\t\tif ( glyph.o ) {\n\n\t\t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\t\tQuadraticBezier( t, cpx0, cpx1, cpx );\n\t\t\t\t\t\t\t\t\t\tQuadraticBezier( t, cpy0, cpy1, cpy );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\t\tCubicBezier( t, cpx0, cpx1, cpx2, cpx );\n\t\t\t\t\t\t\t\t\t\tCubicBezier( t, cpy0, cpy1, cpy2, cpy );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn { offsetX: glyph.ha * scale, path: path };\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( size === undefined ) size = 100;\n\t\t\tif ( divisions === undefined ) divisions = 4;\n\n\t\t\tvar data = this.data;\n\n\t\t\tvar paths = createPaths( text );\n\t\t\tvar shapes = [];\n\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction FontLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( FontLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse( json );\n\n\t\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\treturn new Font( json );\n\n\t\t}\n\n\t} );\n\n\tvar context;\n\n\tvar AudioContext = {\n\n\t\tgetContext: function () {\n\n\t\t\tif ( context === undefined ) {\n\n\t\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn context;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\tcontext = value;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction AudioLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( AudioLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar context = AudioContext.getContext();\n\n\t\t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction StereoCamera() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t}\n\n\tObject.assign( StereoCamera.prototype, {\n\n\t\tupdate: ( function () {\n\n\t\t\tvar instance, focus, fov, aspect, near, far, zoom, eyeSep;\n\n\t\t\tvar eyeRight = new Matrix4();\n\t\t\tvar eyeLeft = new Matrix4();\n\n\t\t\treturn function update( camera ) {\n\n\t\t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n\t\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;\n\n\t\t\t\tif ( needsUpdate ) {\n\n\t\t\t\t\tinstance = this;\n\t\t\t\t\tfocus = camera.focus;\n\t\t\t\t\tfov = camera.fov;\n\t\t\t\t\taspect = camera.aspect * this.aspect;\n\t\t\t\t\tnear = camera.near;\n\t\t\t\t\tfar = camera.far;\n\t\t\t\t\tzoom = camera.zoom;\n\n\t\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\t\teyeSep = this.eyeSep / 2;\n\t\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t\t\t\t\tvar ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n\t\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t\t// translate xOffset\n\n\t\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n\t\t\t\t\t// for left eye\n\n\t\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t\t// for right eye\n\n\t\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * Camera for rendering cube maps\n\t *\t- renders scene into axis-aligned cube\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CubeCamera( near, far, cubeResolution ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tvar fov = 90, aspect = 1;\n\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t\tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n\t\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\t\tthis.renderTarget.texture.name = \"CubeCamera\";\n\n\t\tthis.updateCubeMap = function ( renderer, scene ) {\n\n\t\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t\trenderTarget.activeCubeFace = 0;\n\t\t\trenderer.render( scene, cameraPX, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 1;\n\t\t\trenderer.render( scene, cameraNX, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 2;\n\t\t\trenderer.render( scene, cameraPY, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 3;\n\t\t\trenderer.render( scene, cameraNY, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 4;\n\t\t\trenderer.render( scene, cameraPZ, renderTarget );\n\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\t\trenderTarget.activeCubeFace = 5;\n\t\t\trenderer.render( scene, cameraNZ, renderTarget );\n\n\t\t\trenderer.setRenderTarget( null );\n\n\t\t};\n\n\t}\n\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioListener() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t}\n\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: AudioListener,\n\n\t\tgetInput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tremoveFilter: function ( ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\tthis.filter = null;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.filter;\n\n\t\t},\n\n\t\tsetFilter: function ( value ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t\t} else {\n\n\t\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect( this.filter );\n\t\t\tthis.filter.connect( this.context.destination );\n\n\t\t},\n\n\t\tgetMasterVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetMasterVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.value = value;\n\n\t\t},\n\n\t\tupdateMatrixWorld: ( function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar quaternion = new Quaternion();\n\t\t\tvar scale = new Vector3();\n\n\t\t\tvar orientation = new Vector3();\n\n\t\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\t\tvar listener = this.context.listener;\n\t\t\t\tvar up = this.up;\n\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\t\tif ( listener.positionX ) {\n\n\t\t\t\t\tlistener.positionX.setValueAtTime( position.x, this.context.currentTime );\n\t\t\t\t\tlistener.positionY.setValueAtTime( position.y, this.context.currentTime );\n\t\t\t\t\tlistener.positionZ.setValueAtTime( position.z, this.context.currentTime );\n\t\t\t\t\tlistener.forwardX.setValueAtTime( orientation.x, this.context.currentTime );\n\t\t\t\t\tlistener.forwardY.setValueAtTime( orientation.y, this.context.currentTime );\n\t\t\t\t\tlistener.forwardZ.setValueAtTime( orientation.z, this.context.currentTime );\n\t\t\t\t\tlistener.upX.setValueAtTime( up.x, this.context.currentTime );\n\t\t\t\t\tlistener.upY.setValueAtTime( up.y, this.context.currentTime );\n\t\t\t\t\tlistener.upZ.setValueAtTime( up.z, this.context.currentTime );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t\t\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction Audio( listener ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.loop = false;\n\t\tthis.startTime = 0;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis.filters = [];\n\n\t}\n\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Audio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tsetNodeSource: function ( audioNode ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetBuffer: function ( audioBuffer ) {\n\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\n\t\t\tif ( this.autoplay ) this.play();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tplay: function () {\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar source = this.context.createBufferSource();\n\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.onended = this.onEnded.bind( this );\n\t\t\tsource.playbackRate.setValueAtTime( this.playbackRate, this.startTime );\n\t\t\tsource.start( 0, this.startTime );\n\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.source = source;\n\n\t\t\treturn this.connect();\n\n\t\t},\n\n\t\tpause: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.startTime = this.context.currentTime;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.startTime = 0;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilters: function () {\n\n\t\t\treturn this.filters;\n\n\t\t},\n\n\t\tsetFilters: function ( value ) {\n\n\t\t\tif ( ! value ) value = [];\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\n\t\t\t} else {\n\n\t\t\t\tthis.filters = value;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.getFilters()[ 0 ];\n\n\t\t},\n\n\t\tsetFilter: function ( filter ) {\n\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t\t},\n\n\t\tsetPlaybackRate: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.playbackRate.setValueAtTime( this.playbackRate, this.context.currentTime );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetPlaybackRate: function () {\n\n\t\t\treturn this.playbackRate;\n\n\t\t},\n\n\t\tonEnded: function () {\n\n\t\t\tthis.isPlaying = false;\n\n\t\t},\n\n\t\tgetLoop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn this.loop;\n\n\t\t},\n\n\t\tsetLoop: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.loop = this.loop;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\t\t\n\t\tsetVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.value = value;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PositionalAudio( listener ) {\n\n\t\tAudio.call( this, listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\t\tconstructor: PositionalAudio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.panner;\n\n\t\t},\n\n\t\tgetRefDistance: function () {\n\n\t\t\treturn this.panner.refDistance;\n\n\t\t},\n\n\t\tsetRefDistance: function ( value ) {\n\n\t\t\tthis.panner.refDistance = value;\n\n\t\t},\n\n\t\tgetRolloffFactor: function () {\n\n\t\t\treturn this.panner.rolloffFactor;\n\n\t\t},\n\n\t\tsetRolloffFactor: function ( value ) {\n\n\t\t\tthis.panner.rolloffFactor = value;\n\n\t\t},\n\n\t\tgetDistanceModel: function () {\n\n\t\t\treturn this.panner.distanceModel;\n\n\t\t},\n\n\t\tsetDistanceModel: function ( value ) {\n\n\t\t\tthis.panner.distanceModel = value;\n\n\t\t},\n\n\t\tgetMaxDistance: function () {\n\n\t\t\treturn this.panner.maxDistance;\n\n\t\t},\n\n\t\tsetMaxDistance: function ( value ) {\n\n\t\t\tthis.panner.maxDistance = value;\n\n\t\t},\n\n\t\tupdateMatrixWorld: ( function () {\n\n\t\t\tvar position = new Vector3();\n\n\t\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n\t\t\t};\n\n\t\t} )()\n\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioAnalyser( audio, fftSize ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\tObject.assign( AudioAnalyser.prototype, {\n\n\t\tgetFrequencyData: function () {\n\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\t\treturn this.data;\n\n\t\t},\n\n\t\tgetAverageFrequency: function () {\n\n\t\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tvalue += data[ i ];\n\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Buffered scene graph property that allows weighted accumulation.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tvar bufferType = Float64Array,\n\t\t\tmixFunction;\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tbufferType = Array;\n\t\t\t\tmixFunction = this._select;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\n\t\t}\n\n\t\tthis.buffer = new bufferType( valueSize * 4 );\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\n\t\tthis._mixBufferRegion = mixFunction;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\tObject.assign( PropertyMixer.prototype, {\n\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function ( accuIndex, weight ) {\n\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\t\tif ( currentWeight === 0 ) {\n\n\t\t\t\t// accuN := incoming * weight\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\n\t\t\t} else {\n\n\t\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\n\t\t},\n\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function ( accuIndex ) {\n\n\t\t\tvar stride = this.valueSize,\n\t\t\t\tbuffer = this.buffer,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tweight = this.cumulativeWeight,\n\n\t\t\t\tbinding = this.binding;\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t\tif ( weight < 1 ) {\n\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t\t}\n\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function () {\n\n\t\t\tvar binding = this.binding;\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toriginalValueOffset = stride * 3;\n\n\t\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t},\n\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function () {\n\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t\t},\n\n\n\t\t// mix functions\n\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tif ( t >= 0.5 ) {\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t\t},\n\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A reference to a real property in the scene graph.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tObject.assign( Composite.prototype, {\n\n\t\tgetValue: function ( array, offset ) {\n\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t\t// and only call .getValue on the first\n\t\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t\t},\n\n\t\tsetValue: function ( array, offset ) {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].bind();\n\n\t\t\t}\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].unbind();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t}\n\n\tObject.assign( PropertyBinding, {\n\n\t\tComposite: Composite,\n\n\t\tcreate: function ( root, path, parsedPath ) {\n\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t\t} else {\n\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param  {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function ( name ) {\n\n\t\t\treturn name.replace( /\\s/g, '_' ).replace( /[^\\w-]/g, '' );\n\n\t\t},\n\n\t\tparseTrackName: function () {\n\n\t\t\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t\t\t// be matched to parse the rest of the track name.\n\t\t\tvar directoryRe = /((?:[\\w-]+[\\/:])*)/;\n\n\t\t\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\t\t\tvar nodeRe = /([\\w-\\.]+)?/;\n\n\t\t\t// Object on target node, and accessor. Name may contain only word\n\t\t\t// characters. Accessor may contain any character except closing bracket.\n\t\t\tvar objectRe = /(?:\\.([\\w-]+)(?:\\[(.+)\\])?)?/;\n\n\t\t\t// Property and accessor. May contain only word characters. Accessor may\n\t\t\t// contain any non-bracket characters.\n\t\t\tvar propertyRe = /\\.([\\w-]+)(?:\\[(.+)\\])?/;\n\n\t\t\tvar trackRe = new RegExp(''\n\t\t\t\t+ '^'\n\t\t\t\t+ directoryRe.source\n\t\t\t\t+ nodeRe.source\n\t\t\t\t+ objectRe.source\n\t\t\t\t+ propertyRe.source\n\t\t\t\t+ '$'\n\t\t\t);\n\n\t\t\tvar supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\n\t\t\treturn function ( trackName ) {\n\n\t\t\t\t\tvar matches = trackRe.exec( trackName );\n\n\t\t\t\t\tif ( ! matches ) {\n\n\t\t\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar results = {\n\t\t\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\t\t\tnodeName: matches[ 2 ],\n\t\t\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\t\t\tpropertyName: matches[ 5 ],     // required\n\t\t\t\t\t\tpropertyIndex: matches[ 6 ]\n\t\t\t\t\t};\n\n\t\t\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\t\t\t\tif ( lastDot !== undefined && lastDot !== -1 ) {\n\n\t\t\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\n\t\t\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t\t\t// include '.' characters).\n\t\t\t\t\t\tif ( supportedObjectNames.indexOf( objectName ) !== -1 ) {\n\n\t\t\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\t\t\t\tresults.objectName = objectName;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn results;\n\n\t\t\t\t};\n\n\t\t}(),\n\n\t\tfindNode: function ( root, nodeName ) {\n\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\t\treturn root;\n\n\t\t\t}\n\n\t\t\t// search into skeleton bones.\n\t\t\tif ( root.skeleton ) {\n\n\t\t\t\tvar searchSkeleton = function ( skeleton ) {\n\n\t\t\t\t\tfor ( var i = 0; i < skeleton.bones.length; i ++ ) {\n\n\t\t\t\t\t\tvar bone = skeleton.bones[ i ];\n\n\t\t\t\t\t\tif ( bone.name === nodeName ) {\n\n\t\t\t\t\t\t\treturn bone;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tvar bone = searchSkeleton( root.skeleton );\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// search into node subtree.\n\t\t\tif ( root.children ) {\n\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\t\tif ( subTreeNode ) {\n\n\t\t\t\t\treturn subTreeNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function () {},\n\t\t_setValue_unavailable: function () {},\n\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\n\t\tGetterByBindingType: [\n\n\t\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\t\tvar source = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t\t}\n\n\t\t],\n\n\t\tSetterByBindingTypeAndVersioning: [\n\n\t\t\t[\n\t\t\t\t// Direct\n\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// EntireArray\n\n\t\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// ArrayElement\n\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// HasToFromArray\n\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t]\n\n\t\t],\n\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.getValue( targetArray, offset );\n\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\n\t\t},\n\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.setValue( sourceArray, offset );\n\n\t\t},\n\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function () {\n\n\t\t\tvar targetObject = this.node,\n\t\t\t\tparsedPath = this.parsedPath,\n\n\t\t\t\tobjectName = parsedPath.objectName,\n\t\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\ttargetObject = PropertyBinding.findNode(\n\t\t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\t\tthis.node = targetObject;\n\n\t\t\t}\n\n\t\t\t// set fail state so we can just 'return' on error\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t\t// ensure there is a value node\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( objectName ) {\n\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\tswitch ( objectName ) {\n\n\t\t\t\t\tcase 'materials':\n\n\t\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// resolve property\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\t\tif ( nodeProperty === undefined ) {\n\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// determine versioning scheme\n\t\t\tvar versioning = this.Versioning.None;\n\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t\tthis.targetObject = targetObject;\n\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t\tthis.targetObject = targetObject;\n\n\t\t\t}\n\n\t\t\t// determine how the property gets bound\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else {\n\n\t\t\t\tthis.propertyName = propertyName;\n\n\t\t\t}\n\n\t\t\t// select getter / setter\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tthis.node = null;\n\n\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\n\t\t}\n\n\t} );\n\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\n\tObject.assign( PropertyBinding.prototype, {\n\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n\t} );\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t * \t-\tAdd objects you would otherwise pass as 'root' to the\n\t * \t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t * \t-\tInstead pass this object as 'root'.\n\t *\n\t * \t-\tYou can also add and remove objects later when the mixer\n\t * \t\tis running.\n\t *\n\t * Note:\n\t *\n\t *  \tObjects of this class appear as one object to the mixer,\n\t *  \tso cache control of the individual objects must be done\n\t *  \ton the group.\n\t *\n\t * Limitation:\n\t *\n\t * \t- \tThe animated properties must be compatible among the\n\t * \t\tall objects in the group.\n\t *\n\t *  -\tA single property can either be controlled through a\n\t *  \ttarget group or directly, but not both.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction AnimationObjectGroup( var_args ) {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = [];\t\t\t\t\t// inside: string\n\t\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\t\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() { return scope._objects.length; },\n\t\t\t\tget inUse() { return this.total - scope.nCachedObjects_; }\n\t\t\t},\n\n\t\t\tget bindingsPerObject() { return scope._bindings.length; }\n\n\t\t};\n\n\t}\n\n\tObject.assign( AnimationObjectGroup.prototype, {\n\n\t\tisAnimationObjectGroup: true,\n\n\t\tadd: function( var_args ) {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tpaths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ],\n\t\t\t\t\tknownObject = undefined;\n\n\t\t\t\tif ( index === undefined ) {\n\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tbindings[ j ].push(\n\t\t\t\t\t\t\t\tnew PropertyBinding(\n\t\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\t\tbinding = new PropertyBinding(\n\t\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\tremove: function( var_args ) {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// remove & forget\n\t\tuncache: function( var_args ) {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\t\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ],\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tobjects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\t\tindex = bindings.length;\n\n\t\t\tindicesByPath[ path ] = index;\n\n\t\t\tpaths.push( path );\n\t\t\tparsedPaths.push( parsedPath );\n\t\t\tbindings.push( bindingsForPath );\n\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = objects[ i ];\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\n\t\t},\n\n\t\tunsubscribe_: function ( path ) {\n\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\tbindings.pop();\n\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\tparsedPaths.pop();\n\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\tpaths.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\n\t * objects.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t *\n\t */\n\n\tfunction AnimationAction( mixer, clip, localRoot ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot || null;\n\n\t\tvar tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tvar interpolantSettings = {\n\t\t\t\tendingStart: \tZeroCurvatureEnding,\n\t\t\t\tendingEnd:\t\tZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants;\t// bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null;\t\t\t// for the memory manager\n\t\tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = -1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n\t\tthis.paused = false;\t\t\t\t// true -> zero effective time scale\n\t\tthis.enabled = true;\t\t\t\t// false -> zero effective weight\n\n\t\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n\t}\n\n\tObject.assign( AnimationAction.prototype, {\n\n\t\t// State & Scheduling\n\n\t\tplay: function() {\n\n\t\t\tthis._mixer._activateAction( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function() {\n\n\t\t\tthis._mixer._deactivateAction( this );\n\n\t\t\treturn this.reset();\n\n\t\t},\n\n\t\treset: function() {\n\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\n\t\t\tthis.time = 0;\t\t\t// restart clip\n\t\t\tthis._loopCount = -1;\t// forget previous loops\n\t\t\tthis._startTime = null;\t// forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\n\t\t},\n\n\t\tisRunning: function() {\n\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\t// return true when play has been called\n\t\tisScheduled: function() {\n\n\t\t\treturn this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\tstartAt: function( time ) {\n\n\t\t\tthis._startTime = time;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoop: function( mode, repetitions ) {\n\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Weight\n\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\tsetEffectiveWeight: function( weight ) {\n\n\t\t\tthis.weight = weight;\n\n\t\t\t// note: same logic as when updated at runtime\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\t\treturn this.stopFading();\n\n\t\t},\n\n\t\t// return the weight considering fading and .enabled\n\t\tgetEffectiveWeight: function() {\n\n\t\t\treturn this._effectiveWeight;\n\n\t\t},\n\n\t\tfadeIn: function( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t\t},\n\n\t\tfadeOut: function( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t\t},\n\n\t\tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\n\t\t\tfadeOutAction.fadeOut( duration );\n\t\t\tthis.fadeIn( duration );\n\n\t\t\tif( warp ) {\n\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t\t},\n\n\t\tstopFading: function() {\n\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif ( weightInterpolant !== null ) {\n\n\t\t\t\tthis._weightInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Time Scale Control\n\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\tsetEffectiveTimeScale: function( timeScale ) {\n\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\t// return the time scale considering warping and .paused\n\t\tgetEffectiveTimeScale: function() {\n\n\t\t\treturn this._effectiveTimeScale;\n\n\t\t},\n\n\t\tsetDuration: function( duration ) {\n\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\tsyncWith: function( action ) {\n\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\thalt: function( duration ) {\n\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t\t},\n\n\t\twarp: function( startTimeScale, endTimeScale, duration ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\ttimes[ 1 ] = now + duration;\n\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstopWarping: function() {\n\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\t\tthis._timeScaleInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Object Accessors\n\n\t\tgetMixer: function() {\n\n\t\t\treturn this._mixer;\n\n\t\t},\n\n\t\tgetClip: function() {\n\n\t\t\treturn this._clip;\n\n\t\t},\n\n\t\tgetRoot: function() {\n\n\t\t\treturn this._localRoot || this._mixer._root;\n\n\t\t},\n\n\t\t// Interna\n\n\t\t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t\t// called by the mixer\n\n\t\t\tif ( ! this.enabled ) {\n\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\t\tthis._updateWeight( time );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif ( startTime !== null ) {\n\n\t\t\t\t// check for scheduled start of action\n\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t\t}\n\n\t\t\t\t// start\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t\t// apply time scale and advance time\n\n\t\t\tdeltaTime *= this._updateTimeScale( time );\n\t\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t\t// note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\t\t\tvar weight = this._updateWeight( time );\n\n\t\t\tif ( weight > 0 ) {\n\n\t\t\t\tvar interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_updateWeight: function( time ) {\n\n\t\t\tvar weight = 0;\n\n\t\t\tif ( this.enabled ) {\n\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\n\t\t},\n\n\t\t_updateTimeScale: function( time ) {\n\n\t\t\tvar timeScale = 0;\n\n\t\t\tif ( ! this.paused ) {\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\n\t\t},\n\n\t\t_updateTime: function( deltaTime ) {\n\n\t\t\tvar time = this.time + deltaTime;\n\n\t\t\tif ( deltaTime === 0 ) return time;\n\n\t\t\tvar duration = this._clip.duration,\n\n\t\t\t\tloop = this.loop,\n\t\t\t\tloopCount = this._loopCount;\n\n\t\t\tif ( loop === LoopOnce ) {\n\n\t\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t\t// just started\n\n\t\t\t\t\tthis._loopCount = 0;\n\t\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\n\t\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\t\ttime = duration;\n\n\t\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\t\ttime = 0;\n\n\t\t\t\t\t} else break handle_stop;\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t\t// just started\n\n\t\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( time >= duration || time < 0 ) {\n\t\t\t\t\t// wrap around\n\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif ( pending < 0 ) {\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep running\n\n\t\t\t\t\t\tif ( pending === 0 ) {\n\t\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\t\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\t\tthis.time = time;\n\t\t\t\t\treturn duration - time;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.time = time;\n\t\t\treturn time;\n\n\t\t},\n\n\t\t_setEndings: function( atStart, atEnd, pingPong ) {\n\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif ( pingPong ) {\n\n\t\t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\n\t\t\t} else {\n\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\t\tif ( atStart ) {\n\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n\t\t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t\tif ( atEnd ) {\n\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n\t\t\t\t\t\t\tZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_scheduleFading: function( duration, weightNow, weightThen ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Player for AnimationClips.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction AnimationMixer( root ) {\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\tObject.assign( AnimationMixer.prototype, EventDispatcher.prototype, {\n\n\t\t_bindAction: function ( action, prototypeAction ) {\n\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\trootUuid = root.uuid,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingsByName === undefined ) {\n\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\ttrackName = track.name,\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t}\n\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_activateAction: function ( action ) {\n\n\t\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// increment reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_deactivateAction: function ( action ) {\n\n\t\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Memory manager\n\n\t\t_initMemoryManager: function () {\n\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\tthis._nActiveActions = 0;\n\n\t\t\tthis._actionsByClip = {};\n\t\t\t// inside:\n\t\t\t// {\n\t\t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n\t\t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n\t\t\t// }\n\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\tthis._nActiveControlInterpolants = 0;\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.stats = {\n\n\t\t\t\tactions: {\n\t\t\t\t\tget total() { return scope._actions.length; },\n\t\t\t\t\tget inUse() { return scope._nActiveActions; }\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() { return scope._bindings.length; },\n\t\t\t\t\tget inUse() { return scope._nActiveBindings; }\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() { return scope._controlInterpolants.length; },\n\t\t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Memory management for AnimationAction objects\n\n\t\t_isActiveAction: function ( action ) {\n\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\n\t\t},\n\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip === undefined ) {\n\n\t\t\t\tactionsForClip = {\n\n\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\tactionByRoot: {}\n\n\t\t\t\t};\n\n\t\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t\t} else {\n\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push( action );\n\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push( action );\n\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t\t},\n\n\t\t_removeInactiveAction: function ( action ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\tcacheIndex = action._cacheIndex;\n\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\tactions.pop();\n\n\t\t\taction._cacheIndex = null;\n\n\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\t\tlastKnownAction =\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\n\t\t\taction._byClipCacheIndex = null;\n\n\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\t\tdelete actionByRoot[ rootUuid ];\n\n\t\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t},\n\n\t\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendAction: function ( action ) {\n\n\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t// [  active actions >| inactive actions ]\n\t\t\t//                 s        a\n\t\t\t//                  <-swap->\n\t\t\t//                 a        s\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[ lastActiveIndex ] = action;\n\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t\t},\n\n\t\t_takeBackAction: function ( action ) {\n\n\t\t\t// [  active actions  | inactive actions ]\n\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t//        a        s\n\t\t\t//         <-swap->\n\t\t\t//        s        a\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[ firstInactiveIndex ] = action;\n\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t\t},\n\n\t\t// Memory management for PropertyMixer objects\n\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( bindingByName === undefined ) {\n\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t\t}\n\n\t\t\tbindingByName[ trackName ] = binding;\n\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push( binding );\n\n\t\t},\n\n\t\t_removeInactiveBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tpropBinding = binding.binding,\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\ttrackName = propBinding.path,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\n\t\t\tdelete bindingByName[ trackName ];\n\n\t\t\tremove_empty_map: {\n\n\t\t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t\t},\n\n\t\t_takeBackBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t\t},\n\n\n\t\t// Memory management of Interpolants for weight and time scale\n\n\t\t_lendControlInterpolant: function () {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\t\tif ( interpolant === undefined ) {\n\n\t\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t\t}\n\n\t\t\treturn interpolant;\n\n\t\t},\n\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t\t},\n\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\t\tprototypeAction = null;\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\tvar existingAction =\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\t\treturn existingAction;\n\n\t\t\t\t}\n\n\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\tif ( clipObject === null )\n\t\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t\t}\n\n\t\t\t// clip must be known when specified via string\n\t\t\tif ( clipObject === null ) return null;\n\n\t\t\t// allocate all resources required to run it\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n\t\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t\t// and make the action known to the memory manager\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\t\treturn newAction;\n\n\t\t},\n\n\t\t// get an existing action\n\t\texistingAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function () {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tactions[ i ].reset();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].useCount = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// advance the time and update apply the animation\n\t\tupdate: function ( deltaTime ) {\n\n\t\t\tdeltaTime *= this.timeScale;\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\n\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t\t// run active actions\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tvar action = actions[ i ];\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t\t// update scene graph\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// return this mixer's root target object\n\t\tgetRoot: function () {\n\n\t\t\treturn this._root;\n\n\t\t},\n\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function ( clip ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function ( root ) {\n\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( action !== undefined ) {\n\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName !== undefined ) {\n\n\t\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\t\tif ( action !== null ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Uniform( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t}\n\n\tUniform.prototype.clone = function () {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferGeometry() {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.maxInstancedCount = undefined;\n\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\t\tconstructor: InstancedBufferGeometry,\n\n\t\tisInstancedBufferGeometry: true,\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex\n\n\t\t\t} );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone() );\n\n\t\t\t}\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t\t}\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\t\tcount: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.count;\n\n\t\t\t}\n\n\t\t},\n\n\t\tarray: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.array;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBufferAttribute.prototype, {\n\n\t\tisInterleavedBufferAttribute: true,\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\tthis.data.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBuffer( array, stride ) {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.dynamic = false;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.onUploadCallback = function () {};\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\n\t\tisInterleavedBuffer: true,\n\n\t\tsetArray: function ( array ) {\n\n\t\t\tif ( Array.isArray( array ) ) {\n\n\t\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t\t}\n\n\t\t\tthis.count = array !== undefined ? array.length / this.stride : 0;\n\t\t\tthis.array = array;\n\n\t\t},\n\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tthis.dynamic = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.dynamic = source.dynamic;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\t\tInterleavedBuffer.call( this, array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\t\tconstructor: InstancedInterleavedBuffer,\n\n\t\tisInstancedInterleavedBuffer: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\n\t\tBufferAttribute.call( this, array, itemSize );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\t\tconstructor: InstancedBufferAttribute,\n\n\t\tisInstancedBufferAttribute: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author bhouston / http://clara.io/\n\t * @author stephomi / http://stephaneginier.com/\n\t */\n\n\tfunction Raycaster( origin, direction, near, far ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {},\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Raycaster.prototype, {\n\n\t\tlinePrecision: 1,\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Clock( autoStart ) {\n\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tObject.assign( Clock.prototype, {\n\n\t\tstart: function () {\n\n\t\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\n\t\t},\n\n\t\tgetElapsedTime: function () {\n\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\n\t\t},\n\n\t\tgetDelta: function () {\n\n\t\t\tvar diff = 0;\n\n\t\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\tif ( this.running ) {\n\n\t\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\n\t\t\t\tthis.elapsedTime += diff;\n\n\t\t\t}\n\n\t\t\treturn diff;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The poles (phi) are at the positive and negative y axis.\n\t * The equator starts at positive z.\n\t */\n\n\tfunction Spherical( radius, phi, theta ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Spherical.prototype, {\n\n\t\tset: function ( radius, phi, theta ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tmakeSafe: function() {\n\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function( vec3 ) {\n\n\t\t\tthis.radius = vec3.length();\n\n\t\t\tif ( this.radius === 0 ) {\n\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n\t\t\t\tthis.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t *\n\t */\n\n\tfunction Cylindrical( radius, theta, y ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Cylindrical.prototype, {\n\n\t\tset: function ( radius, theta, y ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function( vec3 ) {\n\n\t\t\tthis.radius = Math.sqrt( vec3.x * vec3.x + vec3.z * vec3.z );\n\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z );\n\t\t\tthis.y = vec3.y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction MorphBlendMesh( geometry, material ) {\n\r\n\t\tMesh.call( this, geometry, material );\r\n\r\n\t\tthis.animationsMap = {};\r\n\t\tthis.animationsList = [];\r\n\r\n\t\t// prepare default animation\r\n\t\t// (all frames played together in 1 second)\r\n\r\n\t\tvar numFrames = this.geometry.morphTargets.length;\r\n\r\n\t\tvar name = \"__default\";\r\n\r\n\t\tvar startFrame = 0;\r\n\t\tvar endFrame = numFrames - 1;\r\n\r\n\t\tvar fps = numFrames / 1;\r\n\r\n\t\tthis.createAnimation( name, startFrame, endFrame, fps );\r\n\t\tthis.setAnimationWeight( name, 1 );\r\n\r\n\t}\r\n\r\n\tMorphBlendMesh.prototype = Object.create( Mesh.prototype );\r\n\tMorphBlendMesh.prototype.constructor = MorphBlendMesh;\r\n\r\n\tMorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\r\n\t\tvar animation = {\r\n\r\n\t\t\tstart: start,\r\n\t\t\tend: end,\r\n\r\n\t\t\tlength: end - start + 1,\r\n\r\n\t\t\tfps: fps,\r\n\t\t\tduration: ( end - start ) / fps,\r\n\r\n\t\t\tlastFrame: 0,\r\n\t\t\tcurrentFrame: 0,\r\n\r\n\t\t\tactive: false,\r\n\r\n\t\t\ttime: 0,\r\n\t\t\tdirection: 1,\r\n\t\t\tweight: 1,\r\n\r\n\t\t\tdirectionBackwards: false,\r\n\t\t\tmirroredLoop: false\r\n\r\n\t\t};\r\n\r\n\t\tthis.animationsMap[ name ] = animation;\r\n\t\tthis.animationsList.push( animation );\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\r\n\t\tvar pattern = /([a-z]+)_?(\\d+)/i;\r\n\r\n\t\tvar firstAnimation, frameRanges = {};\r\n\r\n\t\tvar geometry = this.geometry;\r\n\r\n\t\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar morph = geometry.morphTargets[ i ];\r\n\t\t\tvar chunks = morph.name.match( pattern );\r\n\r\n\t\t\tif ( chunks && chunks.length > 1 ) {\r\n\r\n\t\t\t\tvar name = chunks[ 1 ];\r\n\r\n\t\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\r\n\t\t\t\tvar range = frameRanges[ name ];\r\n\r\n\t\t\t\tif ( i < range.start ) range.start = i;\r\n\t\t\t\tif ( i > range.end ) range.end = i;\r\n\r\n\t\t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var name in frameRanges ) {\r\n\r\n\t\t\tvar range = frameRanges[ name ];\r\n\t\t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\r\n\t\t}\r\n\r\n\t\tthis.firstAnimation = firstAnimation;\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.direction = 1;\r\n\t\t\tanimation.directionBackwards = false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.direction = - 1;\r\n\t\t\tanimation.directionBackwards = true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.fps = fps;\r\n\t\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.duration = duration;\r\n\t\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.weight = weight;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.time = time;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\r\n\t\tvar time = 0;\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\ttime = animation.time;\r\n\r\n\t\t}\r\n\r\n\t\treturn time;\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\r\n\t\tvar duration = - 1;\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tduration = animation.duration;\r\n\r\n\t\t}\r\n\r\n\t\treturn duration;\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.time = 0;\r\n\t\t\tanimation.active = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\r\n\t\tif ( animation ) {\r\n\r\n\t\t\tanimation.active = false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tMorphBlendMesh.prototype.update = function ( delta ) {\r\n\r\n\t\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar animation = this.animationsList[ i ];\r\n\r\n\t\t\tif ( ! animation.active ) continue;\r\n\r\n\t\t\tvar frameTime = animation.duration / animation.length;\r\n\r\n\t\t\tanimation.time += animation.direction * delta;\r\n\r\n\t\t\tif ( animation.mirroredLoop ) {\r\n\r\n\t\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\r\n\t\t\t\t\tanimation.direction *= - 1;\r\n\r\n\t\t\t\t\tif ( animation.time > animation.duration ) {\r\n\r\n\t\t\t\t\t\tanimation.time = animation.duration;\r\n\t\t\t\t\t\tanimation.directionBackwards = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( animation.time < 0 ) {\r\n\r\n\t\t\t\t\t\tanimation.time = 0;\r\n\t\t\t\t\t\tanimation.directionBackwards = false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tanimation.time = animation.time % animation.duration;\r\n\r\n\t\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar keyframe = animation.start + _Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n\t\t\tvar weight = animation.weight;\r\n\r\n\t\t\tif ( keyframe !== animation.currentFrame ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\r\n\t\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\r\n\t\t\t\tanimation.lastFrame = animation.currentFrame;\r\n\t\t\t\tanimation.currentFrame = keyframe;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\r\n\t\t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\r\n\t\t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n\t\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction ImmediateRenderObject( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.material = material;\n\t\tthis.render = function ( renderCallback ) {};\n\n\t}\n\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction VertexNormalsHelper( object, size, hex, linewidth ) {\n\n\t\tthis.object = object;\n\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t\t//\n\n\t\tvar nNormals = 0;\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tnNormals = objGeometry.faces.length * 3;\n\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\t\tnNormals = objGeometry.attributes.normal.count;\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.addAttribute( 'position', positions );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t\t//\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\tVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\n\tVertexNormalsHelper.prototype.update = ( function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\t\tvar normalMatrix = new Matrix3();\n\n\t\treturn function update() {\n\n\t\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\t\tthis.object.updateMatrixWorld( true );\n\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\t\tvar position = this.geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tvar objGeometry = this.object.geometry;\n\n\t\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\t\tvar faces = objGeometry.faces;\n\n\t\t\t\tvar idx = 0;\n\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n\t\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\t\t\tvar objPos = objGeometry.attributes.position;\n\n\t\t\t\tvar objNorm = objGeometry.attributes.normal;\n\n\t\t\t\tvar idx = 0;\n\n\t\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n\t\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t};\n\n\t}() );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction SpotLightHelper( light ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = [\n\t\t\t0, 0, 0,   0,   0,   1,\n\t\t\t0, 0, 0,   1,   0,   1,\n\t\t\t0, 0, 0, - 1,   0,   1,\n\t\t\t0, 0, 0,   0,   1,   1,\n\t\t\t0, 0, 0,   0, - 1,   1\n\t\t];\n\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\n\n\tSpotLightHelper.prototype.dispose = function () {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t};\n\n\tSpotLightHelper.prototype.update = function () {\n\n\t\tvar vector = new Vector3();\n\t\tvar vector2 = new Vector3();\n\n\t\treturn function update() {\n\n\t\t\tthis.light.updateMatrixWorld();\n\n\t\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author Sean Griffin / http://twitter.com/sgrif\n\t * @author Michael Guerrero / http://realitymeltdown.com\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author ikerr / http://verold.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction getBoneList( object ) {\n\n\t\tvar boneList = [];\n\n\t\tif ( object && object.isBone ) {\n\n\t\t\tboneList.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t\t}\n\n\t\treturn boneList;\n\n\t}\n\n\tfunction SkeletonHelper( object ) {\n\n\t\tvar bones = getBoneList( object );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar color1 = new Color( 0, 0, 1 );\n\t\tvar color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.onBeforeRender();\n\n\t}\n\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\n\n\tSkeletonHelper.prototype.onBeforeRender = function () {\n\n\t\tvar vector = new Vector3();\n\n\t\tvar boneMatrix = new Matrix4();\n\t\tvar matrixWorldInv = new Matrix4();\n\n\t\treturn function onBeforeRender() {\n\n\t\t\tvar bones = this.bones;\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tmatrixWorldInv.getInverse( this.root.matrixWorld );\n\n\t\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\t\tvar bone = bones[ i ];\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t\t\t\t\tvector.setFromMatrixPosition( boneMatrix );\n\t\t\t\t\tposition.setXYZ( j, vector.x, vector.y, vector.z );\n\n\t\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t\tvector.setFromMatrixPosition( boneMatrix );\n\t\t\t\t\tposition.setXYZ( j + 1, vector.x, vector.y, vector.z );\n\n\t\t\t\t\tj += 2;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PointLightHelper( light, sphereSize ) {\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\t\tmaterial.color.copy( this.light.color );\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/*\n\t\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\t\tvar d = light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\n\t\tthis.add( this.lightDistance );\n\t\t*/\n\n\t}\n\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\n\tPointLightHelper.prototype.constructor = PointLightHelper;\n\n\tPointLightHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t};\n\n\tPointLightHelper.prototype.update = function () {\n\n\t\tthis.material.color.copy( this.light.color );\n\n\t\t/*\n\t\tvar d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t};\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction RectAreaLightHelper( light ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tvar material = new LineBasicMaterial( { color: light.color } );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.addAttribute( 'position', new BufferAttribute( new Float32Array( 5 * 3 ), 3 ) );\n\n\t\tthis.add( new Line( geometry, material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tRectAreaLightHelper.prototype = Object.create( Object3D.prototype );\n\tRectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\n\n\tRectAreaLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tRectAreaLightHelper.prototype.update = function () {\n\n\t\tvar line = this.children[ 0 ];\n\n\t\t// update material\n\n\t\tline.material.color.copy( this.light.color );\n\n\t\t// calculate new dimensions of the helper\n\n\t\tvar hx = this.light.width * 0.5;\n\t\tvar hy = this.light.height * 0.5;\n\n\t\tvar position = line.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\t// update vertices\n\n\t\tarray[  0 ] =   hx; array[  1 ] = - hy; array[  2 ] = 0;\n\t\tarray[  3 ] =   hx; array[  4 ] =   hy; array[  5 ] = 0;\n\t\tarray[  6 ] = - hx; array[  7 ] =   hy; array[  8 ] = 0;\n\t\tarray[  9 ] = - hx; array[ 10 ] = - hy; array[ 11 ] = 0;\n\t\tarray[ 12 ] =   hx; array[ 13 ] = - hy; array[ 14 ] = 0;\n\n\t\tposition.needsUpdate = true;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction HemisphereLightHelper( light, size ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tvar geometry = new OctahedronBufferGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tvar material = new MeshBasicMaterial( { vertexColors: VertexColors, wireframe: true } );\n\n\t\tvar position = geometry.getAttribute( 'position' );\n\t\tvar colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n\tHemisphereLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tHemisphereLightHelper.prototype.update = function () {\n\n\t\tvar vector = new Vector3();\n\n\t\tvar color1 = new Color();\n\t\tvar color2 = new Color();\n\n\t\treturn function update() {\n\n\t\t\tvar mesh = this.children[ 0 ];\n\n\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\tcolor1.copy( this.light.color );\n\t\t\tcolor2.copy( this.light.groundColor );\n\n\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tvar color = ( i < ( l / 2 ) ) ? color1 : color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tmesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction GridHelper( size, divisions, color1, color2 ) {\n\n\t\tsize = size || 10;\n\t\tdivisions = divisions || 10;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar center = divisions / 2;\n\t\tvar step = size / divisions;\n\t\tvar halfSize = size / 2;\n\n\t\tvar vertices = [], colors = [];\n\n\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tvar color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tGridHelper.prototype = Object.create( LineSegments.prototype );\n\tGridHelper.prototype.constructor = GridHelper;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author Hectate / http://www.github.com/Hectate\n\t */\n\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\t\tradius = radius || 10;\n\t\tradials = radials || 16;\n\t\tcircles = circles || 8;\n\t\tdivisions = divisions || 64;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar x, z;\n\t\tvar v, i, j, r, color;\n\n\t\t// create the radials\n\n\t\tfor ( i = 0; i <= radials; i ++ ) {\n\n\t\t\tv = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * radius;\n\t\t\tz = Math.cos( v ) * radius;\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( x, 0, z );\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t\t// create the circles\n\n\t\tfor ( i = 0; i <= circles; i ++ ) {\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tr = radius - ( radius / circles * i );\n\n\t\t\tfor ( j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\n\tPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction FaceNormalsHelper( object, size, hex, linewidth ) {\n\n\t\t// FaceNormalsHelper only supports THREE.Geometry\n\n\t\tthis.object = object;\n\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t\t//\n\n\t\tvar nNormals = 0;\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tnNormals = objGeometry.faces.length;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.addAttribute( 'position', positions );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t\t//\n\n\t\tthis.matrixAutoUpdate = false;\n\t\tthis.update();\n\n\t}\n\n\tFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\tFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\n\tFaceNormalsHelper.prototype.update = ( function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\t\tvar normalMatrix = new Matrix3();\n\n\t\treturn function update() {\n\n\t\t\tthis.object.updateMatrixWorld( true );\n\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\t\tvar position = this.geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tvar objGeometry = this.object.geometry;\n\n\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\tvar faces = objGeometry.faces;\n\n\t\t\tvar idx = 0;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar normal = face.normal;\n\n\t\t\t\tv1.copy( vertices[ face.a ] )\n\t\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t\t.divideScalar( 3 )\n\t\t\t\t\t.applyMatrix4( matrixWorld );\n\n\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t};\n\n\t}() );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction DirectionalLightHelper( light, size ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tif ( size === undefined ) size = 1;\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size,   size, 0,\n\t\t\t  size,   size, 0,\n\t\t\t  size, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size,   size, 0\n\t\t], 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.add( new Line( geometry, material ) );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.add( new Line( geometry, material ));\n\n\t\tthis.update();\n\n\t}\n\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n\tDirectionalLightHelper.prototype.dispose = function () {\n\n\t\tvar lightPlane = this.children[ 0 ];\n\t\tvar targetLine = this.children[ 1 ];\n\n\t\tlightPlane.geometry.dispose();\n\t\tlightPlane.material.dispose();\n\t\ttargetLine.geometry.dispose();\n\t\ttargetLine.material.dispose();\n\n\t};\n\n\tDirectionalLightHelper.prototype.update = function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\t\tvar v3 = new Vector3();\n\n\t\treturn function update() {\n\n\t\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t\tv3.subVectors( v2, v1 );\n\n\t\t\tvar lightPlane = this.children[ 0 ];\n\t\t\tvar targetLine = this.children[ 1 ];\n\n\t\t\tlightPlane.lookAt( v3 );\n\t\t\tlightPlane.material.color.copy( this.light.color );\n\n\t\t\ttargetLine.lookAt( v3 );\n\t\t\ttargetLine.scale.z = v3.length();\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\tfunction CameraHelper( camera ) {\n\n\t\tvar geometry = new BufferGeometry();\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar pointMap = {};\n\n\t\t// colors\n\n\t\tvar colorFrustum = new Color( 0xffaa00 );\n\t\tvar colorCone = new Color( 0xff0000 );\n\t\tvar colorUp = new Color( 0x00aaff );\n\t\tvar colorTarget = new Color( 0xffffff );\n\t\tvar colorCross = new Color( 0x333333 );\n\n\t\t// near\n\n\t\taddLine( \"n1\", \"n2\", colorFrustum );\n\t\taddLine( \"n2\", \"n4\", colorFrustum );\n\t\taddLine( \"n4\", \"n3\", colorFrustum );\n\t\taddLine( \"n3\", \"n1\", colorFrustum );\n\n\t\t// far\n\n\t\taddLine( \"f1\", \"f2\", colorFrustum );\n\t\taddLine( \"f2\", \"f4\", colorFrustum );\n\t\taddLine( \"f4\", \"f3\", colorFrustum );\n\t\taddLine( \"f3\", \"f1\", colorFrustum );\n\n\t\t// sides\n\n\t\taddLine( \"n1\", \"f1\", colorFrustum );\n\t\taddLine( \"n2\", \"f2\", colorFrustum );\n\t\taddLine( \"n3\", \"f3\", colorFrustum );\n\t\taddLine( \"n4\", \"f4\", colorFrustum );\n\n\t\t// cone\n\n\t\taddLine( \"p\", \"n1\", colorCone );\n\t\taddLine( \"p\", \"n2\", colorCone );\n\t\taddLine( \"p\", \"n3\", colorCone );\n\t\taddLine( \"p\", \"n4\", colorCone );\n\n\t\t// up\n\n\t\taddLine( \"u1\", \"u2\", colorUp );\n\t\taddLine( \"u2\", \"u3\", colorUp );\n\t\taddLine( \"u3\", \"u1\", colorUp );\n\n\t\t// target\n\n\t\taddLine( \"c\", \"t\", colorTarget );\n\t\taddLine( \"p\", \"c\", colorCross );\n\n\t\t// cross\n\n\t\taddLine( \"cn1\", \"cn2\", colorCross );\n\t\taddLine( \"cn3\", \"cn4\", colorCross );\n\n\t\taddLine( \"cf1\", \"cf2\", colorCross );\n\t\taddLine( \"cf3\", \"cf4\", colorCross );\n\n\t\tfunction addLine( a, b, color ) {\n\n\t\t\taddPoint( a, color );\n\t\t\taddPoint( b, color );\n\n\t\t}\n\n\t\tfunction addPoint( id, color ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t}\n\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\n\tCameraHelper.prototype.constructor = CameraHelper;\n\n\tCameraHelper.prototype.update = function () {\n\n\t\tvar geometry, pointMap;\n\n\t\tvar vector = new Vector3();\n\t\tvar camera = new Camera();\n\n\t\tfunction setPoint( point, x, y, z ) {\n\n\t\t\tvector.set( x, y, z ).unproject( camera );\n\n\t\t\tvar points = pointMap[ point ];\n\n\t\t\tif ( points !== undefined ) {\n\n\t\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\t\tposition.setXYZ( points[ i ], vector.x, vector.y, vector.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn function update() {\n\n\t\t\tgeometry = this.geometry;\n\t\t\tpointMap = this.pointMap;\n\n\t\t\tvar w = 1, h = 1;\n\n\t\t\t// we need just camera projection matrix\n\t\t\t// world matrix must be identity\n\n\t\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n\t\t\t// center / target\n\n\t\t\tsetPoint( \"c\", 0, 0, - 1 );\n\t\t\tsetPoint( \"t\", 0, 0,  1 );\n\n\t\t\t// near\n\n\t\t\tsetPoint( \"n1\", - w, - h, - 1 );\n\t\t\tsetPoint( \"n2\",   w, - h, - 1 );\n\t\t\tsetPoint( \"n3\", - w,   h, - 1 );\n\t\t\tsetPoint( \"n4\",   w,   h, - 1 );\n\n\t\t\t// far\n\n\t\t\tsetPoint( \"f1\", - w, - h, 1 );\n\t\t\tsetPoint( \"f2\",   w, - h, 1 );\n\t\t\tsetPoint( \"f3\", - w,   h, 1 );\n\t\t\tsetPoint( \"f4\",   w,   h, 1 );\n\n\t\t\t// up\n\n\t\t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n\t\t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n\t\t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\n\t\t\t// cross\n\n\t\t\tsetPoint( \"cf1\", - w,   0, 1 );\n\t\t\tsetPoint( \"cf2\",   w,   0, 1 );\n\t\t\tsetPoint( \"cf3\",   0, - h, 1 );\n\t\t\tsetPoint( \"cf4\",   0,   h, 1 );\n\n\t\t\tsetPoint( \"cn1\", - w,   0, - 1 );\n\t\t\tsetPoint( \"cn2\",   w,   0, - 1 );\n\t\t\tsetPoint( \"cn3\",   0, - h, - 1 );\n\t\t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\n\t\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t */\n\n\tfunction BoxHelper( object, color ) {\n\n\t\tthis.object = object;\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tvar positions = new Float32Array( 8 * 3 );\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\n\tBoxHelper.prototype.constructor = BoxHelper;\n\n\tBoxHelper.prototype.update = ( function () {\n\n\t\tvar box = new Box3();\n\n\t\treturn function update( object ) {\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t\t}\n\n\t\t\tif ( this.object !== undefined ) {\n\n\t\t\t\tbox.setFromObject( this.object );\n\n\t\t\t}\n\n\t\t\tif ( box.isEmpty() ) return;\n\n\t\t\tvar min = box.min;\n\t\t\tvar max = box.max;\n\n\t\t\t/*\n\t\t\t  5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\n\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tvar position = this.geometry.attributes.position;\n\t\t\tvar array = position.array;\n\n\t\t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n\t\t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n\t\t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n\t\t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t\tthis.geometry.computeBoundingSphere();\n\n\t\t};\n\n\t} )();\n\n\tBoxHelper.prototype.setFromObject = function ( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author zz85 / http://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t *\n\t * Creates an arrow for visualizing directions\n\t *\n\t * Parameters:\n\t *  dir - Vector3\n\t *  origin - Vector3\n\t *  length - Number\n\t *  color - color in hex value\n\t *  headLength - Number\n\t *  headWidth - Number\n\t */\n\n\tvar lineGeometry;\n\tvar coneGeometry;\n\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tObject3D.call( this );\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\t\tif ( length === undefined ) length = 1;\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tif ( lineGeometry === undefined ) {\n\n\t\t\tlineGeometry = new BufferGeometry();\n\t\t\tlineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\tconeGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\tconeGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\n\tArrowHelper.prototype.constructor = ArrowHelper;\n\n\tArrowHelper.prototype.setDirection = ( function () {\n\n\t\tvar axis = new Vector3();\n\t\tvar radians;\n\n\t\treturn function setDirection( dir ) {\n\n\t\t\t// dir is assumed to be normalized\n\n\t\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\t\tradians = Math.acos( dir.y );\n\n\t\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n\t\t\t}\n\n\t\t};\n\n\t}() );\n\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t};\n\n\tArrowHelper.prototype.setColor = function ( color ) {\n\n\t\tthis.line.material.color.copy( color );\n\t\tthis.cone.material.color.copy( color );\n\n\t};\n\n\t/**\n\t * @author sroucheray / http://sroucheray.org/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AxisHelper( size ) {\n\n\t\tsize = size || 1;\n\n\t\tvar vertices = [\n\t\t\t0, 0, 0,  size, 0, 0,\n\t\t\t0, 0, 0,  0, size, 0,\n\t\t\t0, 0, 0,  0, 0, size\n\t\t];\n\n\t\tvar colors = [\n\t\t\t1, 0, 0,  1, 0.6, 0,\n\t\t\t0, 1, 0,  0.6, 1, 0,\n\t\t\t0, 0, 1,  0, 0.6, 1\n\t\t];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tAxisHelper.prototype = Object.create( LineSegments.prototype );\n\tAxisHelper.prototype.constructor = AxisHelper;\n\n\t/**\n\t * @author zz85 https://github.com/zz85\n\t *\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *   p(0) = x0, p(1) = x1\n\t\t *  and\n\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t */\n\t\tfunction init( x0, x1, t0, t1 ) {\n\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t\t},\n\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\n\t\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t\t},\n\n\t\t\tcalc: function ( t ) {\n\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly();\n\tvar py = new CubicPoly();\n\tvar pz = new CubicPoly();\n\n\tfunction CatmullRomCurve3( points ) {\n\n\t\tCurve.call( this );\n\n\t\tif ( points.length < 2 ) console.warn( 'THREE.CatmullRomCurve3: Points array needs at least two entries.' );\n\n\t\tthis.points = points || [];\n\t\tthis.closed = false;\n\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\n\tCatmullRomCurve3.prototype.getPoint = function ( t ) {\n\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\n\t\tvar point = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tvar intPoint = Math.floor( point );\n\t\tvar weight = point - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tp1 = points[ intPoint % l ];\n\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.type === 'catmullrom' ) {\n\n\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\n\t\t}\n\n\t\treturn new Vector3( px.calc( weight ), py.calc( weight ), pz.calc( weight ) );\n\n\t};\n\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\n\tCubicBezierCurve3.prototype.getPoint = function ( t ) {\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\treturn new Vector3(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t};\n\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t ) {\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\treturn new Vector3(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t};\n\n\tfunction LineCurve3( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tLineCurve3.prototype = Object.create( Curve.prototype );\n\tLineCurve3.prototype.constructor = LineCurve3;\n\n\tLineCurve3.prototype.getPoint = function ( t ) {\n\n\t\tif ( t === 1 ) {\n\n\t\t\treturn this.v2.clone();\n\n\t\t}\n\n\t\tvar vector = new Vector3();\n\n\t\tvector.subVectors( this.v2, this.v1 ); // diff\n\t\tvector.multiplyScalar( t );\n\t\tvector.add( this.v1 );\n\n\t\treturn vector;\n\n\t};\n\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t}\n\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\tArcCurve.prototype.constructor = ArcCurve;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar SceneUtils = {\n\n\t\tcreateMultiMaterialObject: function ( geometry, materials ) {\n\n\t\t\tvar group = new Group();\n\n\t\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\t\tgroup.add( new Mesh( geometry, materials[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t},\n\n\t\tdetach: function ( child, parent, scene ) {\n\n\t\t\tchild.applyMatrix( parent.matrixWorld );\n\t\t\tparent.remove( child );\n\t\t\tscene.add( child );\n\n\t\t},\n\n\t\tattach: function ( child, scene, parent ) {\n\n\t\t\tchild.applyMatrix( new Matrix4().getInverse( parent.matrixWorld ) );\n\n\t\t\tscene.remove( child );\n\t\t\tparent.add( child );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n\t}\n\n\tvar LineStrip = 0;\n\n\tvar LinePieces = 1;\n\n\tfunction MeshFaceMaterial( materials ) {\n\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\t\treturn materials;\n\n\t}\n\n\tfunction MultiMaterial( materials ) {\n\n\t\tif ( materials === undefined ) materials = [];\n\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\t\tmaterials.clone = function () {\n\n\t\t\treturn materials.slice();\n\n\t\t};\n\t\treturn materials;\n\n\t}\n\n\tfunction PointCloud( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction Particle( material ) {\n\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\t\treturn new Sprite( material );\n\n\t}\n\n\tfunction ParticleSystem( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction PointCloudMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleBasicMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleSystemMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction Vertex( x, y, z ) {\n\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new Vector3( x, y, z );\n\n\t}\n\n\t//\n\n\tfunction DynamicBufferAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\t\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\n\t}\n\n\tfunction Int8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\t\treturn new Int8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\t\treturn new Uint8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\t\treturn new Int16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\t\treturn new Uint16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\t\treturn new Int32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\t\treturn new Uint32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\t\treturn new Float32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float64Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\t\treturn new Float64BufferAttribute( array, itemSize );\n\n\t}\n\n\t//\n\n\tCurve.create = function ( construct, getPoint ) {\n\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\t\tconstruct.prototype = Object.create( Curve.prototype );\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\n\t\treturn construct;\n\n\t};\n\n\t//\n\n\tfunction ClosedSplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\n\t}\n\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction SplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction Spline( points ) {\n\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\tObject.assign( Spline.prototype, {\n\n\t\tinitFromArray: function ( a ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t\t},\n\t\tgetControlPointsArray: function ( optionalTarget ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t\t},\n\t\treparametrizeByArcLength: function ( samplingCoef ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\tfunction BoundingBoxHelper( object, color ) {\n\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\t\treturn new BoxHelper( object, color );\n\n\t}\n\n\tfunction EdgesHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\t\t\n\t};\n\n\tfunction WireframeHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\t//\n\n\tfunction XHRLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\t\treturn new FileLoader( manager );\n\n\t}\n\n\tfunction BinaryTextureLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\t\treturn new DataTextureLoader( manager );\n\n\t}\n\n\t//\n\n\tObject.assign( Box2.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tObject.assign( Box3.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tLine3.prototype.center = function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t};\n\n\t_Math.random16 = function () {\n\n\t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n\t\treturn Math.random();\n\n\t};\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix3( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( a ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.'  );\n\n\t\t},\n\t\tapplyToBuffer: function( buffer, offset, length ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\t\treturn this.applyToBufferAttribute( buffer );\n\n\t\t},\n\t\tapplyToVector3Array: function( array, offset, length ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\textractPosition: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\treturn this.copyPosition( m );\n\n\t\t},\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tgetPosition: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function getPosition() {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n\t\t\t};\n\n\t\t}(),\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\treturn this.makeRotationFromQuaternion( q );\n\n\t\t},\n\t\tmultiplyToArray: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector4: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( a ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.'  );\n\n\t\t},\n\t\trotateAxis: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\tv.transformDirection( this );\n\n\t\t},\n\t\tcrossVector: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\ttranslate: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t\t},\n\t\trotateX: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t\t},\n\t\trotateY: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t\t},\n\t\trotateZ: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t\t},\n\t\trotateByAxis: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t\t},\n\t\tapplyToBuffer: function( buffer, offset, length ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\t\treturn this.applyToBufferAttribute( buffer );\n\n\t\t},\n\t\tapplyToVector3Array: function( array, offset, length ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t\t},\n\t\tmakeFrustum: function( left, right, bottom, top, near, far ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t\t}\n\n\t} );\n\n\tPlane.prototype.isIntersectionLine = function ( line ) {\n\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\n\t};\n\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\n\t};\n\n\tObject.assign( Ray.prototype, {\n\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionPlane: function ( plane ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\treturn this.intersectsPlane( plane );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Shape.prototype, {\n\n\t\textrude: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\t\treturn new ExtrudeGeometry( this, options );\n\n\t\t},\n\t\tmakeGeometry: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\t\treturn new ShapeGeometry( this, options );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.error( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tsetEulerFromRotationMatrix: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t\t},\n\t\tsetEulerFromQuaternion: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t\t},\n\t\tgetPositionFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\treturn this.setFromMatrixPosition( m );\n\n\t\t},\n\t\tgetScaleFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\treturn this.setFromMatrixScale( m );\n\n\t\t},\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t\t},\n\t\tapplyProjection: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\t\treturn this.applyMatrix4( m );\n\n\t\t},\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.error( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.error( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tGeometry.prototype.computeTangents = function () {\n\n\t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t};\n\n\tObject.assign( Object3D.prototype, {\n\n\t\tgetChildByName: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\treturn this.getObjectByName( name );\n\n\t\t},\n\t\trenderDepth: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t\t},\n\t\ttranslate: function ( distance, axis ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\treturn this.translateOnAxis( axis, distance );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Object3D.prototype, {\n\n\t\teulerOrder: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\treturn this.rotation.order;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\tthis.rotation.order = value;\n\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( LOD.prototype, {\n\n\t\tobjects: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\treturn this.arcLengthDivisions;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\tthis.arcLengthDivisions = value;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\t\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength( focalLength );\n\n\t};\n\n\t//\n\n\tObject.defineProperties( Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\tthis.shadow.camera.fov = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\tthis.shadow.camera.left = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\tthis.shadow.camera.right = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\tthis.shadow.camera.top = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\tthis.shadow.camera.near = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\tthis.shadow.camera.far = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\tthis.shadow.bias = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( BufferAttribute.prototype, {\n\n\t\tlength: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\t\treturn this.array.length;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferGeometry.prototype, {\n\n\t\taddIndex: function ( index ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\tthis.setIndex( index );\n\n\t\t},\n\t\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\t\tif ( indexOffset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t\t}\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\tthis.addGroup( start, count );\n\n\t\t},\n\t\tclearDrawCalls: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\tthis.clearGroups();\n\n\t\t},\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeOffsets: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( BufferGeometry.prototype, {\n\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Uniform.prototype, {\n\n\t\tdynamic: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Material.prototype, {\n\n\t\twrapAround: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\t\treturn new Color();\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\t\tmetal: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( ShaderMaterial.prototype, {\n\n\t\tderivatives: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\treturn this.extensions.derivatives;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\tthis.extensions.derivatives = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( WebGLRenderer.prototype, {\n\n\t\tgetCurrentRenderTarget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\t\treturn this.getRenderTarget();\n\n\t\t},\n\n\t\tsupportsFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t\t},\n\t\tsupportsHalfFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t\t},\n\t\tsupportsStandardDerivatives: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t},\n\t\tsupportsBlendMinMax: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t\t},\n\t\tsupportsVertexTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\t\treturn this.capabilities.vertexTextures;\n\n\t\t},\n\t\tsupportsInstancedArrays: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t},\n\t\tenableScissorTest: function ( boolean ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\tthis.setScissorTest( boolean );\n\n\t\t},\n\t\tinitMaterial: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t\t},\n\t\taddPrePlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t\t},\n\t\taddPostPlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t\t},\n\t\tupdateShadowMap: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLRenderer.prototype, {\n\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.enabled;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tthis.shadowMap.enabled = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tthis.shadowMap.type = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.cullFace;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n\t\t\t\tthis.shadowMap.cullFace = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n\tObject.defineProperties( WebGLShadowMap.prototype, {\n\n\t\tcullFace: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.renderReverseSided ? CullFaceFront : CullFaceBack;\n\n\t\t\t},\n\t\t\tset: function ( cullFace ) {\n\n\t\t\t\tvar value = ( cullFace !== CullFaceBack );\n\t\t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n\t\t\t\tthis.renderReverseSided = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\t\twrapS: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\treturn this.texture.wrapS;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\tthis.texture.wrapS = value;\n\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\treturn this.texture.wrapT;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\tthis.texture.wrapT = value;\n\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\treturn this.texture.magFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\tthis.texture.magFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\treturn this.texture.minFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\tthis.texture.minFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\treturn this.texture.anisotropy;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\tthis.texture.anisotropy = value;\n\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\treturn this.texture.offset;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\tthis.texture.offset = value;\n\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\treturn this.texture.repeat;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\tthis.texture.repeat = value;\n\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\treturn this.texture.format;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\tthis.texture.format = value;\n\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\treturn this.texture.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\tthis.texture.type = value;\n\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\treturn this.texture.generateMipmaps;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tAudio.prototype.load = function ( file ) {\n\n\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\t\tvar scope = this;\n\t\tvar audioLoader = new AudioLoader();\n\t\taudioLoader.load( file, function ( buffer ) {\n\n\t\t\tscope.setBuffer( buffer );\n\n\t\t} );\n\t\treturn this;\n\n\t};\n\n\tAudioAnalyser.prototype.getData = function () {\n\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\n\t};\n\n\t//\n\n\tvar GeometryUtils = {\n\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\t\tvar matrix;\n\n\t\t\tif ( geometry2.isMesh ) {\n\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t\t}\n\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t\t},\n\n\t\tcenter: function ( geometry ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\treturn geometry.center();\n\n\t\t}\n\n\t};\n\n\tvar ImageUtils = {\n\n\t\tcrossOrigin: undefined,\n\n\t\tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\t\tvar loader = new TextureLoader();\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\t\tvar loader = new CubeTextureLoader();\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tloadCompressedTexture: function () {\n\n\t\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t\t},\n\n\t\tloadCompressedTextureCube: function () {\n\n\t\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tfunction Projector() {\n\n\t\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n\t\tthis.projectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\t\tvector.project( camera );\n\n\t\t};\n\n\t\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\t\tvector.unproject( camera );\n\n\t\t};\n\n\t\tthis.pickingRay = function () {\n\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t\t};\n\n\t}\n\n\t//\n\n\tfunction CanvasRenderer() {\n\n\t\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n\t\tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\tthis.clear = function () {};\n\t\tthis.render = function () {};\n\t\tthis.setClearColor = function () {};\n\t\tthis.setSize = function () {};\n\n\t}\n\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.ShaderLib = ShaderLib;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.FogExp2 = FogExp2;\n\texports.Fog = Fog;\n\texports.Scene = Scene;\n\texports.LensFlare = LensFlare;\n\texports.Sprite = Sprite;\n\texports.LOD = LOD;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.Skeleton = Skeleton;\n\texports.Bone = Bone;\n\texports.Mesh = Mesh;\n\texports.LineSegments = LineSegments;\n\texports.LineLoop = LineLoop;\n\texports.Line = Line;\n\texports.Points = Points;\n\texports.Group = Group;\n\texports.VideoTexture = VideoTexture;\n\texports.DataTexture = DataTexture;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CubeTexture = CubeTexture;\n\texports.CanvasTexture = CanvasTexture;\n\texports.DepthTexture = DepthTexture;\n\texports.Texture = Texture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.TextureLoader = TextureLoader;\n\texports.ObjectLoader = ObjectLoader;\n\texports.MaterialLoader = MaterialLoader;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.LoadingManager = LoadingManager;\n\texports.JSONLoader = JSONLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.FontLoader = FontLoader;\n\texports.FileLoader = FileLoader;\n\texports.Loader = Loader;\n\texports.Cache = Cache;\n\texports.AudioLoader = AudioLoader;\n\texports.SpotLightShadow = SpotLightShadow;\n\texports.SpotLight = SpotLight;\n\texports.PointLight = PointLight;\n\texports.RectAreaLight = RectAreaLight;\n\texports.HemisphereLight = HemisphereLight;\n\texports.DirectionalLightShadow = DirectionalLightShadow;\n\texports.DirectionalLight = DirectionalLight;\n\texports.AmbientLight = AmbientLight;\n\texports.LightShadow = LightShadow;\n\texports.Light = Light;\n\texports.StereoCamera = StereoCamera;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.CubeCamera = CubeCamera;\n\texports.ArrayCamera = ArrayCamera;\n\texports.Camera = Camera;\n\texports.AudioListener = AudioListener;\n\texports.PositionalAudio = PositionalAudio;\n\texports.AudioContext = AudioContext;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.Audio = Audio;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.PropertyMixer = PropertyMixer;\n\texports.PropertyBinding = PropertyBinding;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.AnimationUtils = AnimationUtils;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationClip = AnimationClip;\n\texports.Uniform = Uniform;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.BufferGeometry = BufferGeometry;\n\texports.GeometryIdCount = GeometryIdCount;\n\texports.Geometry = Geometry;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.Face3 = Face3;\n\texports.Object3D = Object3D;\n\texports.Raycaster = Raycaster;\n\texports.Layers = Layers;\n\texports.EventDispatcher = EventDispatcher;\n\texports.Clock = Clock;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.Interpolant = Interpolant;\n\texports.Triangle = Triangle;\n\texports.Math = _Math;\n\texports.Spherical = Spherical;\n\texports.Cylindrical = Cylindrical;\n\texports.Plane = Plane;\n\texports.Frustum = Frustum;\n\texports.Sphere = Sphere;\n\texports.Ray = Ray;\n\texports.Matrix4 = Matrix4;\n\texports.Matrix3 = Matrix3;\n\texports.Box3 = Box3;\n\texports.Box2 = Box2;\n\texports.Line3 = Line3;\n\texports.Euler = Euler;\n\texports.Vector4 = Vector4;\n\texports.Vector3 = Vector3;\n\texports.Vector2 = Vector2;\n\texports.Quaternion = Quaternion;\n\texports.Color = Color;\n\texports.MorphBlendMesh = MorphBlendMesh;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.VertexNormalsHelper = VertexNormalsHelper;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.PointLightHelper = PointLightHelper;\n\texports.RectAreaLightHelper = RectAreaLightHelper;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.GridHelper = GridHelper;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.FaceNormalsHelper = FaceNormalsHelper;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.CameraHelper = CameraHelper;\n\texports.BoxHelper = BoxHelper;\n\texports.ArrowHelper = ArrowHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.LineCurve3 = LineCurve3;\n\texports.ArcCurve = ArcCurve;\n\texports.EllipseCurve = EllipseCurve;\n\texports.SplineCurve = SplineCurve;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.LineCurve = LineCurve;\n\texports.Shape = Shape;\n\texports.Path = Path;\n\texports.ShapePath = ShapePath;\n\texports.Font = Font;\n\texports.CurvePath = CurvePath;\n\texports.Curve = Curve;\n\texports.ShapeUtils = ShapeUtils;\n\texports.SceneUtils = SceneUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.TubeBufferGeometry = TubeBufferGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusBufferGeometry = TorusBufferGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.TextBufferGeometry = TextBufferGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.SphereBufferGeometry = SphereBufferGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.RingBufferGeometry = RingBufferGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.LatheBufferGeometry = LatheBufferGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.ConeBufferGeometry = ConeBufferGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.CircleBufferGeometry = CircleBufferGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxBufferGeometry = BoxBufferGeometry;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.PointsMaterial = PointsMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.Material = Material;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.BufferAttribute = BufferAttribute;\n\texports.REVISION = REVISION;\n\texports.MOUSE = MOUSE;\n\texports.CullFaceNone = CullFaceNone;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.FrontSide = FrontSide;\n\texports.BackSide = BackSide;\n\texports.DoubleSide = DoubleSide;\n\texports.FlatShading = FlatShading;\n\texports.SmoothShading = SmoothShading;\n\texports.NoColors = NoColors;\n\texports.FaceColors = FaceColors;\n\texports.VertexColors = VertexColors;\n\texports.NoBlending = NoBlending;\n\texports.NormalBlending = NormalBlending;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.CustomBlending = CustomBlending;\n\texports.AddEquation = AddEquation;\n\texports.SubtractEquation = SubtractEquation;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.MinEquation = MinEquation;\n\texports.MaxEquation = MaxEquation;\n\texports.ZeroFactor = ZeroFactor;\n\texports.OneFactor = OneFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.NeverDepth = NeverDepth;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.EqualDepth = EqualDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterDepth = GreaterDepth;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.MixOperation = MixOperation;\n\texports.AddOperation = AddOperation;\n\texports.NoToneMapping = NoToneMapping;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.UVMapping = UVMapping;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.SphericalReflectionMapping = SphericalReflectionMapping;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.ByteType = ByteType;\n\texports.ShortType = ShortType;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.IntType = IntType;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.FloatType = FloatType;\n\texports.HalfFloatType = HalfFloatType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.AlphaFormat = AlphaFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBAFormat = RGBAFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.RGBEFormat = RGBEFormat;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LoopPingPong = LoopPingPong;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.LinearEncoding = LinearEncoding;\n\texports.sRGBEncoding = sRGBEncoding;\n\texports.GammaEncoding = GammaEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.CubeGeometry = BoxGeometry;\n\texports.Face4 = Face4;\n\texports.LineStrip = LineStrip;\n\texports.LinePieces = LinePieces;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MultiMaterial = MultiMaterial;\n\texports.PointCloud = PointCloud;\n\texports.Particle = Particle;\n\texports.ParticleSystem = ParticleSystem;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Vertex = Vertex;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.Spline = Spline;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.EdgesHelper = EdgesHelper;\n\texports.WireframeHelper = WireframeHelper;\n\texports.XHRLoader = XHRLoader;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.GeometryUtils = GeometryUtils;\n\texports.ImageUtils = ImageUtils;\n\texports.Projector = Projector;\n\texports.CanvasRenderer = CanvasRenderer;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","import Smoke from './smoke';\n\nconst smoke = new Smoke(document.querySelector('.js-smoke'));\n\nsmoke.update();\n","import * as THREE from 'three';\n\nclass Smoke {\n\n  constructor(element, options) {\n    const defaults = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n\n    this.element = element;\n\n    Object.assign(this, options, defaults);\n    this.onResize = this.onResize.bind(this);\n\n    this.addEventListeners();\n    this.init();\n  }\n\n  init() {\n    const { element, width, height } = this;\n\n    this.clock = new THREE.Clock();\n\n    const renderer = this.renderer = new THREE.WebGLRenderer({\n      canvas: element\n    });\n\n    renderer.setSize(width, height);\n\n    this.scene = new THREE.Scene();\n\n    const meshGeometry = new THREE.CubeGeometry(200, 200, 200);\n    const meshMaterial = new THREE.MeshLambertMaterial({\n      color: 0xaa6666,\n      wireframe: false\n    });\n    this.mesh = new THREE.Mesh(meshGeometry, meshMaterial);\n\n    this.cubeSineDriver = 0;\n\n    this.addCamera();\n    this.addLights();\n    this.addParticles();\n    this.addBackground();\n  }\n\n  evolveSmoke(delta) {\n    const { smokeParticles } = this;\n\n    let smokeParticlesLength = smokeParticles.length;\n\n    while(smokeParticlesLength--) {\n      smokeParticles[smokeParticlesLength].rotation.z += delta * 0.2;\n    }\n  }\n\n  addLights() {\n    const { scene } = this;\n    const light = new THREE.DirectionalLight(0xffffff, 0.75);\n\n    light.position.set(-1, 0, 1);\n    scene.add(light);\n  }\n\n  addCamera() {\n    const { scene } = this;\n    const camera = this.camera = new THREE.PerspectiveCamera(75, this.width / this.height, 1, 10000);\n\n    camera.position.z = 1000;\n    scene.add(camera);\n  }\n\n  addParticles() {\n    const { scene } = this;\n    const textureLoader = new THREE.TextureLoader();\n    const smokeParticles = this.smokeParticles = [];\n\n    textureLoader.load('assets/images/clouds.png', texture => {\n      const smokeMaterial = new THREE.MeshLambertMaterial({\n        color: 0xffffff,\n        map: texture,\n        transparent: true\n      });\n      smokeMaterial.map.minFilter = THREE.LinearFilter;\n      const smokeGeometry = new THREE.PlaneBufferGeometry(300, 300);\n\n      const smokeMeshes = [];\n      let limit = 150;\n\n      while(limit--) {\n        smokeMeshes[limit] = new THREE.Mesh(smokeGeometry, smokeMaterial);\n        smokeMeshes[limit].position.set(Math.random() * 500 - 250, Math.random() * 500 - 250, Math.random() * 1000 - 100);\n        smokeMeshes[limit].rotation.z = Math.random() * 360;\n        smokeParticles.push(smokeMeshes[limit]);\n        scene.add(smokeMeshes[limit]);\n      }\n    });\n  }\n\n  addBackground() {\n    const { scene } = this;\n    const textureLoader = new THREE.TextureLoader();\n    const textGeometry = new THREE.PlaneBufferGeometry(600, 320);\n\n    textureLoader.load('assets/images/background.jpg', texture => {\n      const textMaterial = new THREE.MeshLambertMaterial({\n        blending: THREE.AdditiveBlending,\n        color: 0xffffff,\n        map: texture,\n        opacity: 1,\n        transparent: true\n      });\n      textMaterial.map.minFilter = THREE.LinearFilter;\n      const text = new THREE.Mesh(textGeometry, textMaterial);\n\n      text.position.z = 800;\n      scene.add(text);\n    });\n  }\n\n  render() {\n    const { mesh } = this;\n    let { cubeSineDriver } = this;\n\n    cubeSineDriver += 0.01;\n\n    mesh.rotation.x += 0.005;\n    mesh.rotation.y += 0.01;\n    mesh.position.z = 100 + Math.sin(cubeSineDriver) * 500;\n\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  update() {\n    this.evolveSmoke(this.clock.getDelta());\n    this.render();\n\n    requestAnimationFrame(this.update.bind(this));\n  }\n\n  onResize() {\n    const { camera } = this;\n\n    const windowWidth  = window.innerWidth;\n    const windowHeight = window.innerHeight;\n\n    camera.aspect = windowWidth / windowHeight;\n    camera.updateProjectionMatrix();\n\n    this.renderer.setSize(windowWidth, windowHeight);\n  }\n\n  addEventListeners() {\n    window.addEventListener('resize', this.onResize);\n  }\n\n}\n\nexport default Smoke;\n"]}